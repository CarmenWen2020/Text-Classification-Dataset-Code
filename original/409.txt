Network function virtualization (NFV) allows edge devices to host different types of virtual network functions (VNFs) and support Computing in the Network. Therefore, an edge device can abstract multiple VNFs of different infrastructure providers (InPs) as services and serve them at different times to act as a tenant for different InPs. Deploying edge devices is expensive and difficult to manage. Hence, crowdsourced edge devices can be used. To ensure the quality and availability of the services and the privacy of sensitive data of the service stakeholders, it is extremely important to establish a service level agreement (SLA) between an edge device owner and an InP. For monitoring of SLA compliance and enforcing accountability, a trusted platform is required. The traditional NFV management authority cannot be trusted due to its centralized characteristics. In this article, we propose a blockchain-powered framework for the SLA compliance of edge devices offering VNFs as services and introduce a smart contract-driven framework to establish trust in edge-based NFV. We analyze the performance of the proposed framework in the context of a private blockchain network.

Introduction
The advancement of edge computing enables different computing tasks to be pushed from cloud to edge devices. In edge computing, a user can only access resources that are hosted by the local edge devices deployed by an infrastructure provider (InP) [1]. On the other hand, a user can access cloud resources at different geographic locations across countries and continents. In general, edge computing can provide real-time computing tasks that demand low latency, high bandwidth, and low processing power. On the contrary, cloud computing can host computing tasks that are delay-tolerant and resource-hungry. Therefore, edge and cloud computing platforms form a computing continuum to build innovative types of applications [2], [3].

Network function virtualization (NFV) [4] can be considered as an example application that can benefit from the edge-cloud continuum. In NFV, the execution of network operations are decoupled from hardware to software. The edge-based NFV allows an edge device to host one or more virtual network functions (VNFs) such as deep packet inspection (DPI), network address translation (NAT), access control (AC), packet routing, security, and privacy. VNFs are distributed among multiple edge devices with the aim of load balancing and serving the local users only. However, such distribution of VNFs requires deployment of sufficient edge devices, which can be considered expensive from the InP's point-of-view. Moreover, the management of the edge devices can be cumbersome for an InP. To avoid the deployment and management issues of edge devices, an InP can exploit the idea of crowdsourcing [5] edge devices. With crowdsourcing, different individuals or organizations should be allowed to register their edge devices in the infrastructure of the InP and provide NFV services by giving some financial benefits to the edge device owners.

Although a crowdsourced edge device can play a significant role in NFV, we identify the following issues that would hamper the success of the edge-cloud continuum for NFV:

An InP does not have direct control on the crowdsourced edge devices' availability. For instance, an owner of an edge device may join or leave the infrastructure at any time.

It is impossible for an InP to maintain the quality of service of third-party-owned edge devices. For example, the owner of an edge device promises to ensure a level of reliability, security, and privacy during the NFV service provisioning. However, the edge device fails to provide that. In that case, the InP cannot improve the QoS, but must rely on the action of the owner of the edge device.

The existence of too many edge devices, providing the same network function at the same time for a particular local network, would require optimization, introducing additional computational overhead. On the other hand, lack of required edge devices to complete a particular NFV would hamper the NFV operation.

To ensure the QoS offered by edge device owners, a service level agreement (SLA) needs to be developed between an InP and a corresponding edge device provider. The SLA is a summary of the performance requirements [6] (e.g., processing latency, throughput, storage and processing capacity, availability, and reliability) and the network functionality offered by an edge device provider that need to be maintained during the service provisioning. A monitoring system continually evaluates SLA compliance for ensuring uninterrupted service provisioning and required QoS.

SLA compliance is extremely important in crowdsourced edge computing for the success of the edge-cloud continuum. The traditional edge-cloud continuum is mainly operated under a platform with centralized administrative control, which opens the chance of SLA and QoS tampering by a dishonest InP and internal or external cyber attackers. Therefore, SLA compliance should be done in a trustworthy manner. Although the amalgamation of NFV, edge computing, and blockchain technology enables trust in NFV [7], trustworthy SLA compliance is not yet explored.

In this article, we introduce a blockchain [8] powered trustworthy SLA compliance framework for crowdsourced edge-based NFV. In the proposed framework, the decentralized blockchain platform is leveraged for distributing the SLA among multiple nodes and ensuring the compliance with SLA between edge device providers and InPs with the help of smart contract [8] technology. Overall, the contributions of this article are as follows:

We introduce a crowdsourced edge-based NFV framework for the edge cloud continuum.

The framework is improved by integrating with a private blockchain for ensuring trust in the edge SLA management process.

Further, a smart-contract-based SLA enforcement mechanism is developed to achieve compliance.

Background
Blockchain is a trustworthy platform that stores data into multiple nodes in a decentralized manner [9]. In other words, each node stores the exact same copy of the data. To make any authorized changes in the blockchain data, a consensus needs to be achieved. Moreover, blockchain uses heavy cryptographic mechanisms that make the data immutable in the blockchain. Smart Contract is a computer program that can be executed in the blockchain platform [8]. A smart contract is replicated in all blockchain nodes containing a set of rules to execute blockchain transactions. Blockchain transactions are validated by smart contracts before executing in the blockchain network to ensure the execution of only valid blockchain transactions. Hence, controlling the operation of IoT edge devices via smart contracts has become a new norm [10]. From that point of view, blockchain is a good candidate platform to build a trustworthy SLA compliance framework for crowdsourced edge-based NFV.

The authors of [6] present a trustworthy architecture for multi-domain edge orchestration using blockchain for solving the problem of multi-con-straint QoS. The architecture also introduces automation of the fulfillment of SLAs through smart contracts. A blockchain-enabled trustworthy slicing mechanism is proposed for NFV in [11]. In [12], a blockchain-based secure orchestration system for NFV, called BSec-NFVO, is proposed that ensures non-repudiation and integrity. Another blockchain-enabled edge-based distributed NFV framework is proposed in [13] for achieving consensus among multiple management and orchestration systems for NFV. However, none of the aforementioned approaches provides block-chain-based SLA compliance for crowdsourced edge devices in NFV.

A Practical Case Scenario: Crowdsourced Edge-Based Network Function Virtualization
In this article, we consider the SLA compliance of a virtualized content delivery system (VMCDS) [14] as a case scenario. In our scenario, the VMCDS delivers various types of multimedia contents across the network. This system utilizes crowdsourced edge devices and virtualization layers to dynamically deploy VMCDS virtual functions in crowdsourced edge devices. The deployment is done based on an SLA between edge device owners and the cloud in the VMCDS. The key objective of the SLA is to ensure the required content delivery services to each type of user based on their location, service request time, and subscription type.

Assume that there are multiple edge device owners that want to provide virtualized multimedia content delivery (VMCD) services by hosting VNFs. The edge device owners register their devices in the VMCDS. We assume that an edge device owner can register multiple edge devices to provide similar or different types of services. VNFs include storing multimedia contents, load balancing, security, privacy, and data analytics related to content delivery. The type of VNF is defined in the SLA between an edge device owner and the VMCDS. To guarantee the desired QoS, each edge device must comply with the SLA to get paid for its service.

Importance of SLA Compliance in Crowdsourced Edge-Based NFV
In this section, we discuss different possible parameters of an SLA that are applicable to crowdsourced edge-based NFV. Most importantly, we present our thoughts on the importance of SLA compliance in crowdsourced edge-based NFV.

Assume that there are four crowdsourced edge devices in edge-cloud continuum-based NFV (EC2N) denoted as EA, EB, EC, and ED.V1,V2, V3, and V4 are VNFs hosted by EA, EB, EC, and ED, respectively. At the time of device registration, each edge device agrees on the functionality it will provide and on some performance requirements (i.e., QoS). For instance, the owner of EA agrees that it will provide a VNF V1 (e.g., NAT functionality to the local user devices) between time t1 and t2. The owner of EA also agrees 99.99 percent availability, 99.9 percent reliability, a latency of maximum 1.02 ms, using security protocol SP and data privacy mechanism Priv. An SLA defines the name of the VNF (i.e., V1) as the network function (NF) of EA, and the availability, reliability, latency, security protocol, and priva-cy-preserving mechanism as the QoS parameters. The SLA for EA is stored in the SLA repository and continuously monitored by the CM. Depending on the SLA, two or more edge devices are selected to provide computing tasks with NFV.

If an edge device fails to comply with the SLA, that is, fails to maintain the requirements according to the SLA, the whole NFV system will fail. Assume that an orchestrated computing service comprises two VNFs, V1 and V2, that are hosted by EA and EB, respectively. Both EA and EB have SLAs to serve their respective VNFs between time t1 and t2 daily. However, EB is not available during the agreed time slot, and the VNF cannot be executed (Fig. 1a). Consider another case where EB is supposed to host VNF V2. At a given time, EB is not capable of providing V2. Instead, EB offers V′2 (Fig. 1b). The latter VNF has the same functionality (e.g., audio or video streaming) with comparatively low quality service. In all of the aforementioned cases, device EB failed to comply with the SLA. As a result, the corresponding service and the whole NFV system failed.

Figure 1. - Failure to comply with SLA: a) Edge device is unavailable at time $t_{0}$; b) Edge device does not host the VNF as per SLA.
Figure 1.
Failure to comply with SLA: a) Edge device is unavailable at time t0; b) Edge device does not host the VNF as per SLA.

Show All

An SLA compliance method is extremely important to create several policies that would help to identify non-complying edge devices, enforce the policies to ensure compliance, and penalize non-complying edge device owners.

Limitations of Traditional Edge-Based NFV and its SLA Compliance System
In this section, we discuss some of the key limitations of traditional edge-based NFV and its SLA compliance system that would fail the objective of crowdsourced edge-based NFV platform.

Risks of SLA Data Tampering
The traditional NFV systems are operated under the centralized authority of the infrastructure provider (InP). To make it more clear, SLA data are stored in the SLA repository managed by the InP. A dishonest InP can tamper with the QoS data in the SLA to benefit one or more non-complying edge device owners or with the aim of sabotage. Linking with an example given earlier, device EB hosts a different VNF instead of the agreed one and fails to comply with the SLA. The dishonest InP can alter SLA functional description data as well to hide the non-compliance of EB and give it benefits. Overall, the InP has no obligation in traditional edge-based NFV and its SLA compliance system; hence, it cannot be trusted.

Risks of Security
As crowdsourced edge-based NFV involves untrusted edge device providers, the device registration module can be compromised by an internal or external attacker of the EC2N platform. Hence, any device can be compromised to host malicious VNFs, or a malicious device can be deployed in the EC2N platform. For example, edge device EB is compromised by an attacker to host a VNF that would poison the NAT data. The NAT data poisoning would allow transferring network packets to a particular host owned by the attacker. As a result, the security of the EC2N platform would be at risk.

Risks of Privacy Breach
A registered edge device can take advantage of accessing sensitive data that is stored in it. With the knowledge of sensitive data, the owner of the edge device can learn the business model of the InP and make money by revealing it to other InPs. This is a serious privacy breach. The traditional SLA mechanism does not enforce any policy that would prevent the privacy breach in the EC2N platform.

Toward a Blockchain-Enabled SLA Compliance Framework for Crowdsourced EC2N
Although crowdsourcing can enhance the adaptation of edge devices in NFV, it introduces several challenges in ensuring SLA compliance. The SLA compliance mechanism should be made trustworthy to make crowdsourced edge-based NFV. In this section, we present our proposed block-chain-enabled SLA compliance (BSC) framework for the crowdsourced EC2N. First, we present the overview of the proposed system. Later, we discuss the smart-contract-enabled SLA compliance for NFV.

Overview of Blockchain-Enabled Crowdsourced Edge-Based Network Function Virtualization
In this section, we discuss our proposed block-chain-enabled crowdsourced edge-based NFV framework. The primary objective of the framework is to allow different individuals and organizations to register their edge devices in an EC2N platform. Figure 2 shows the overview of the framework. The framework consists of five layers: edge device layer, SLA compliance layer, NVF layer, orchestration layer, and service layer.

Figure 2. - Overview of the proposed blockchain-enabled SLA compliance (BSC) framework.
Figure 2.
Overview of the proposed blockchain-enabled SLA compliance (BSC) framework.

Show All

The edge device (ED) layer consists of heterogeneous edge devices owned by different individuals and organizations. The ED layer is the physical layer of the edge-cloud continuum and resides at the bottom of the framework. Edge devices are mainly geographically distributed under the control of the infrastructure provider. The SLA compliance (SC) layer is the second layer of the framework, responsible for edge device registration, SLA generation, and continuous monitoring of SLA compliance. When an edge device owner joins the EC2N platform, it has to register itself with a module, called the device registration module (DRM), of the SC layer. During the registration process, DRM dynamically generates an SLA between the EC2N platform and the device using a pre-defined template. Once the SLA is generated, it is stored in the SLA repository within the SC layer. The SC layer contains a compliance monitor (CM) that continuously observes the compliance of edge devices in the ED layer with the help of an SLA stored in the SLA repository. Here, the CM works in a centralized fashion under the authority of the EC2N infrastructure provider.

The third layer of the framework is the NFV layer, which abstracts each hardware-based computing task as a VNF. In this framework, it is assumed that a VNF alone cannot fulfill a complete computing task. Therefore, the NFV layer contains multiple VNF instances with the same and different functionality. The objective of this redundancy is to ensure the execution of any computing tasks in close proximity of the geographically distributed users of the platform. Each VNF is hosted by an edge device in the ED layer and associated with an SLA in the SC layer. Therefore, an edge device acts as a virtual machine (VM) for the corresponding VNF.

The fourth layer is the orchestration layer, which performs the VNF orchestration to generate a computing service. The orchestration layer, using the SLA stored in the SLA repository of the SC layer, combines multiple VNFs that are available in the NFV layer. The fifth and final layer is the service layer, which advertises the orchestrated computing services to the users.

In addition to the components of the CEN framework, the BSC framework consists of four core components: blockchain integrator, SLA contract generator, SLA contract repository, and blockchain network. The SLA contract generator receives a contract generation request from the SLA generator as a blockchain transaction. The transaction consists of functional and QoS parameters related to the SLA. The SLA contract repository stores the SLA contracts for all of the SLAs in the EC2N platform. The blockchain network stores SLA data in an immutable manner that is used by the SLA contracts to enforce SLA compliance.

The blockchain integrator (BI) facilitates the communication among the components of the CEN framework. The BI is a software module that consists of multiple sub-components, referred to as facilitators. Facilitator sub-components include SLA facilitator, NFV facilitator, orchestration facilitator, and service facilitator. The SLA facilitator ensures trustworthy SLA generation by interfacing among the SLA generator, SLA contract generator, and blockchain network. The NFV facilitator creates VNFs through the guidance of the SLA contract generator. The orchestration facilitator interfaces between the orchestrator and the blockchain network. Overall, the facilitator sub-components facilitate the integration of the NFV operations.

In our proposed framework, we use a private blockchain network as we assume that the VMCDS is owned by a single entity. However, a consortium blockchain network can also be chosen if the VMCDS is a combination of multiple VMCD service providers. The private blockchain network of the proposed framework consists of multiple authorized nodes. In our proposed framework, authorized nodes are selected by the VMCDS owner, and nodes are geographically distributed. For example, a cloud-based multimedia content server can be an example of a blockchain node. The number of blockchain nodes depends on the number of geographically distributed content servers of the VMCDS.

We use an Ethereum-based private block-chain in this framework. Hence, the blockchain network uses a proof-of-work (PoW) [15] based consensus protocol, which is the default consensus mechanism of the Ethereum platform. The PoW consensus mechanism is widely used in different existing blockchain networks. In PoW, the blockchain nodes can be divided into two classes: prover and verifier. Each prover node votes by solving PoW instances (e.g., a complex mathematical challenge). On the other hand, the verifier node verifies whether or not a prover node has spent sufficient computational power to solve the mathematical challenge. The voting requires extensive computation power, which makes it hard to generate false votes. Therefore, only legitimate blockchain nodes can validate transactions and construct the appropriate blocks. The block with the majority of votes is added to the block-chain. Our proposed framework stores an edge device's QoS data in the blockchain once validated by SLA contracts.

Blockchain-Enabled SLA Compliance for NFV
In the proposed BSC framework, SLA compliance is done by leveraging blockchain and smart contract technology. Figure 3a shows the overview of the compliance process. The SLA compliance process has the following: sub-processes.

Figure 3. - a) Flow diagram of the proposed blockchain-enabled SLA compliance; b) Smart contract pseudo-codes SLA compliance.
Figure 3.
a) Flow diagram of the proposed blockchain-enabled SLA compliance; b) Smart contract pseudo-codes SLA compliance.

Show All

SLA Contract Generation
At the beginning, an edge device owner sends a device registration request to the DRM of the SC layer. Next, the DRM sends an SLA generation request to the SLA generator. After that, the SLA generator defines the functional and QoS parameters of the SLA between the edge device owner and InP and sends the parameters to the SLA facilitator. The SLA facilitator generates an SLA smart contract, called SLA contract (Fig. 3b). The SLA contract mainly sets the SLA information such as the unique address of the edge device, proposed service type, and promised service date range and time.

Finally, the SLA contract is deployed in the blockchain. During the deployment process, the SLA contract is distributed among all nodes in the blockchain network. Hence, an SLA contract cannot be changed by an internal or external attacker. Once the SLA contract is deployed in the blockchain, the edge device is registered in the DRM.

Creation of VNFs for Edge Devices
Once an edge device is registered, the SLA facilitator sends a notification to the NFV facilitator. The NFV facilitator reads the functional information of the edge device in its SLA and generates one or more VNFs for the edge device. The VNFs are loaded in the edge device.

SLA Compliance via SLA Contracts
During the execution of the VNFs by edge devices, the CM takes the performance parameters of an edge device and sends them to the service facilitator. The service facilitator generates a blockchain transaction with the performance data and sends it to the blockchain network for the compliance check. The blockchain network executes the corresponding SLA contract of the edge device and validates the compliance of the SLA. The compliance report is delivered to the CM. Figure 3b illustrates the pseudocode of the SLACompliance smart contract that validates the compliance of an edge device in the proposed framework.

System Analysis
In this section, we analyze the risk mitigation of the proposed system. The following analysis justifies how well the proposed method mitigates the risks of traditional edge-based NFV and its SLA compliance system mentioned earlier.

SLA Data Tampering Resistance
In our proposed blockchain-enabled SLA compliance framework, the SLA data and QoS values of crowdsourced edge devices are stored in the blockchain as a chain of hash values [8]. If an internal attacker (e.g., a dishonest InP) or external attacker wants to tamper with data in the block-chain, hashes of all the subsequent data need to be recomputed and verified by the majority of the blockchain nodes. As the blockchain of SLA and QoS data are distributed among multiple block-chain nodes, an attacker must change the hash values in the blockchain of SLA data and QoS values of the majority of the blockchain nodes. Therefore, an attacker cannot tamper with the SLA data and QoS values, and SLA data becomes tamper-resistant in our proposed framework.

Secure Device Registration and SLA Compliance
The proposed framework allows the registration of edge devices via smart contracts. A smart contract is generated for each edge device containing the SLA and QoS information, and the byte code of the smart contract is distributed among all the blockchain nodes [8]. The smart contract for an edge device is generated only if the device is an authorized participant and can fulfill the network requirement. For example, an authorized edge node must have the required number of coins to apply for a registration. At the first point, a malicious device cannot register itself in the network. If a registered edge is compromised by an attacker later, the attacker must change the SLA data in all blockchain nodes to compromise the SLA validation process, which is extremely difficult for an attacker. Thus, our proposed framework is secure from unauthorized device registration and SLA smart contract alteration.

Privacy Preservation During SLA Compliance
SLA compliance is verified via the SLA smart contract that is generated for a device. The SLA smart contract ensures that a device can only access the QoS and SLA information to which it is entitled. Hence, the sensitive information related to SLA and QoS is not revealed to any party, including the InP and edge devices. Hence, privacy-preserving SLA compliance is ensured in this proposed framework.

Experimental Results and Performance Evaluation
In this section, we conduct several experiments to evaluate the performance of the proposed block-chain-enabled SLA compliance framework. The main objective of the performance evaluation is to check the computational overhead introduced by the blockchain technology.

We consider different numbers of virtual edge devices (100 to 500). For the sake of simplicity, we assume that each edge device hosts only one VNF, and only one SLA is required for each edge device. The experiments are performed on Amazon AWS EC2 (c4.2xlarge instance) with the Ubuntu 16.04 operating system, 16 GB memory, and an Intel E5-1650 8 core CPU. Experiments are conducted in an Ethereum-based private blockchain network [15] using the default network topology of Ethereum. Smart contracts are written using solidity [15]. Java-based programs are used to compute the execution times for blockchain-based SLA compliance. As the integration of the blockchain is at the core of validating the SLA compliance, the experiments are designed to evaluate the execution time for the edge device registration and compliance tasks with different numbers of blockchain transactions and blockchain nodes.

At first, we show the time required for generating smart contracts (i.e., SLA contracts) in Fig. 4a. We consider different numbers of edge devices while keeping the number of VNFs = 5. The required time increases exponentially if the number of simultaneous edge devices increase. Next, we show the SLA compliance of edge devices in the traditional NFV-based VMCDS that does not include blockchain and smart contract technology. Figure 4a shows that the SLA validation time is very fast in traditional NFV based VMCDS.

Figure 4. - a) Time required for generating SLA contracts at the time of registration for different numbers of edge devices (number of $\mathsf{VNFs}=5$); b) time required for validating SLA of edge devices without smart contract; c) time required for validating simultaneous transactions with SLA contract for different numbers of transactions and a fixed number of nodes (number of blockchain nodes = 2); d) time required for validating simultaneous transactions with SLA contract for a fixed number of transactions (number of transactions = 100) and different numbers of blockchain nodes.
Figure 4.
a) Time required for generating SLA contracts at the time of registration for different numbers of edge devices (number of VNFs=5); b) time required for validating SLA of edge devices without smart contract; c) time required for validating simultaneous transactions with SLA contract for different numbers of transactions and a fixed number of nodes (number of blockchain nodes = 2); d) time required for validating simultaneous transactions with SLA contract for a fixed number of transactions (number of transactions = 100) and different numbers of blockchain nodes.

Show All

We evaluate the performance of the SLA Compliance of edge devices via smart contracts (SLA contracts) in terms of the required times for validating different numbers of simultaneous blockchain transactions to check SLA compliance. While keeping the number of blockchain nodes equal to 2, the validation time increases almost linearly when simultaneous transactions increase (Fig. 4c). Next, the required times are computed for different numbers of blockchain nodes while keeping the number of simultaneous transactions equal to 100. Results show that the validation time increases exponentially if the number of blockchain nodes increases (Fig. 4d). Hence, the number of blockchain nodes should be kept minimal in the proposed edge SLA compliance mechanism for better scalability.

This article introduces the crowdsourced edge devices for NFV. To the best of our knowledge, the proposed method is the first attempt to enforce the SLA compliance of crowdsourced edge-based NFV. Existing research works on edge-based NFV [6], [11]–[12][13] do not consider the SLA compliance techniques of crowdsourced edge devices. Therefore, the performance of our proposed work cannot be compared with existing results. The experimental results exhibit the feasibility of the proposed blockchain-enabled SLA compliance framework for crowdsourced edge-based NFV.

Conclusion
This article addresses the SLA compliance issue in NFV. A virtualized multimedia content delivery system is considered as a practical case scenario in this article. SLA compliance in edge-based NFV is very important as any device can join an edge network to compromise an edge device and behave maliciously. Therefore, it is extremely important to ensure secure registration of edge devices and monitoring their compliance to SLA in NFV. State-of-the-art techniques, such as cryptography, can ensure the secrecy of communication; however, they fail to handle inside attacks in most cases. From that point of view, this article proposes a blockchain- and smart-contract-en-abled SLA compliance technique. SLA data and compliance verification codes for SLA data storage and SLA compliance verification, respectively, can be stored in a decentralized manner in the blockchain network. Hence, changing SLA agreements and SLA smart contracts become infeasible for an attacker. Therefore, the proposed framework ensures trustworthy SLA compliance.

This article introduces a novel edge device SLA compliance approach for NFV using the block-chain and smart contract technology. Initially, the crowdsourced edge-based NFV framework is proposed. As the crowdsourced edge devices cannot be fully trusted, an SLA compliance mechanism is introduced. To ensure the trust of SLA compliance, the blockchain and smart contract technologies are used to extend the proposed framework. The SLA compliance framework is implemented in an Ethereum-based private block-chain to exhibit the feasibility. We consider the scalability as the feasibility parameter. The experimental results show that the scalability of the SLA compliance framework is good. However, the number of nodes in the blockchain should be minimal. As the proposed framework uses the PoW consensus algorithm, which is the Ethereum blockchain's default consensus algorithm, the validation times are higher due to its complexity. In our future work, we will investigate the scalability of the proposed SLA compliance framework with other consensus mechanisms in both private and consortium blockchain networks.