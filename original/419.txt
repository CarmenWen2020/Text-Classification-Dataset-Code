Space-air-ground integrated networks (SAGINs) have gained significant attention and become a promising architecture for ubiquitous connectivity for 5G-Advanced and 6G, enabling the integration of satellite networks, aerial networks, and terrestrial networks. This integration brings tremendous communication benefits, such as non-terrestrial networks, seamless global coverage, high flexibility, and augmented system capacity. Meanwhile, computing capability becomes an indispensable part of the SAGIN ecosystem. In SAGINs, limited and unbalanced computation and communication resources of different network segments make it challenging to provide strict quality-of-service (QoS) guarantees for specific traffic (e.g., delay-sensitive traffic and outage-sensitive traffic). To fully utilize available system resources in SAGINs, cooperative computing among different network segments is a promising technology. This article presents the fundamentals and applications of computing over SAGINs by introducing the system architecture and explaining the potential technical issues related to cooperative computing. Furthermore, the potential for cooperative computing over SAGINs is showcased with a preliminary performance evaluation. Finally, future research opportunities are discussed.
Introduction
The explosive growth of mobile data traffic in recent years incurs the proliferation of mobile access services. Terrestrial communication networks have been widely developed to meet such demands. Wireless networks will exploit all possible resources by interconnecting space, air, and ground network segments to enable non-terrestrial networks (NTNs) providing seamless wireless coverage and support heterogeneous service requirements. Such a space-air-ground integrated network (SAGIN) has attracted considerable attention in recent years, which has the potential to be applied in 5G-Advanced and 6G cellular networks [1].

With the continuous demand of users for different service applications, users increasingly request adequate computation resources to process their computation tasks efficiently. Furthermore, as new network components arise, such as satellite and unmanned aerial vehicles (UAVs), both communication and computation services are no longer limited to the ground. The devices may not guarantee their corresponding latency requirements for processing computation tasks due to the limited computing capability at local devices. Furthermore, the potentially large energy consumption of local computing at devices reduces their battery life significantly. Therefore, computation offloading has been introduced as a promising solution where computing servers offload users' computation tasks through wireless connections [2].

In SAGINs, as a multidimensional network, computation and communication resources will be unbalanced in different network segments. To be specific, the terrestrial network, owing to the pervasive infrastructure landscape like 5G, provides fast data rate to achieve sufficient computation resources through edge and cloud servers with backbone networks. The NTN part of SAGINs includes both the aerial network and the space network. The aerial network, benefiting from the line-of-sight (LoS) dominated connections and flexible mobility, further enhances the communication performance. However, aerial nodes' battery capacities are usually restricted, leading to limited computation capacity. The space network performs as a vital tool to support global information exchange, especially serving as a “last resort” for communicating in remote areas. Although the computation resources in the space network are limited, the ubiquitous communication connectivity with a desirable data rate can assist in offloading computation tasks to terrestrial and aerial networks. Based on the unique features and limitations of the network segments, different networks should be operated cooperatively through optimizing the unbalanced system resources, in terms of both computation and communication, to satisfy heterogeneous service requirements.

The main contributions and novelties of this article are summarized below.

Computing Architecture of Sagins
We illustrate the computing architecture of SAGINs, including the characteristics of each network segment, the computing capability of components in SAGINs, and the computing interactions among different network segments.

Cooperative Computing Over Sagin
We present various computing scenarios in SAGINs and their corresponding cooperative computing schemes. Furthermore, we discuss the primary research challenges in each cooperative computing scheme that serve as hurdles to the practical realization, motivating possible solutions that are expected to guide research in this domain.

Preliminary Performance Evaluation
To evaluate cooperative computing performance over SAGINs, we provide numerical results of satel-lite-aerial cooperative computing within NTNs for disasters compared with other schemes. The results demonstrate the advantages of implementing cooperative computing over SAGINs.

Figure 1. - Computing architecture of space-air-ground integrated networks.
Figure 1.
Computing architecture of space-air-ground integrated networks.

Show All

Future Research Directions
We refine promising research opportunities in the field of computing over SAGINs, including space/aerial-assisted vehicular computing, distributed computing over SAGINs, blockchain-enabled computing over SAGINs, and reconfigurable intelligent surface-aid-ed computing over SAGINs.

Computing Architecture of Sagins
This section introduces the architecture of computing over SAGINs and the computing characteristics of each network segment. The computing architecture of SAGINs is shown in Fig. 1, which consists of three network segments, that is, a space network, aerial network, and terrestrial network [3]. Note that the aerial and space networks belong to NTNs. The network segments can work independently or cooperatively to execute various computation services.

Non-Terrestrial Networks: Space Networks
Architecture
The satellites operate at different altitudes, which are categorized into geostationary orbit (GEO) satellites, medium earth orbit (MEO) satellites, and low earth orbit (LEO) satellites, as shown in Table 1. GEO satellites can provide a stable platform for wireless communications with a continuous relay and extensive coverage for ground users, marine users, and aerial users. MEO satellites can support GPS positioning, high-speed telephone signals, and military sector and personnel with high bandwidth and low latency. LEO satellites significantly reduce the propagation delay of the signals between the ground and the satellites. A new class of miniaturized satellites known as CubeSats, has motivated a sea change in the LEO satellite infra- structure landscape, which can be used as an in-space backhaul and support cyber-physical integration [4]. Such a transformative novel cyber-physical system spanning space, air, and ground is referred to as Internet of Space Things (loST) [5].

Computing
Satellites can conduct data collections, sensing, and communications at any time. They often generate many computation tasks. However, the computing capability of a satellite at LEO is usually limited due to the restricted size, weight, and onboard energy, such as CubeSats. The limited onboard energy supply is critical to a satellite's operation when there is not enough solar power. Therefore, LEO satellites' computation tasks can be offloaded to cloud or edge servers through ground stations that connect the backbone network with sufficient computation resources.

With the help of GEO satellites, computation tasks generated from MEO satellites can be off-loaded to GEO satellites if the GEO satellites have computation resources. This is because:

GEO satellites are relatively heavy and can carry more computation resources with onboard energy compared to other satellites.

The distance between GEO and most MEO satellites (approximately at the altitude of 20,200 km) is less than the distance between sea level and MEO, which reduces the propagation delay.

Less signal attenuation of in-space transmissions compared to communicating with terrestrial nodes.

Non-Terrestrial Networks: Aerial Networks
Architecture
The main components in aerial networks are UAVs, airships, and balloons. These aerial network components make two platforms: high altitude platforms (HAPs) and low altitude platforms (LAPs). The aerial network complements and assists the terrestrial network for new transformative applications, such as information acquisition, content delivery, and computation offloading.

Table 1. Comparison of architecture, communication, and computing under sagin.
Table 1.- Comparison of architecture, communication, and computing under sagin.
Two main advantages in UAV-ground communications have been witnessed: the LoS-domi-nated UAV-ground channels; and the flexible and controllable mobility in a three-dimensional (3D) region. With LoS-dominated connections, UAVs can provide reliable communications for ground users and achieve a high data rate. With flexible mobility, UAVs can be timely deployed in desired hotpots or emergency regions to offload congested data traffic from the terrestrial network.

Computing
UAV could serve three different roles in aerial networks, that is, aerial user, aerial mobile relay, and flying edge server. Specifically, UAVs can request computation tasks, assist in relaying computation tasks from ground users to computing servers, or help ground users execute computation tasks and return computation results to ground users. Note that mounting an edge server on a UA V increases the corresponding UAV's load and energy consumption for computing. Although this achieves excellent computing performance resulting from the LoS-dominated UAV-ground channels and the additional computation resources, UAV's service time will decrease, which is challenging in practical networks.

HAPs can be equipped with computing servers and be deployed in the stratosphere above tumultuous air currents, propelled by solar-powered electrical engines. As such, HAPs can consistently support computation and communication over vast expanses of territory. Notably, co-channel interference management with the terrestrial network should be well designed when implementing the air-ground integrated network.

Terrestrial Network
Architecture
The terrestrial network contains heterogeneous infrastructures, for example, cellular networks, mobile ad hoc networks, and wireless local area networks. With 5G cellular networks' key technologies, such as ultra-dense heterogeneous network, massive multiple-in-put-and-multiple-output (MIMO), and millime-ter-wave communication, the terrestrial network is capable of providing a high data rate with relatively low latency. However, the terrestrial network has obvious restrictions on limited global coverage and being vulnerable to disasters.

Computing
In terrestrial networks, cloud servers have adequate computation resources. Nevertheless, the end-to-end delay in cloud computing becomes prominent for latency-sensitive computation tasks. Cloud computing is also vulnerable to a security attack since cloud servers are centralized in specific remote areas. As compensation for cloud computing, mobile edge computing (MEC) supports relatively secure computation off-loading and achieves reduced latency by placing computing servers to ground edge nodes in proximity, such as base stations (BSs). The major drawback of MEC is that the computation capacity of edge servers is usually limited, resulting in the design and optimization for both computation and communication resource allocation.

In Table 1, a comparison of architecture, computation, and communication in SAGINs is shown.

Cooperative Computing Oversagins
Based on the above, in the context of unbalanced computation and communication resources and various task requirements among different network segments, it is imperative that space, aerial, and terrestrial network segments collaborate to execute computation tasks integrally. In this section, we study the potential applications of cooperative computing over SAGINs, as well as the challenges and their corresponding possible solutions. A comparison of cooperative computing over SAGINs is given in Table 2.

Computing in Disasters
In disasters, numerous terrestrial BSs are destroyed due to damage and no longer functioning. In [10], UAV-assisted emergency networks in disasters were studied. The coverage in disaster areas can be extended with the help of multi-hop device-to-device communications and multi-hop UAV relaying. However, [10] focused on the communication aspect, lacking the analysis of the computing aspect, and the role of satellites was not considered. Search and rescue, involving sensing, data analyzing, and image processing, require reliable and flexible computing support. Since the onboard energy at mobile devices becomes scarce in disasters, users are willing to offload computation tasks, whereas the terrestrial MEC infrastructure is disabled. To support extensive computation services in disasters, we consider a satellite and LAP-assisted cooperative computing method. CubeSats assist users in offloading computation tasks by forwarding the tasks to cloud servers. In addition, airships or balloons equipped with edge servers can be deployed above the disaster area, performing as flying edge servers to promote computation offloading.

The advantages of the introduced cooperative computing method include:

Flexible and quick deployment

Augmented computation resources for cloud and edge computing

Extended coverage through satellites

Reduced energy consumption at users' devices

LoS-dominated air-ground communications links.

The potential challenges and possible solutions regarding computing in disasters are described as follows.

Dynamic Environment
Note that the UAV trajectory and computation offloading scheme can be optimized to improve the computing performance. However, in SAGINs, UAV trajectory design usually requires the knowledge of future possible channel conditions to implement the optimization. It would be challenging to obtain the exact time-varying fading channels and the mobility pattern of ground users.

Instead of the exact air-ground fading channels, one can leverage the statistical characteristics of the wireless channel to jointly optimize UAV trajectory and offloading scheduling. Furthermore, deep learning (DL) can predict the users' mobility and the upcoming channel conditions. Furthermore, UAV trajectory design is a time series-related problem that can be solved using the reinforcement learning (RL) technique. Therefore, the UAV trajectory design and computation offloading scheme can be obtained based on the statistical channel characteristics, predicted users' mobility, and RL technique.

Propagation Delay and High Algorithmic Complexity
CubeSats-assisted cloud computing incurs relatively considerable end-to-end delay, due to the signal transmissions among satellites and the internet. As such, cloud computing may not be suitable for latency-sensitive computation tasks. In addition, a large-scale optimization problem is currently difficult to be solved timely while guaranteeing users' latency. Furthermore, since satellite communication has limited backhaul capacity, it becomes essential to allocate satellite backhaul to improve network performance.

It is expected to combine traditional methods with DL to solve the large-scale optimization problem or perform in a distributed way. One potential method is to use the digital twin tools to train some variables to reduce the algorithm complexity, such as users' association, and then optimize other variables based on the training results, which is executed until it converges. Furthermore, the computation offloading policy should guarantee users' different quality-of-ser-vice (QoS) requirements and decide which tasks can be locally processed at the users' devices to improve overall network performance.

Computing for Remote Internet of Things (IoT)
Due to the limited coverage area, the 5G network may fail to cover remote areas, such as forests, vast oceans, volcanoes, and other arduous environments. IoT devices may be widely deployed to accomplish specific tasks that require computation resources, for example, the fusion of sensing data of high-definition sound and video information. However, the battery capacity of a remote IoT device is usually limited. The quick drain of the battery leads to a degradation of the lifetime of an IoT device. In addition, remote IoT devices have little computation capacity due to their restrained size, weight, and cost. Merely executing the computation tasks at IoT devices results in a significant processing delay. Therefore, efficient computation offloading with ubiquitous coverage should be tailored for remote IoT applications.

Table 2. A comparison of cooperative computing over sagins.
Table 2.- A comparison of cooperative computing over sagins.
To this end, satellites contribute to the globally scalable connectivity for remote IoT devices and offload their computation tasks to the cloud servers, as shown in Fig. 2a. Furthermore, when the computation tasks of IoT devices are not intensive, the fixed-wing or rotary-wing UAV can be temporarily assigned above the remote area to further improve network computing capability by affording flying edge servers. The challenges and possible solutions of computing for remote IoT are given as follows.

Various Battery Status of Lot Devices
Remote IoT devices have various battery status and channel conditions. Some devices that run out of their energy will disable the data exchange and impair the overall sensing performance. Therefore, it is crucial to prolong the entire lifetime of the remote IoT devices while guaranteeing each remote IoT device's performance.

To address the above issue, one can consider the battery status of remote IoT devices in the system design. The minimal lifetime of a remote IoT device can be maximized in the system. Furthermore, aerial wireless power transfer-enabled computation offloading supports “power hungry” nodes and improves the overall computing performance.

Complex and Arduous Environment
The aerial network's high mobility and the obstacles for signals due to arduous environments lead to dynamic channel conditions and communications delays due to re-transmissions. The air-ground channel in the remote area may not be the LoS-dominated channel sometimes due to shadowing and obstacles. It would be non-trivial to sketch an efficient cooperative computing policy for remote IoT while considering the complex but dynamic channel conditions and network resources.

Figure 2. - Cooperative computing over sagins: a) computing for remote lot; b) computing for iost / cubesats; c) computing for UAV swarm.
Figure 2.
Cooperative computing over sagins: a) computing for remote lot; b) computing for iost / cubesats; c) computing for UAV swarm.

Show All

Deep RL (DRL) can be used to train a computation offloading policy in a dynamic environment. In addition, a series of tricks can be utilized to accelerate the learning process. In [11], the actor-critic method was used to accelerate the learning process, and the policy gradient method was adopted to handle the large action space in a DRL-based approach.

Computing for the Iost /cubesats
As discussed earlier, satellites not only provide global connectivity for wireless communications, they also generate and execute intensive computation tasks, especially in the constellations of CubeSats. Due to the CubeSats' limited computation capacity and restricted onboard energy supply, the computation tasks generated from CubeSats are expected to be offloaded to other network segments and components for effectively utilizing the computation resources in SAGINs. A cooperative computation offloading architecture for loST /CubeSats integrating space, air, and ground, is introduced in Fig. 2b. Specifically, the computation tasks generated from CubeSats can be offloaded to GEO or MEO satellites, because GEO and MEO satellites have more considerable computation resources and solar-powered energy than LEO satellites. It is worth noting that in-space links have less signal attenuation than space-ground links, which are vulnerable to the weather environment. Thus, off-loading tasks through in-space links may achieve the desired performance. Furthermore, CubeSats' computation tasks can also be offloaded to the aerial network having edge servers or the terrestrial network having cloud servers through ground stations. Below we discuss the pitfalls in developing cooperative computing for IoST /CubeSats.

Doppler Frequency Shift
Since CubeSats operate at LEO, CubeSats' relative orbital velocity to GEO satellites is significant, resulting in the frequency offset of the local oscillators and phase noise [12]. The Doppler frequency shift destroys the orthogonality between sub-carriers, and the signal-to-noise-ratio (SNR) of an orthogonal frequency division multiplexing (OFDM) system will be decreased. Therefore, the SNR degradation due to satellites' mobility needs to be considered in cooperative computing for loST.

Deriving the relationship between frequency offset and SNR degradation encourages the analysis of outage performance. Since CubeSats in the constellations have various mobility patterns, the complex expressions hinder computation offloading optimization further. Nevertheless, CubeSats constellations' average or clustered computing performance could be optimized to reduce the algorithm complexity.

Computing for a UAV Swarm
In aerial networks, multiple UAVs form a UAV swarm to complete missions collaboratively. A UAV swarm network can be applied in civil and military applications, such as surveillance, video streaming, and battlefield monitoring. The various applications of the UAV swarm network require intensive computation services. For example, in battlefield monitoring, the intensive computation tasks of special missions need to be conducted in real-time, such as detection and localization of hostile forces and target attack. However, the limited computation capacity and the valuable on-board energy hinder UAVs from executing computation tasks locally.

Figure 3. - LEO/LAP-assisted cloud and edge computing in disasters.
Figure 3.
LEO/LAP-assisted cloud and edge computing in disasters.

Show All

A cooperative computing architecture is introduced in Fig. 2c, where the computation tasks of the UAV swarm are offloaded to edge servers through BSs and remote cloud servers through LAP or satellites. In cooperative computing over SAGINs, if the UAV swarm enters the area not covered by the BSs, the computation tasks can be offloaded by satellite, which provides ubiquitous and continuous connectivity. The challenges and possible solutions are discussed as follows.

Air-Ground Interference Management
A UAV swarm network has a highly dynamic network topology in the sky. If UAVs share the same frequency band, co-channel interference is critical to the computing performance due to the LoS-domi-nated air-air and air-ground channels. Thus, efficient interference management plays a vital role in cooperative computing for the UAV swarm network.

Reconfigurable intelligent surface (RIS) can be deployed in the terrestrial network to enhance the UAVs' signals and suppress mutual interference by tuning the amplitude and/or phase shift of each reflecting element. Furthermore, a UAV swarm can operate as a flying distributed MIMO to transmit computation tasks to other nodes in different network segments. Furthermore, the control information can be exchanged among UAVs through a random network coding-enabled routing protocol which does not require topology information.

Numerical Results
In this section, we evaluate the performance of LEO/LAP-assisted cloud and edge computing in disasters. As shown in Fig. 3, a LAP is deployed in the disaster area together with an LEO to support cloud and edge computation offloading, where the ground BS is disabled. The LAP is equipped with edge servers to provide edge computing for ground users and is able to forward the computation tasks to the LEO associated with the cloud servers. We consider two types of users, namely energy-sensitive users and latency-sensitive users. Energy-sensitive users value energy very much but can tolerate delays, and their computation tasks are offloaded to cloud servers. Latency-sensitive users have strict latency requirements, but they do not worry much about excessive energy consumption resulting from local computing. As such, latency-sensitive users can offload their partial computation tasks to the edge servers mounted on LAP and execute the rest of the tasks locally. In this case study, we aim to minimize the total energy consumption of users, which includes the energy consumption of energy-sensitive users (i.e., data transmission-related energy consumption) and the energy consumption of latency-sensitive users (i.e., local computing-related energy consumption and data transmission-related energy consumption).

We develop an iterative algorithm based on the block coordinate descent method to jointly optimize users' transmit power, data partition, edge and cloud computation resource allocation, and three-dimensional LAP position under latency constraints, computation capacity constraints, and offloading constraints. To be specific, in each iteration, we first optimize the transmit power of users. Second, based on the optimized users' transmit power, we jointly optimize the data partition and edge computation resource allocation. Third, with the optimized transmit power, we optimize the cloud computation resource allocation. Finally, based on the optimized transmit power, data partition, edge and cloud computation resource allocation, we optimize the LAP position.

The default parameters are summarized as follows. The computation capacities of edge servers, cloud servers, and each user device are 1 x 1010 CPU cycles/s. 4 × 1010 CPU cycles/s, and 1 × 109 CPU cycles/s, respectively. Users are uniformly distributed on the ground within a square region of interest formed by 1000 m × 1000 m, where there are five energy-sensitive users and five latency-sensitive users. The data size of a user's computation task is 2 × 106 bits. The latency constraints for energy-sensitive users and laten-cy-sensitive users are 3.5 s and 1 s, respectively. The channel bandwidth allocated to each user is 0.5 MHz. The noise power is -110 dBm. The allowable minimum and maximum flight heights of LAP are 10m and 400 m, respectively. The LAP channel model is based on [13]. The computing model is based on [14].

Figure 4. - Performance evaluation of leo/lap-assisted cloud and edge computation offloading: a) users' energy consumption versus the number of users; b) users' energy consumption versus computation capacity.
Figure 4.
Performance evaluation of leo/lap-assisted cloud and edge computation offloading: a) users' energy consumption versus the number of users; b) users' energy consumption versus computation capacity.

Show All

In Fig. 4a, we examine the users' energy consumption with respect to the number of users under different computing schemes, namely, LEO/LAP-assisted cloud and edge computing (i.e., proposed cooperative computing scheme); LEO-assisted cloud computing [7]; LAP-assisted aerial edge computing [14]; and local computing. In LEO-assisted cloud computing, there are no edge servers, while users offload computation tasks to cloud servers. Note that in this scheme, the computation capacity of cloud servers is large, but the data transmission-related delay in cloud computing impacts the latency-sensitive users' offloading decisions. In LAP-assisted aerial edge computing, there are no cloud servers, while users offload computation tasks to edge servers. It is observed that the LEO/LAP-assisted cloud and edge computing scheme reduces the users' energy consumption significantly as compared to other schemes, which demonstrates the advantage of cooperative computing over SAGIN. Compared to local computing, the energy saving gain of LEO/LAP-assisted cloud and edge computing diminishes as the number of users increases. This is because the portion of offloaded data decreases, resulting in more users sharing the limited computation resource of edge servers.

In Fig: 4b, we show the impacts of the users' computation capacity on their energy consumption. When the user's computation capacity increases, the execution time of computation tasks is reduced. However, computation power consumption increases more rapidly according to the average activity factor. Therefore, the energy consumption for local computing at users increases with the user's computation capacity. Users can also save more energy when the communication bandwidth increases since a more extensive bandwidth results in more transmitted data while guaranteeing latency requirements. Furthermore, reducing the edge servers' computation capacity increases the users' energy consumption since more data needs to be processed locally.

Future Research Opportunities
In this section, we provide promising future research directions in designing and optimizing computing systems in SAGINs.

Satellite/aerial-Assisted Vehicular Computing
Autonomous driving requires the processing of an enormous amount of data in a timely fashion for safe traffic transmission, sensing, decision making, high-definition map generation, and so on. Due to vehicle and in-vehicle users' strict energy consumption and latency restrictions, implementing computation offloading in vehicular networks is of practical significance and engineering relevance. However, the terrestrial infrastructure could not provide seamless connectivity for vehicles to offload computation tasks, especially in remote areas. With the help of space and aerial networks, vehicles can achieve ubiquitous computation off-loading in both urban and suburban areas. Since vehicles are moving relatively fast, the small-scale fading varies rapidly, resulting in the difficulty of obtaining the instantaneous small-scale channel knowledge. However, the statistical channel knowledge can be obtained. Therefore, it is possible to develop satellite/aerial-assisted vehicular computing using statistical channel knowledge.

Distributed Computing Over Sagins
Federated learning aims to train an algorithm across multiple distributed edge devices based on their local data samples. The distributed edge devices compute data locally and exchange the training parameters, such as the weights of the underlying neural networks, to achieve data privacy and improve learning accuracy. For distributed computing, a satellite or UAV can be used as a model aggregator in the region where a ground model aggregator is challenging to be deployed. In particular, due to the limited battery capacity of a UAV, the trade-off between UAV energy consumption and the devices' learning accuracy needs to be considered in the system design. Meanwhile, UAV trajectory and model aggregation frequency can be optimized to reduce UAV energy consumption. On the other hand, UAVs could be edge devices, performing distributed computing and requiring the exchange of training parameters. In this case, satellite and terrestrial networks assist UAVs in model aggregation. The convergence analysis of federated learning and the scheduling of UAVs in SAGINs are also worthwhile to be investigated.

Blockchain-Enabled Computing Insagins
Privacy and security issues are becoming vital amid computing in various network segments due to their frequent interactions and service migrations. The offloaded computing data may be abused by malicious nodes resulting in the leakage of data privacy. Blockchain can be integrated into a computing system to employ community verification to synchronize the decentralized ledgers across multiple nodes with sufficient computing and storage resources [15]. In SAGINs, the computation off-loading records can be uploaded in the blockchain system with the help of space and aerial networks. Considering the limited computing and communication resources in space and aerial nodes, we need to design computation task scheduling, block producers scheduling, and resource allocation for both the computing and blockchain systems to improve network performance. Furthermore, the requirement of delay to finality for collecting and recording transactions in the blockchain system should be guaranteed in SAGINs.

RIS-Aided Computing Oversagins
RIS is a planar surface with numerous passive reflecting elements, where each element can induce a controllable amplitude and/or phase shift to the incident active signal independently. Due to low cost, full-duplex mode, lightweight, and flexibility, RIS can be mounted on UAVs to establish strong LoS intelligent reflections and expand the terrestrial coverage area. Integrating RIS into SAGIN further enhances the computing performance. Specifically, RIS passive beamforming improves wireless link capacity by strengthening signal and/or canceling interference. As such, computation offloading capability is improved. However, there are some difficulties to implementing RIS-aided computing over SAGINs, including: a) interference management to and from other users; b) the modeling of such aerial cascaded channel; c) low complexity channel estimation; d) robust beamforming algorithms under bad weather condition. In addition, it is necessary to jointly design the UAVs placements/trajectories, RIS passive beamforming, computing policies, and communication strategies in SAGINs.

Conclusions
This article introduces the fundamentals, challenges, and opportunities of computing over SAGINs. First, we illustrate the motivation and computing architecture of SAGINs. Second, we discuss computing capability and computing applications of each network segment. Third, we envision cooperative computing over SAGINs, presenting the key challenges that serve as hurdles to practical realization, and motivating possible solutions that are expected to guide research in this domain. Next, we provide preliminary results to show the potential advantages of cooperative computing over SAGINs. Finally, several open research opportunities are given.