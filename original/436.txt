Public Key Infrastructure (PKI) has been considered to be an enabler of secure communication, while, due to its complex and centralized design, there have been instances in the past for Certification Authority's (CA) misbehaving and publishing rogue certificates for targeted attacks. This research aims to present a blockchain-based mechanism that lays down a concrete foundation for creating a transparent and secure block-chain-based mechanism for the issuance and management of digital certificates that enables prevention against CA misbehaving. A prototype is deployed and tested on the Ethereum test network, and the results are made publicly available for verification and validation. As a result, the proposed Ethereum blockchain-based PKI mechanism enables secure, transparent, and auditable issuance and management of digital certificates together with the solution of Sybil, Spoofing, and Man-in-the-Middle (MITM) attacks.
Introduction
Designing and developing a transparent PKI mechanism for digital certificate issuance and management is challenging as it is prone to operational errors and attacks due to its non-transpar-ent and centralized design. These attacks have happened worldwide, including in China, the U.S., Turkey, Netherlands, and France. [1]. A series of attack and threat events have been reported throughout history. Some of these misbehaves have steered to MITM attacks, permitting the interception with sites such as Yahoo, Microsoft, Skype, and Google [1], [2].

The secure TLS/SSL operation relies on CAs, often trusted for public-key authentication [3]. CAs are bundled into web browsers and operating systems; consequently, the PKI is centralized as only CAs chosen by web browser vendors and operating systems may issue valid certificates. This system is exclusive, time-consuming, and expensive.

Due to limited transparency and centralization in the established mechanism [2], conventional schemes are inefficient. Therefore, an efficient scheme is required that prevents the CA from misbehaving. Current state-of-the-art authentication schemes proposed for PKI are centralized. In centralized [3] and log-based schemes [4], CA or a Trusted Third Party (TTP) authenticates entities.

Due to centralization, such schemes are prone to a single point of failure, security threats, privacy, and CA misbehaving concerns.

The new emerging blockchain technology [5] can be a suitable solution for PKI, mainly due to its decentralized nature and cryptographic properties. To overcome the issues of centralized and log-based schemes, decentralized blockchain-en-abled PKI schemes are presented by many researchers [6]–[7][8][9][10][11][12][13]. Our primary focus has been on CA misbehaving prevention. We only found IKP [13] that deals with CA misbehaving; however, it works on detecting misbehaving CAs; prevention is not ensured in this scheme.

In a nutshell, this research aims to provide a blockchain-based PKI for secure and transparent digital certificate mechanism with the following goals: G1-easy administration, strong security; G2-transparent issuance and management of digital certificates to prevent CA misbehaving; G3-time synchronization for all storage points to prevent misuse of revoked certificates; G4-proof of certificate ownership and its validity is without the intervention of certificate issuers; G5-prevention against MITM, Spoofing, and Sybil attack.

Blockchain-based PKI's prototype is implemented in Ethereum blockchain [5] that provides important properties for achieving secure and transparent issuance and management of digital certificates. The smart contract environment with its public and programmable behavior plays an important role in achieving declared goals.

This article is divided into six sections. Some PKI-based schemes are reviewed in the following section, together with a brief overview of PKI and its components. Following that, the architecture of blockchain-based PKI is put forward. We then present the implementation and empirical study for the proposed design. Following that, an analysis and discussion of blockchain-based PKI for secure and transparent issuance and management of digital certificates are presented before concluding the article.

Background and Related Work
This section first discusses the main logical components of PKI's architecture, and then it presents the review of existing PKI systems. These systems are studied and critically analyzed to identify best practices and to present a novel solution to prevent CA misbehaving in PKI. A PKI [3] is more than just technology and is comprised of the following logical components.

Certification Authority (CA)
CA is responsible for verifying binding between an identity and public key, creation, revocation, update, renewal, storage, and distribution related tasks regarding keys and certificates.

PKI Enabled Entities (PKI_EE)
PKI technology users are referred to as PKI-enabled entities. These include an entity, computers, organization, network devices, and software agents. To create a relationship of trust, the certification authority has to distribute the digital certificate to all PKI-enabled entities.

Certificate Repository
It is a secure database that stores issued, pending, and rejected certificates and certificate requests.

Certificate Policies
A certificate policy (CP) states the actors, their roles, and authorities in the execution workflow of a PKI.

Certificate Revocation Lists (CRL)
The CA publishes a CRL at regularly scheduled intervals. The CRL contains a list of serial numbers certificates revoked and the reason codes for each revocation.

Online Certificate Status Protocol (OCSP)
It provides the revocation status of a digital certificate and returns a response about a single certificate.

Centralized PKI
In centralized PKI [3], as depicted in Fig. 1a, the CA is responsible for digital certificate distribution and management. CA is also responsible for managing CRL, which contains certificates no longer to be trusted, and OCSP. Due to CA's self-signing, non-trans-parent design, and centralization in the design mechanism of centralized PKI, a series of attack and threat events have been reported throughout the history. Some of the cases of the most alarming CA's misbehavior acts from history are tabulated in Table 1, and we refer to [1], [2] for details.

Figure 1. - The architectures of public key infrastructure (solid lines indicate information sent during the certificate issuance and validation process, and dotted red lines indicate the possible ways in which certificates are registered and how proofs for a certificate can be obtained: a) Architecture of centralized PKI; b) Architecture of the log-bases PKI; c) Architecture of decentralized PKI (pretty good privacy).
Figure 1.
The architectures of public key infrastructure (solid lines indicate information sent during the certificate issuance and validation process, and dotted red lines indicate the possible ways in which certificates are registered and how proofs for a certificate can be obtained: a) Architecture of centralized PKI; b) Architecture of the log-bases PKI; c) Architecture of decentralized PKI (pretty good privacy).

Show All

Log-Based PKI
To solve the problem of CA's misbehaving, log-based PKI [4] has been proposed (Fig. 1b). It uses highly available public log servers that monitor and publish the certificates. The certificates are not regarded genuine until they have been documented in this manner, revealing and discouraging the issuing of illegal certifications immediately. The most frequently used log-based PKI is Google's Certificate Transparency (CT) [4], which is presently accessible in Chrome and Firefox. Unfortunately, despite these advantages, log-based PKIs have several flaws:

To function securely, log-based PKIs require a centralized, consistent source of information.

Second, responding to CA's misconduct is time-consuming and not an automated process.

Third, the log-based approach does not adequately incentivize CA behavior recording or monitoring.

Table 1. CA's notorious misbehavior cases.
Table 1.- CA's notorious misbehavior cases.
Thepretty Good Privacy (PGP)
PGP [14] is an entirely decentralized PKI architecture, as depicted in Fig. 1c. Users can designate others as trustworthy by signing their public-key certificates.

A user obtains a certificate containing their public key and digital signatures from entities that have regarded the person as trustworthy. If a third party can verify that the certificate has the signature of someone they trust, the certificate is trusted. The distributed nature of this system helps it since it eliminates any single point of failure; nevertheless, it comes with the following drawbacks:

It makes it much harder for new or remote users to join the network since some existing members must meet with the new user in person for the first time to verify their identity and sign the public key.

It has no way to deal with the key revocation.

Blockchain-Enabled PKI
In the literature, many researchers [6]–[7][8][9][10][11][12][13], [15] have adopted Blockchain for PKI. These approaches show promising results for different security scenarios. However, these schemes do not deal with CA misbehaving prevention, privacy of PKI_EEs, attack protection, synchronized updates, and certificate ownership concerns. We only found IKP [15] that deals with CA misbehaving. IKP is a blockchain-based PKI that automatically responds to CA misbehavior and incentives for those who help detect misbehavior. Our approach differs in that we propose a blockchain-based scheme that prevents the CA from misbehaving, maintains PKI_EE's privacy, solves the problem of synchronized updates of PKI's operations, and provides protection against Sybil spoofing and man-in-the-middle attacks.

Proposed PKI Architecture
The programmed contract is used to create the blockchain-based PKI, which is then published on the Blockchain, as illustrated in Fig. 2. The contract's functions provide the transparent and secure issuance and management of digital certificates. The programmed contract allows PKI's CA to create a contract (C), a decentralized database and synchronization system, and activate the certificate managers to issue, revoke, update, modify, re-issue, and store certificates at the Blockchain. All the contract functions are considered transactions and must be validated by Blockchain to be considered a valid operation.

Figure 2. - The architecture of proposed blockchain-based public key infrastructure (solid lines indicate information sent during the certificate issuance and the validation process, dotted red lines indicate the possible ways in which certificates are registered at the blockchain, and how log proofs for a certificate can be obtained, and the dotted blue lines indicate the optional part of the architecture.)
Figure 2.
The architecture of proposed blockchain-based public key infrastructure (solid lines indicate information sent during the certificate issuance and the validation process, dotted red lines indicate the possible ways in which certificates are registered at the blockchain, and how log proofs for a certificate can be obtained, and the dotted blue lines indicate the optional part of the architecture.)

Show All

Blockchain-Based PKL's Configuration
In the proposed management and issuance mechanism, each interacting entity must have a unique, unclonable identity in the system that maintains the entity and their credential's privacy and pseu-do-anonymity. For the entity's identity, we use the externally owned account (EOA)'s addresses of Ethereum, which contains ether balance in it. The proposed approach is a programmed contract; nonetheless, it needs an initialization phase. To initialize the blockchain-based PKI, the CA must create their identity, an externally owned account's address by Ethereum wallets or online/offline Ethereum's address generator. (CA_EOA) and (CA_SAK) notations are used for the CA's externally owned account's address and corresponding secret authorization key.

The Certification Authority uses their EOA's address to create, execute, and deploy the functions of the contract on the blockchain network. Successful deployment of a contract on the Ethe-reum blockchain creates a contract (C) on the Blockchain, as depicted in Fig. 2.

Architecture's Interacting Entities
Other than the CA, the proposed block-chain-based PKI mechanism can be interacted by the PKI-enabled entities (e_EOA, e_SAK) and relaying organizations (ro_EOA, ro_SAK). Interacting entities have given the following authorities.

Certification Authority
CA can create, deploy, and execute contract functions, activate their status, issue and revoke the certificate to PKI-enabled entities and deactivate their status. CA is also responsible for publishing the detail of PKI's C on a public medium together with the contract's interface. This will serve as proof that CA owns and manages the C.

PKI Enabled Entity
The PKI-enabled entities can interact with the contract to apply for a certificate.

Relying Organizations
Relying organizations cannot transact with the contract. Instead, they keep an extracted local copy of the contract's state from the Blockchain and execute the con-tract's view functions on that copy to read the contract's state.

Contract's Operations
Two types of functions are defined for the design of the programmed contract: views (View) and transactions (Trnx). Trnx is a call to functions that alter the state of the contract, and this change must be stored on the Blockchain. To do so, Trnx must be submitted to the miners. For example, our designed contract includes the following Trnxs (with the parameters: CA_Name: Name of CA, CA_EOA: Identity of CA, e_EOA: Identity of PKI Enabled Entity, Valid_Not_before: Certificate validation start time (UNIX timestamp), Valid_Not_after: Certificate validation end time (UNIX timestamp), r_Code: reason code for revoking a certificate).

Trnx-1
PKI Activation (CA Name, CA EOA) activates the CA in the deployed contract for issuance, revoke, update, storage of certificates. Only the CA is allowed to execute this Trnx. This restriction is ensured at the blockchain level by the programmed contract.

Trnx-2
PKI Enable Entity (CA EOA, e_EOA) PKI enables the entity to use this Trnx to apply for identity binding. The only e is allowed to execute this Trnx. This restriction is ensured at the blockchain level by the programmed contract. The Blockchain will reject this Trnx to ensure the uniqueness and unclonable identity restriction for the PKI entities if the entity is already assigned a certificate.

Trnx-3
Issue_Certificate (CA_EOA, e_EOA, CA_Name, Valid_Not_before, Valid_Not_after) This Trnx issues a digital certificate to a unique PKI enabled entity. Only the CA is allowed to execute this Trnx. Successful execution of this Trnx stores the certificate and updates the C at the blockchain level.

Trnx-4
Revoke_Certificate_bv_CA (e_EOA, r_Code): CA uses this Trnx to revoke the issued certificate. Successful execution of this Trnx revokes the stored certificate and updates the C at the blockchain level.

Views are similar to the Trnx, with the difference being that they do not change the state of the contract at the blockchain level and thus do not need to store the interaction on the Block-chain. Any node that has a copy of the Block-chain can execute views locally. As views are not submitted to miners, this makes their use fast and free of cost. Our implemented contract includes the following Views:

View-1: Certification Authority (it returns PKI's CA).

View-2: Owner (it returns the PKI's CA identity).

View-3: Status (it returns the status of CA at the deployed PKI on the Blockchain).

View-4: PKI_AE-id (it returns active authenticated entity's reference id, stored in the contract (only in full version)).

View-5: Issued_PKI_Certificate (it returns issued active digital certificates).

View-6: Revoked_PKI_Certificate (it returns revoked digital certificates).

Prototype Implementation and Empirical Study
A blockchain-based mechanism for PKI is implemented using a contract running on the Ethereum platform. The contract is used to update a distributed data store and promote trust in the system as the code is immutable after its deployment. All contract interactions described earlier are tested in two versions: first, a full version where other contracts can access its information, and second, a lighter version that only emits events on Block-chain. The trade-off in the light form of the contract is that it only emits events on Blockchain for dependent organizations to observe, due to the high gas costs involved with Ethereum storage. In a lighter version, however, contact with other contracts is not feasible.

Deployment of a contract on the Ethereum test network creates the following contract (C) for the full version:

C: 0xA521e5653F35D670EC8FE6f04078f4E252A7E3c3

The following EOA accounts have been used for deployment of the full version of the contract to Ethereum Blockchain:

CA:0x7d320bF1e810ac9a8a1773bge6392Ec543315F2c PKI_EE:0x7Cb986a5b4344d1667E60c58b50CA4058ebf7632

For the light version, the Ethereum testnet network create the following contract (C):

C: Ox0183f9D75d47bb7333d3fa15335cdA7BBab86623

The following EOA accounts have been used for deployment of the light version of the contract to Ethereum Blockchain:

CA: 0xc022A9743EA044F2fde44b0A9fDf3B515128ea52 PKI_EE:0x7cb986a5b4344d1667e60c58b50ca4058ebf7632

Detail of all execution is publically available on the test network of Ethereum on the addresses mentioned above for verification and validation by anyone. To measure the approximate costs of running various blockchain-based PKI operations, all functions are executed in the test network of the Ethereum blockchain. We tested the interaction with transactions on 20 Jan, 6:49 pm UTC, when 1 Ether equals 166.21 U.S. dollars. The graphs in Figs. 3 through 5 show the costs of various operations in gas, Ether, and USD for the light and full version of the contract (only transactions, as view's execution, have no cost). We conclude that barring fluctuations in the gas limit, gas price, or price of Ether, it is both financially and technically feasible to deploy PKI in the Ethereum blockchain.

Figure 3. - Estimated gas unit consumption.
Figure 3.
Estimated gas unit consumption.

Show All

Figure 4. - Estimated transaction fee, in ether.
Figure 4.
Estimated transaction fee, in ether.

Show All


Figure 5.
Estimated transaction fee, in USD.

Show All

Analysis and Discussion
This section explains and discusses the properties achieved by the proposed blockchain-based PKI mechanism.

Ease of Administration
Blockchain-based PKI achieved the easy administration feature because of the ease of managing certificate issuance, revocation, re-issuance, update, and storage. Certificates issuance and revocations are the formal flow of block-chain-based PKI. Re-issuance is required if someone loses control over their Externally Owned Account's address. This will happen if the SAK of the corresponding EOA's address is lost or forgotten, and in such a case, verification of binding of the entity with the EOA's address is not possible, and ultimately the entity will no longer remain the owner of the issued digital certificate. To mitigate the loss of control over an EOA's address and corresponding certificate, PKI's CA re-issues the new certificate to the correspondent entity/against their new EOA's address and revokes the old one. Immutable storage synchronization points for all the updates due to the transaction's broadcasting nature of Blockchain and events logged for all transactions further help in administrative tasks such as auditability.

Strong Security
Security properties that blockchain-based PKI mechanism ensured are:

CA is forced to behave honestly and prevent misbehaving.

Prevent the system from malicious insider threats and data breaches.

Privacy and pseudo-anonymity of the entities are ensured.

Entities are the owner of their credentials.

Proof of certificate ownership is without the intervention of a certificate issuance authority.

Prevention of Sybil, spoofing, and Man-in-the-Middle (MITM) attacks are ensured.

The programmed contract and Blockchain provide these security properties. 1st property is enabled by using Blockchain as a certificate repository and verification authority for all CA operations. Blockchain verifies the signature of CA on the certificate in a decentralized manner. Thus, only the valid certificate will be verified and stored on the C in the Blockchain, and any misbehaving from CA will be rejected by the Blockchain, thus preventing the CA from misbehaving. 2nd security property is enabled by storing all operations and records of contracts on Block-chain in an immutable and publically verifiable way. 3rd property is enabled by using unique and unclonable encrypted Ethereum's address as the identity of the entities. The proposed system did not employ the knowledge-based system or realworld identity for the entity authentication while identity binding to maintain the privacy and pseu-do-anonymity of the entities. Blockchain-based PKI achieves 4th and 5th properties as entities do not need to rely on certificate issuers for their certificate and credential storage. Last but not least, all the entities are ensured to have an identity binding in the system to prevent Sybil and spoofing attacks. Only the one who creates the EOA knows the corresponding SAK stored on their device, thus preventing the MITM attack.

Centralized and log-based PKI are complex and central authority dependent and thus have some security issues and cost-related concerns. For the centralized PKI-based systems, the initial deployment cost is 10,000 USD, and the annual cost for the PKI system with 5000 users is approximately 200,000 USD [3]. This cost increases as the number of users increases. IKP [15] is the only blockchain-based solution that worked on CA misbehaving detection. The proposed approach differs because it is decentralized, transparent, immutable, simple, and enables prevention against CA misbehaving. Its initial deployment cost is 0.21 USD and 0.39 USD in the light and full versions, respectively, on 20 Jan., 6:49 pm UTC, when 1 Ether equals 166.21 USD, which can be lowered further by the code optimization and input size.

Conclusion and Future Work
Public Key Infrastructure (PKI) plays an important strategic role, but organizations are leaving themselves unprepared and vulnerable. This article proposed blockchain-based PKI, a platform for transparent and secure issuance of digital certificates and full process from authorizing a certificate manager to a digital certificate's issuance. The developed and deployed working prototype on the test network of Ethereum helped us analyze the behavior of blockchain-based PKI. “Easy administration strong security” is the beauty of the proposed approach that makes it an ideal solution.

Despite all the security features and benefits of the proposed mechanism, it has some limitations, that is, the proposed system is limited to the standalone PKI model. In the future, we will consider the design and test a framework and prototype for the hierarchical, mesh, and hybrid PKI models.

Furthermore, the proposed blockchain-based PKI mechanism is for identity certificates. The future contribution will test it for data stored on-chain or off-chain and authorization-based digital certificates. Last but not least, code optimization by defining the boolean functions for the contract transactions for increased efficiency and cost minimization will also be an essential part of future consideration.