With massive sorts of terminals, devices, and machines connecting to 5G, a tremendous surge of data makes cyber-security a pressing issue, and conventional countermeasures are facing unprecedented challenges. Recently, with the rise of ML (Machine Learning) and SDN/NFV-based (Software-Defined Networks/Network Functions Virtualization) SFC (Service Function Chaining) techniques, how to leverage them for security enhancement in MEC (Multi-access/Mobile Edge Computing) has received much attention. Hence, in this article, we first propose an elastic framework to integrate ML with virtualized SFC, aiming at smart and efficient provision of different services at MEC. Then, we propose an ML-based anomaly detection algorithm used as a kind of service policy for SFC classifiers, which guides the latter for quick traffic classification and subsequent redirections of attack flows. Finally, we build a corresponding prototype system and evaluate the performance of the proposed algorithm through extensive experiments. Related results have confirmed the feasibility and advantages of the proposed framework and algorithm.
Introduction
MEC (Multi-access/Mobile Edge Computing) is currently recognized as a key enabler for 5G networks, which offers cloud computing capabilities to provide various value-added services at the edges of mobile communication systems [1]. The primary motivation is to cope with the increasingly diverse requirements in data distribution and performance enhancement, with the traffic and associated computation tasks first offloaded to the infrastructures nearby customers for local satisfaction, rather than directly delivered to the remote servers [2]. In this way, the user experience can be greatly improved in terms of numerous aspects such as latency, bandwidth, security, and reliability.

However, MEC requires great flexibility in flow control and middle-box deployment, where the current IP network paradigm cannot give adequate support [3]. Thanks to the emerging SDN/NFV-based (Software-Defined Networks/Network Functions Virtualization) SFC (Service Function Chaining) technique, different types of virtual network functions can be chained in order with arriving traffic steered on demand, significantly improving both service diversity and resource efficiency [4], [5]. As a result, the introduction of virtualized SFC to MEC will bring many advantages in the agile adaptation of value-added services for a wide variety of consumers, in addition to the remarkable reduction of capital expenditures and operating expenses of network operators [6].

On the other hand, with massive sorts of mobile terminals, Internet-of-Things devices, and smart machines connecting to 5G, a tremendous surge of data volume makes cyber-security a pressing issue [7], [8]. Nevertheless, due to the huge changes of application scenarios and needs, conventional countermeasures are facing unprecedent challenges and suffer from many serious drawbacks [9]. Hence, to construct a robust security system at a cloud-based MEC, there are two fundamental issues to be tackled, which relate to (i) an evolvable framework able to deploy and upgrade corresponding facilities according to the changing demands and contexts; (ii) and an efficient protection mechanism capable of detection and prevention of malicious activities in a rapid and timely manner.

Although SDN/NFV-based SFC is a promising framework for the security system, it only focuses on SF concatenation and flow redirections via CFs (ClassiFiers) and SFFs (Service Function Forwarders), without taking QoS (Quality of Service) guarantees into full account [10]. Consequently, SFC components are often working on their own and unable to collaborate effectively based on the global view of traffic and network status, which inevitably causes performance degradation and even negative impacts due to the conflicting strategies made by different participants. Thus, it is necessary to fill the gap in management of service policies performed by SFC components, laying the foundation for operators to optimize actions of the latter in a simple and uniform manner.

Moreover, the security system heavily depends on the performance of its intrusion detection algorithm, which tries to find unusual communication behaviors in time and then respond rapidly. To deal with the challenge, there is a growing trend to treat the issue as a traffic classification problem, so that ML (Machine Learning), which has been considered as a powerful method for complex problems, can be leveraged as an alternative solution with new opportunities [11]. Through learning principal features of input flows and interacting with underlying environments, ML-based algorithms can perform anomaly analysis with better generalization capability for unknown threats and attacks.

Furthermore, when integrated with SDN/NFV-based SFC, ML-based algorithms can act as service policies of SFC components and guide them to cope with receiving packets intelligently. Figure 1 illustrates such a use case where a CF enabled with an ML module is served as a lightweight NIDS (Network Intrusion Detection System) for access control. Hence, once abnormal flows are discovered at the ML-CF, they will be delivered to a security-based SFC instance for data cleaning, rather than immediately sent to a QoS-based one [12]. Following these principles, operators are in fact able to realize a flexible and scalable security system at MEC, where both involved components and their service policies can be dynamically updated based on practical requirements.


Figure 1.
An example of SFC-enabled mobile/multi-access edge computing.

Show All

Therefore, in the article, we first propose ML-SFC, an elastic framework to integrate ML with SDN/NFV-based SFC, which defines necessary interactions among ML agents, SFC components, and supplemented entities, aiming to provide smart and efficient provision of security and QoS-based services at MEC. In particular, ML-SFC is characterized by decoupling high-level learning and decision making from low-level action taking, with the purpose of removing complicated and time-consuming tasks from SFC components at the data plane. As a result, they only need to cope with traversing traffic by loading trained models and associated rules from ML agents as service policies, sharply decreasing the complexity of their local data processing. At the same time, model parameters can be trained asynchronously and independently at ML agents without impacting any other SFC entities. In addition, SFC components are able to continually increase their performance if better models derived from the ML agents are loaded as more network knowledge is acquired over time.

Second we focus on how ML agents guide CFs for traffic anomaly detection, and propose a corresponding CNN-based (Convolutional Neural Networks) algorithm. Then, we complete an ML-enabled CF implementation following the defined requirements of the proposed framework, which only performs online feature extraction from its receiving packets, loading trained models of the proposed algorithm for classification, and generating forwarding rules to redirect different types of traffic to suitable subsequent SFC components. Hence, it can simply act like a dumb NIDS that executes any operations according to the assigned service policies.

Finally, we implement a preliminary prototype of the proposed ML-SFC framework through the integration of several open-source projects and software such as OpenStack, Tacker, Networking-SFC, and TensorFlow. Then, we validate the functionalities of ML-enabled CF implementation via a deployed virtualized SFC instance, and evaluate its performance with Snort, a lightweight open-source intrusion prevention system as a benchmark. In addition, we evaluate the performance of the proposed CNN-based traffic anomaly detection algorithm based on the replayed DARPA'98 training dataset [13], with other ML-based algorithms including SVM (Support Vector Machine), DT (Decision Trees), GNB (Gaussian Naive Bayes), ANN (Artificial Neural Networks) and DNN (Deep Neural Networks) as comparisons. Extensive experiments have been conducted and related results have proved the feasibility and advantages of the proposed framework and algorithm.

The remainder of this article is organized as follows. The proposed ML-SFC framework is presented in the next section, followed by descriptions of the traffic anomaly detection algorithm. Then, we display the implemented prototype with experimental results, and give the conclusions in the last section.

The Framework of Service Function Chaining Enabled with Machine Learning
In this section, we illustrate the proposed ML-SFC framework, which defines necessary entities and their interactions.

As shown in Fig. 2, the proposed framework is divided into three planes based on the roles that should be decoupled for smart service provision, namely the Data, Scheduling and Learning Planes. In particular, ML-enabled SFC components at the data plane are only involved in taking functional actions for incoming packets, such as flow classification, content caching, and data forwarding, according to their loading service policies distributed by entities from the upper planes. As a result, they are decoupled from high-complexity and time-consuming computation tasks such as learning and decision making, able to rapidly respond to arriving traffic with appropriate operations locally. They are able to update the loaded service policies for evolutional performance promotion.

Figure 2. - The proposed ML-SFC framework.
Figure 2.
The proposed ML-SFC framework.

Show All

Specifically, there are three kinds of data-plane components in the proposed framework, namely ML-CFs, ML-SFs, and SFFs, which are required to perform functionalities specified in the SFC architecture [14] at first. Then, to enable ML with SFC components, ML-CFs and ML-SFs are equipped with two new modules, namely FEM (Feature Extractor Module) and LPM (Local Policy Module). The FEM is used to extract packet features such as 5-tuples and other high-level statistical information, and then buffer them into a uniform format used as input for its associated LPM. These formatted feature data are needed to upload to the TKD (Traffic Knowledge Database) at the learning plane for deep analysis. By contrast, the LPM is leveraged to load parameters of trained models of ML-based algorithms and corresponding rules from the DM (Decision Makers) at the scheduling plane, guiding how network functions deal with arriving flows. For example, an ML-CF will drop anomaly traffic or redirect it to securi-ty-based ML-SFs for data cleaning according to detection results from its LPM.

With respect to the scheduling plane, there are two entities, namely DM and ML-SFCM (SFC Managers). The DM is used to maintain trained models and related rules derived from its LA (Learning Agents), and interact with ML-enabled SFC components for updates of service policies. The ML-SFCM is mainly in charge of SFC orchestration and management. It also collects running states of SFC instances and stores the gathered data to the SFCKD (Service Function Chaining Knowledge Database). Moreover, at the learning plane, the TKD and SFCKD are required to track network knowledge about traffic and system status, while the LA is responsible for model training of ML-based algorithms based on high-er-level characteristics extracted by the TKD and SFCKD.

The Proposed Machine-Learning-Based Traffic Anomaly Detection Algorithm
In this section, we present the proposed ML-based traffic anomaly detection algorithm in detail.

In particular, the proposed algorithm leverages a customized CNN to explore hidden relationships among the same type of flows, and it is trained based on the KDD'99 training dataset, the most widely used dataset in intrusion detection [15]. Note that feature selections and necessary data pre-processing are required before model training of the proposed algorithm. First, we select 28 out of 41 features of each record for traffic anomaly analysis, including the nine basic proprieties of connections, nine traffic-based and 10 host-based statistical characteristics over a time window. The 13 content attributes within a connection are not considered as they are usually extracted by DPI somehow rather than multi-layer switches. Second, we perform one-hot encoding for the five types of labels in the dataset and convert other symbolic features into the numerical ones. Moreover, to reduce the large differences among values of numerical features, data standardization is conducted to make their mean and variance at 0 and 1 separately.

The customized CNN leveraged by the proposed algorithm consists of an input layer, a convolution layer, a pooling layer, a dense layer, a dropout layer, and an output layer. The input layer has 28 neurons as we only consider the features at the L3 (network) and L4 (transport) layer. The output from the previous layer is then delivered to a 1D convolution layer after padding for a series of feature maps, where there are 32 kernels and ReLu (Rectified Linear Unit) is used as the activation function. The extracted features later are sent to the 1D pooling layer for dimension reductions through max-pooling. The corresponding output afterwards is flattened before reaching the following fully connected layers that contain a dense, dropout and output layer.

Specifically, the dense layer has 64 neurons with ReLu as its activation function, followed by a dropout layer that randomly disables weights on its 64 neurons with probability of 25 percent, alleviating the over-fitting problem. The output layer contains five neurons with Softmax as the activation function, indicating a category of the current flow that it belongs to. Note that during the model training phase, cross entropy is used as the loss function, and parameters are further tuned based on the Adam optimizer.

Performance Evaluation
In this section, we validate the feasibility of the proposed framework through the ML-enabled CF implementation, and evaluate the performance of the proposed traffic anomaly detection algorithm based on the replayed DARPA'98 training dataset.

In particular, we first implement a preliminary prototype with integration of several open-source projects and software such as OpenStack, Tacker, Networking-SFC, and TensorFlow, in order to support the deployment of virtual SFC instances and the introduction of network intelligence at a cloud-based MEC. As shown in Fig. 3, the prototype has two rack servers as a control (ML-SFCM) and storage (TKD+SFCKD) node in charge of SFC orchestration and network knowledge maintenance, respectively. Further, a GPU-enabled rack server (NVIDIA GeForce GTX 1060 6GB) is used as a smart node (LA+DM) capable of model training based on ML algorithms and interactions with ML-enabled SFC components for model updates. Additionally, 12 blade servers are leveraged as compute nodes providing virtual machines for ML-enabled SFC components and associated OpenvSwitch-based CFs/SFFs, and 3 gigabit switches are utilized for their interconnections.


Figure 3.
The physical topology and the implemented prototype system.

Show All

Second, we realize an ML-enabled CF implementation based on an open-source traffic feature extractor (kdd99_feature_extractor, https://github.com/AI-IDS/kdd99_feature_extractor/) as the FEM, and TensorFlow-Serving (https://github.com/tensorflow/serving) together with a complementary rule-generation proxy as the LPM. Briefly, the traffic feature extractor is used to obtain key characteristics of a flow, while Ten-sorFlow-Serving is leveraged to load and update trained models of the proposed traffic anomaly detection algorithm. The rule-generation proxy is designed to generate corresponding forwarding rules for OpenvSwitch according to the classification results of TensorFlow-Serving, with attack traffic redirected to their assigned SFC components. By this means, the ML-enabled CF implementation can work as an application in a virtual machine over the original OpenvSwitch-based CF, and guide actions of the latter through the way defined by the proposed ML-SFC framework. This also demonstrates a good example of how an ML-enabled SFC component works. Furthermore, to prove its advantages over the traditional solutions, we utilize Snort, an open-source intrusion prevention system with about 32,400 rules loaded as a benchmark, which runs over a virtual machine with the same configurations as the ML-enabled implementation CF does, and the processing time is tested based on the replayed DARPA'98 training dataset.

Third, we train the proposed traffic anomaly detection algorithm offline through TensorFlow based on the KDD'99 training dataset, with 10 percent of the whole dataset at the smart node. Note that the KDD'99 dataset is derived from the DARPA'98 dataset after mining and preprocessing of a 4 GB compressed binary TCP dump data from seven weeks of network traffic [11]. As a result, to assess the performance of the proposed algorithm, we directly deploy its trained model at the ML-enabled CF implementation, and replay seven-week traffic of the DARPA'98 training dataset there as the test data, with key indicators including Precision, Recall, and FScore estimated.

Note that Precision refers to the number ratio of correctly predicted Attack flows to the total predicted Attack ones; Recall is the number ratio of correctly predicted Attack flows to the total correctly predicted ones; and FScore denotes the weighted harmonic mean of Precision and Recall. Additionally, we compare the proposed algorithm with other ML algorithms including SVM, DT, and GNB via Scikit-Learn, as well as ANN and DNN through TensorFlow under the same condition, where traffic of the DARPA'98 training dataset is pre-processed by the LPM of the ML-enabled CF implementation at first before performing related classification.

To emulate the typical use case shown in Fig. 1, a virtual SFC instance is deployed at a cloud-based MEC with two kinds of SFC components for QoS and security guarantee, respectively, and the ML-CF has to distinguish normal and attack flows and redirect them to the appropriate subsequent SFC components. To this end, we deploy such SFC instances at our prototype, where ML-enabled CF implementation runs over a virtual machine with 2 vCPU and 2 GB RAM and loads the trained model of the proposed algorithm. Then, we replay the data of the DARPA'98 training dataset to the vML-CF for its functionality verification.

Figure 4 presents the throughput of normal and attack traffic steered by the vML-CF when we only replay the first 270-minute flows (attack flows are hardly left later) in the data of Week-5 Thursday as an example. It can be observed that the attack flows appeared at around 80 minutes and successfully redirected to SFSec rather than SFQoS, indicating that the vML-CF is able to perform feature extractions from receiving packets, traffic classification based on ML algorithms and flow redirections through adding new forwarding rules online and timely.

Figure 4. - The throughput of normal and attack traffic steered to $\text{SF}_{QoS}$ and $\text{SF}_{Sec}$ by the vML-CF.
Figure 4.
The throughput of normal and attack traffic steered to SFQoS and SFSec by the vML-CF.

Show All

Figure 5 shows the processing time of the vML-CF and vSnort, where all the training dataset with more than 2,000,000 records are replayed as input. The yellow part of the vML-CF in the figure is the precessing time of its FEM, and the green part is that of its LPM. Obviously, the ML-enabled CF implementation has much lower processing time than Snort, and the processing time for seven-week data are quite different due to their unbalanced size in each file (with records ranging from approximately 139,000 to 897,000) and associated ratio of attack traffic.

Figure 5. - The processing time of the vML-CF and vSnort.
Figure 5.
The processing time of the vML-CF and vSnort.

Show All

Finally, we evaluate the performance of the proposed traffic anomaly detection algorithm on the ML-enabled CF implementation, with the whole DARPA'98 training dataset replayed. Figure 6 shows the corresponding experimental results of different ML algorithms. It can be seen that the proposed algorithm outperforms the others with Precision, Recall, and FScore all over 94 percent, followed by DNN (with three hidden layers), ANN, DT and SVM of which performance indicators are below 92 percent; the GNB has the worst performance due to its assumption where sampled features are independent. The proposed CNN-based algorithm has better capability of anomaly detection since it acquires more hidden characteristics and interrelations of flows compared with the DNN and ANN.

Figure 6. - Performance comparisons among ML algorithms.
Figure 6.
Performance comparisons among ML algorithms.

Show All

Conclusion
In this article, we focus on improvements of network security in 5G by integration of SDN/NFV-based SFC and ML. In particular, we first propose a flexible framework, namely ML-SFC, for the smart and efficient provision of diversified value-added services at MEC clouds. Then, we propose a CNN-based anomaly detection algorithm used as service policies of ML-CFs, in order to guide the latter for appropriate traffic classification and redirection. Finally, we build a prototype system based on the proposed framework and a corresponding ML-enabled CF implementation. Extensive experiments are performed and related results have proven the validity and benefits of the proposed framework and algorithm. In the future, we will explore service policies of other entities such as SFCM and cache-based SFs, which need to interact with underlying environments for performance optimization based on reinforcement learning.

