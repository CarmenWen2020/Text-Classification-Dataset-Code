Software-as-a-Service (SaaS) has received significant attention from software providers and users as a software delivery model. Most of the existing companies are transferring their business into a SaaS model. This intensely competitive environment has imposed many challenges for SaaS developers and vendors. SaaS development is a very complex process and SaaS success depends on its architecture design and development. This paper provides a better understanding of SaaS applications architecture phase during the SaaS development process. It focuses mainly on an empirical investigation of key factors of SaaS Architecture phase identified from the systematic literature review. A quantitative survey was developed and conducted to identify key architecture factors for an improved and successful SaaS application. A developed survey was used to test the proposed hypothesis presented in this study. Empirical investigation's results provide evidence that vendors and developers must consider key architecture factors for SaaS development process to stand in the current competitive environment. These key factors include customization, scalability, MTA (Multi-Tenancy Architecture), security, integration, and fault tolerance and recovery management. The main contribution of this paper is to investigate empirically the influence of identified key factors of the architecture on SaaS applications success.

SECTION 1Introduction
Software as a Service (SaaS) is a software delivery model in which third-party providers provide software as a service rather than as a product over the Internet for multiple users. SaaS fits into the third generation of software engineering and is viewed as a package of development, execution automated runtime resource sharing management, and security [1]. This type of sourcing model requires software development only once and providers can target many users in the small and medium enterprise market [2], [3]. Services are installed, assembled and maintained on the systems of the SaaS provider and users pay on a pay-per-use pricing model and get the flexible experience in terms of time and location of access. Examples of SaaS applications are web-based email, Google sites, Salesforce CRM, Youtube video streaming etc. It enables companies to use various IT services without the need to purchase and maintain their own IT infrastructure. Nowadays, in an intensely competitive environment, more and more companies are adopting this model for their web-based business applications. It has received large attention from software providers and users [4]. There are three main advantages of SaaS over the traditional on-premise software [5]. First, it is a pay per use model and relatively low monthly investment instead of a huge upfront investment. Second, it allows getting rid of having the special personnel to manage software and their underlying infrastructure and decrease human and financial pressure on companies. Third, the latest applications and services can be accessed with speed without worrying about development, installation, and testing which results in saving of cost and time. There are a lot of SaaS vendors in each application domain so customers have more flexibility in their IT decision. They can always shift to another vendor if required since they had not invested in the infrastructure [6].

The SaaS architecture design, database partitioning, database architecture, scalability issues, user interface design, use of APIs and workflow is different from tradition application. [1]. Traditional application development mainly focuses on functional requirements as they are on-premise deployed application with implicit control operation and security. These applications are hardware specific with annual innovation cycle. Contrary to that, SaaS provides an integrated solution over the Internet and some SaaS applications need weekly innovation and changes. Services with different level of granularity are provided by SaaS developer based on their usage and changing customer need. Hence, SaaS should be able to maintain a relatively higher level of quality than the conventional system.

SaaS development requires a different approach than the traditional software development lifecycle. It should be designed and developed in a way so it can leverage the benefits delivered by the cloud-oriented computing platform. Main research motivation behind this work is the severity of competition in SaaS and cloud computing field. With the current growth of SaaS, to produce effective products or services to attract more customers is a key problem for providers. One of the main concern in SaaS development process is its architectural design. A good architecture must fulfill products functional and non-functional requirements. There are four types of SaaS architecture i.e., database-oriented architecture, middleware-oriented architecture, PaaS-based architecture, and Service-oriented SaaS architecture [7]. In recent research, some researchers proposed incremental mature SaaS model in which maturity depends on the level of SaaS architectural characteristics [8], [9].

To identify key factors of SaaS architecture empirically, a quantitative survey was conducted, and the results are reported in this paper. Research model and hypothesis are tested in the survey. Results show that identified key factors are very important to consider for developing good SaaS applications and their implications for the current SaaS development process. The rest of the paper is organized as follows: Section 2 describes Literature review & proposed hypothesis. Section 3 provides Research Methodology and Section 4 describes the data results and analysis. Section 5 presents a discussion, and Section 6 concludes the study.

SECTION 2Literature Review & Proposed Hypothesis
In the last decade, many things have been changed in the SaaS industry. The identification of key success factors for the architecture dimension in order to make SaaS application successful will help vendors to stand in a current competitive environment. The main criteria for selection of identified factors are that they have been selected based on their presence in the published articles on SaaS development process, architecture, and their implementation issues. Their presence is identified using a systematic literature review process [10]. The identified factors and the related literature are described in the following subsections.

2.1 Customization
Customization is not a new concept as it has been studied and adopted for more than 40 years [7]. For a multi-tenant system, each tenant has different requirements [11]. To meet the requirements of different tenants, successful SaaS application must support customization feature [11].

Data field, process, service, and interface are four broad areas of customization [12]. Data field customization enables tenants to add or modify data fields of the application. Process customization provides the support to add and configure different processes. Configuring and linking service with different application by the tenant is called service customization. Interface customization means tenant can customize the page display like graphics, colors, fonts according to their ease of use. To enable the support of customization, the provider of SaaS presents a template of the application being offered with some points remains open to customizing by each tenant according to their unique requirements [11]. These customizable points are also called customization points or variability points of the application [11].

A tenant can customize each customization point by choosing a component from a set of components which are provided to fulfill variation in tenant requirements [13]. There could be hundreds of customization points providing multiple options, which enable tenants to customize the application in many ways [14]. These customization points can be interdependent as by choosing different options for one variability point might allow different permitted values at subsequent variability points. This dependence of variability points hinders the customization process [12], [13], [15], [16] and [17].

Although customization of software has been a research problem for a long time, features of SaaS like multi-tenancy, cost-awareness, etc. introduced new challenges for SaaS customization. Chong et al. proposed a SaaS maturity model [8]. Mietzner et al. [11] described how SaaS providers can automatically generate process-based customization tools out of variability points in a SaaS application. Lee et al. [18] designed and implemented a multi-tenant web application framework for SaaS.

The easiness of configuration is categorized into three groups: manual, automated and guided [14]. Shahin et al. [17] also used Orthogonal Variability Model in their aspect-oriented approach for customization. To meet the changing and unpracticable requirements of businesses, Han et al. [19] proposed a layer based configuration method from the perspective of business process composition. Li et al. [16] used Multi-granularity models to achieve customization by considering multi-layer and cross-layer relations. The complexity introduced by the dependency of customization points enforce the validation of customization choices made by the tenant to avoid unpredictable results. Luan et al. [12] proposed a modeling customization process based on the temporal logic of actions. Lizhen et al. [15] proposed a customization model using meta-graph which helps to design and describe relationships between customization points. Shahin et al. [13] applied MDSOC which support developers to provide multiple dimensions to the user to choose from for each type of concerns and customize independently. They reported that these small customization models are easier to handle than one large model.

According to the above discussion, a key feature of customization can play a very important role to improve the architecture of SaaS application so it was selected as an independent variable in this study, and the following hypothesis is proposed:

Hypothesis 1 (H1): Provision of Customization feature has a positive influence on the success of the SaaS application.

2.2 Scalability
Any system which can handle the increasing quantity of work by maintaining stable performance with adding new resources is called a scalable system [20]. Like an online shopping portal has more workload during the holiday season so it should provide acceptable response time during that heavy workload period. With many other features, scalability is also the main feature in SaaS applications [21]. In a multi-tenant system, each tenant can have a hundred of thousands of users, results in a huge number of simultaneous accesses from users and thus a SaaS system should be able to provide the scalable performance to millions of users [7], [22]. For a SaaS application, its vendor needs to guarantee that the system can provide minimum requirement of system performance under the growing workload using its underlying computing resources [20].

Scalability is classified into two categories: scale-up or vertical scaling and scale-out or horizontal scaling [7], [20], [23], [24], [25] and [26]. Scale-up is defined as running the application on a machine with a better computing resource like more memory, higher disk bandwidth, and larger disk space. Scale-out is distributing the application on multiple machines with a similar configuration to handle the additional load. As resources of a single machine can be increased only up to a limit, therefore in a cloud application, scale-out is implemented instead of scale-up [20]. If the SaaS application support scales up or down correctly to only consume and pay for the required resources at a specific point in time, it will be cost effective for SaaS provider as well [27]. Load balancing algorithms use a cluster of replicas of the application server and distribute a request for processing on replicas to achieve scalability [28]. Scalability of a SaaS system also effected by the underlying PaaS.

Current SaaS scalability solutions include multi-level scalability architecture, tenant-awareness, automated data migration, workload support, software architecture, and database access [23]. In the SaaS application designing and implementation literature, researchers have explored the importance of the scalability and proposed mechanisms to achieve scalability in SaaS application. Tsai et al. [72] identified important aspects that have a significant impact on SaaS scalability. To achieve cost-effective SaaS scalability, automation can help to design a more intelligent environment [27]. Usually, automation is achieved using rules which define how service would scale up or down under variable workload. When conditions in the rules met, they trigger actions to scale service horizontally or vertically [29]. Automatically adding or removing resources on the fly is called auto-scaling. Auto-scaling makes the application more efficient to handle unpredictable traffic variations and the demand for faster response times [25]. Jamshidi et al. [30] addressed some challenges in existing work and developed a robust controller: RobusT2Scale which enables the qualitative description of elasticity rules using fuzzy logic and can handle many unpredictable environment changes like request changes and degradations in response time. Moreover, Wu et al. [28] proposed a unified framework to load distribution and fault tolerance of stateful application server which distributes load efficiently across all replicas and replicas can easily grow and shrink with the demands. In addition, Yusoh et al. [24] proposed a hybrid genetic scaling algorithm for a composite SaaS application that uses problem domain knowledge at the application and infrastructure layers to make decisions.

Testing the scalability of SaaS applications is another open research problem. Different metrics can be used to measure the scalability of a SaaS application [21]. Gao et al. [20] presented a cloud-based evaluation report. Chen et al. in [31] presented a scalability testing and analysis system called STAS with the isospeed-e scalability metric. In addition, Lehrig et al. [32] proposed scalability analysis using architectural template language. Gao et al. [33] proposed testing as a service infrastructure to meet the needs in SaaS testing, performance and scalability evaluation. From literature, it's clear that scalability plays a key role in design and development of SaaS application to guarantee that system can provide minimum requirement of system performance under the growing workload. Therefore, scalability has also been selected as an independent variable in this study and the following hypothesis is proposed:

Hypothesis 2 (H2): Consideration of scalability characteristic for SaaS application architecture has a positive impact on the final product.

2.3 MTA (Multi-Tenancy Architecture)
The ability of a SaaS application to serve multiple tenants (tenant i.e., an organization entity) using a single server and service instance in such a way that every tenant feels like a dedicated server is called multitenancy [34]. Multi-tenancy is an architectural design where an instance of the software runs on the service provider's infrastructure and accessed by multiple tenants who share components including data model, server, and database layer [35]. Multi-tenancy is a key feature of SaaS software and is one of the measures for the success of SaaS vendor [36]. There are three levels of multi-tenancy: Data model multi-tenancy, Application multi-tenancy, and Full multi-tenancy [37]. Data model multi-tenancy is the simplest level where tenants share the same database and data can be accessed using tenant-specific GUID. In application multi-tenancy, all tenants share the same instance of application along with the database. Full multi-tenancy brings variability to the software product. All tenants share same database and software instance and allow to have their own variant of the product if required. There are many benefits of multi-tenancy. Data aggregation opportunity in multi-tenant SaaS decreases maintenance cost. It also improves the utilization rate of hardware resources and the deployment and maintenance of software become easy [36]. By looking at the advantages of multi-tenancy, most of the organizations are going to transform their single tenant SaaS application into multi-tenant. Multi-tenancy also introduces some complications like a problem caused by one of the tenants has also effects on other tenants as they share the same hardware resources. Features like scalability, security, and configurability require more effort in the multi-tenant SaaS development process.

The multi-tenant support can be applied to four different software layers in the multi-tenant SaaS model: application layer, a middleware layer, virtual machine (VM) layer, and operating system layer. Kang et al. [34] proposed a conceptual architecture of SaaS platform that provides configurable and multitenant SaaS application. Moreover, Mietzner et al. [38] introduced and evaluated multi-tenancy patterns and investigated how the services of different delivery patterns can be combined.

One of the challenges in achieving full benefits of multi-tenant application is difficulty in calculating resource requirements for each additional new tenant with a number of new users while meeting constraints for all tenants in a shared application instance. To solve this problem, Kwok et al. [39] proposed a method for selecting the best database in which a new tenant should be placed using multi-tenant placement model without violating any SLA requirements resulting in maximum cost savings in a distributed computing environment. Bezemer et al. [35] highlighted the possible challenges faced by developers and maintainers while re-engineering multitenant software application. Tsai et al. [7] listed all database design choices for MTA-enabled SaaS. They also discussed many issues of MTA database design and their solution. Chong et al. [40] also identified different approaches to create the architecture of Multi-tenant SaaS application.

In addition, Wang et al. [41] studied different techniques of data tier to build the scalable multi-tenant application. Furthermore, they evaluate the performance of these design patterns based on a number of tenants, the number of users and the amount of data per tenant. Wang et al. [42] proposed an approach for service recommendation in multi-tenant SaaS application by clustering candidate services and tenants based on similarity of their QoS requirements. Gey et al. [43] defined key requirements for the SLA-aware evolution of long-running multi-tenant application and proposed a dynamic adaption approach that can manage multiple coexisting version of components without effecting service continuity throughout the evolution of SaaS application. Their proposed approach is beneficial for tenants as well as SaaS providers. Recently, Jumagaliyev et al. [44] also explored SPL and MDE techniques to manage variability in evolving multi-tenant SaaS application.

From the preceding discussion, it's clear that Multi-tenancy can be a key feature for SaaS architecture one of the measures for the success of the SaaS vendor. We choose it as an independent variable in our study. Hence, Hypothesis 5 can be stated as follows.

Hypothesis 3 (H3): Facility of multi-tenant Architecture for SaaS Application is considered as an important aspect of SaaS application.

2.4 Security
Benefits and convenience of SaaS model are threatened by security challenges. Multi-tenancy has different possible deployment models from a separate instance for each tenant to a single instance for multiple tenants. Resource sharing in multi-tenant SaaS application increases the security and privacy concern of outsourced cloud hosted assets [2], [45], [46]. In a multi-tenant SaaS application, where multiple tenants share same instance or server, other tenants can be a competitor or malicious user. Data of enterprises is stored at the SaaS provider's data center, along with the data of other enterprises and if SaaS provider deploys it on the public cloud, data might be stored along with data of other unrelated SaaS application [47]. The cloud providers, replicate the data at multiple locations across countries to achieve high availability. On the local system, enterprises guard and secure their strategic data and business process with access control and compliance policies but in the SaaS model, clients are totally dependent on the provider for security management. They have no control over how data is stored and secured in SaaS model [47] [48]. This lack of control and visibility make clients uncomfortable [47], [49]. They are reluctant to integrate their business into SaaS [45]. Security is one of the key features of new multi-tenant SaaS application and old applications which are re-engineered to support multi-tenancy [2], [48]. In SaaS application, security requirements of old and new tenants emerge at run time after the applications and services have been developed and delivered. These requirements change based on current business needs and security risk [2], [50]. Traditional security (re)engineering approaches that are fixed and hard-coded by service provider do not fit because of the multiple tenant access on a single instance and changing nature of tenant's security requirements at run-time [49].

A lot of work has been done on analyzing SaaS security issues. Subashini et al. [47] conducted a survey of security risk in service delivery model of cloud computing. Later, Rai et al. [51] also highlighted the same security challenges in SaaS model of cloud computing and their solution from literature. Hashizume et al. [52] analyzed security issues of cloud computing and highlighted security concerns in SaaS application. Their highlighted concerns are application security, multi-tenancy, data security, and accessibility. Chouhan et al. [45] examined SaaS in the context of four different environments: cloud computing, mobile cloud computing, software-defined networking, and the internet of things. Later, they further classified these groups into subgroups and mapped these issues on the SaaS architecture layers to provide further insight into these issues [53].

Matos et al. [46] provided an approach based on Model Driven Engineering (MDE) and security mechanism to handle SaaS security from design to code. Pachauri et al. [55] proposed a security model for SaaS (SMS) as a guide for assessing and enhancing security in each layer of the SaaS delivery model. Almorsy et al. [2] have developed a set of modeling tools and a prototype of MDSE@R: a new model-driven approach to dynamically engineering security for multi-tenant SaaS applications at runtime. Wen et al. [87] proposed a quality model which measures the security, quality of service, and software quality of the SaaS service from the perspective of provider and user separately.

Evidence collection about a security incident in SaaS is very important but a cloud service consumer has very limited rights to access evidence needed for security incident investment [56]. There are different kind of monitors available today to generate security alerts like intrusion detection systems, network audit, vulnerability scans, and event logs. The analysis of the security alerts generated by the security monitors at node and network level provides very useful information to detect attacks and to pinpoint potential system misuse [57]. Tenants trust can be achieved if they are allowed to monitor the security status and behavior of their cloud-hosted assets. Goode et al. [58] developed a model of SaaS satisfaction that incorporates perceived security and perceived value which helps to understand the role of security in client satisfaction. Cotroneo et al. [57] proposed a framework to address security alerts generated by security monitors and to support the automated identification of root cause of the alerts using filters and decision tree.

Enterprises are becoming more demanding on details about how data is secured and how vendors isolate data in multi-tenant systems. It is very important to implement security in SaaS considering requirement variation of each SaaS. By looking at its importance for a SaaS system where resources are shared between multiple tenants with hundreds of users of each tenant, it is considered as an independent variable in this study. The following is therefore presented.

Hypothesis 4 (H4): Addressing Security concerns during SaaS architecture development has a positive impact on SaaS application.

2.5 Integration
Nowadays, business processes are very complicated and to meet business needs, a business application should integrate both on-premise and SaaS application to get full advantage of SaaS. On the other hand, SaaS applications need to integrate with other services and applications to get the desired business functionality [59], [60], [61]. According to the results of a survey of 639 companies, more than 70 percent of companies expect from the SaaS that there should be an integration facility with other SaaS and on-promise application [61]. SaaS platforms expose data, metadata, functionalities, and services through web services so that they can be discovered, queried, and updated by on-premise applications. Use of Web services and SOA has made integration easy as it allows clients to get required data and functionalities programmatically and also, they can integrate SaaS application with their SOA infrastructure in a standard way [59]. SaaS providers offer web service application programming interface (APIs) which support batch synchronization of data with simple create, read, delete, and update statements. For the complex enterprise integration requirements, integration cost can be 30-45 percent of the whole SaaS implementation [62].

There are three major layers in SaaS application: user interface, business logic, and data. Integration happens in all these layers. Every application in the integrated environment has its own user interface access control. The user needs to switch between different interfaces with credentials required by SaaS and on-premises application. Single sign-on is required in user interface integration which enables the user to sign in once and then access all required SaaS services and applications. The business process provided by one SaaS may need business process provided by another SaaS or on-premises application. Process integration can automate the end to end business process across multiple SaaS services and on-premises applications. There are four key process integration patterns that are usually required. SaaS service has two types of data: transaction data and master data. There could arise a need to synchronize or migrate data from one SaaS service to other SaaS service or to on-premises application. There should be only one master data source in one type of data in a company's application environment. There are two key data integration patterns that are usually required. The data-level integration of SaaS is essential for higher levels of integration. Data merging and synchronization are important for integration with on-premises applications [63].

Although SaaS applications facilitate data import and export, however, the biggest challenge is point-to-point connections between SaaS applications. Efforts required to integrate more SaaS applications rise exponentially because of the absence of standard and data model diversity [63]. Key issues of SaaS integration are security, privacy, controllability, composition, orchestration, data transformation, data transfer, standard compliance and flexibility [63]. Location of the different on-premises source and target systems must be considered while designing integration [62]. Currently, different SaaS vendors have different toolkits to support integration, and System Integrators use different tools [61]. However, there is a need to have a unified tooling environment that can standardize the SaaS integration techniques. This will improve integration productivity, efficiency, and SaaS adoption. Web service adoption in SaaS is a very good foundation to put different SaaS services in a unified tooling environment. The absence of well-defined validation methods, cost-effective integration solutions and framework and standard for connectivity protocols, interaction interface, and service API increases the difficulties and integration cost [64].

Although integration is one of the barriers to the adoption of SaaS [65], [66] and very few research studies have investigated on integration solution for SaaS. Sun et al. [61] pointed out three important requirements in the integration point of view. Security and privacy are the first requirements as business data of customer move back and forth among the SaaS service and their on-premises applications over the Internet.

Hai et al. [62] described best practices for SaaS integration and emerging integration technologies. Liu et al. [60] examined some major issues when integrating communications services which are real-time and dynamic in nature with SaaS applications. Kim et al. [67] proposed a method to transfer the business software to integrated software that can be used in a SaaS environment. They used a master table and master code to solve the associated problems. Their proposed method can be applied to different commercial software. Merkel et al. [68] examined how on-premises enterprise application landscapes can be integrated SaaS avoiding point-to-point integration. They introduced an intermediate layer in a cloud environment by applying enterprise service bus. SaaS broker integration patterns bring centralized control of all SaaS communication.

By looking at the SaaS business model, it's obvious that it should be able to integrate with other SaaS and local on-premises application. It seems to be an important factor to get full advantage of the SaaS model so it is selected as an independent variable in this study and the following hypothesis is proposed.

Hypothesis 5 (H5): Addressing of integration issue has a positive influence on the SaaS application success.

2.6 Fault Tolerance and Recovery Management
Fault tolerance is the feature that helps the system to operate continuously in case of any failure in the system. Fault tolerance algorithms use server replicas to mask the failures of individual replicas and it is usually sufficient to have one or two backups [28]. It is a major concern in critical services and application execution to make sure its reliability and availability [69]. Therefore, Failure can be predicted and handled proactively to minimize its impact on system execution. In an application or service, fault detector handles detection of host, object and process fault [70].

Most of the applications on the Cloud are real-time High-Performance Computing (HPC) systems which bring the need of higher level of fault tolerance [71]. GAE (Google App Engine) provides transparent fault-tolerance and scalability, without any interference of the applications. For real-time applications on the cloud, there are two standard fault tolerant policies: Proactive Fault Tolerance Policy and Reactive Fault Tolerant Policy [71]. Avoiding failure by taking preventions is the principle of proactive fault tolerance. There are two fault tolerant techniques which are based on the principle of proactive fault tolerance: preemptive migration and software rejuvenation. Reducing the consequences of faults already occurred in the cloud is the policy of Reactive fault tolerance. checkpointing/restart, replication, and task resubmission are fault tolerant techniques which are based on the reactive fault tolerance policy. Reactive techniques are used more as compared to proactive techniques because of the simplicity in implementation and less number of incorrect predictions due to proactive fault tolerance. Narasimhan et al. [70] reported a comparison of replication styles for a cobra application based on the cost of the checkpoint, computational resources, bandwidth, and speed of recovery.

Although SaaS system needs to have its own fault tolerant mechanisms in addition to the one provided by underlying PaaS but not much work has been done on fault tolerance at the SaaS level. Tsai et al. [72] identified and discussed factors and their interaction which can effect the scalability of SaaS application.

Barga et al. [73] developed a framework for recovery guarantees in general multitier applications and masks all failure from the user. Jain et al. [69] discussed fault tolerance technique the in the cloud which used heartbeat and gossip algorithm to detect whether the application is working smoothly or not. Wu et al. [28] proposed an architecture to handle fault tolerance and load balancing in a single solution for the stateful application server. Wang et al. [74] proposed criticality-based fault tolerance for formulating cost-effective fault tolerance strategies for multi-tenant service-based systems. They provided an integrated solution for fault tolerance strategy across multiple tenants.

To determine whether fault tolerance AND recovery management is a key architecture feature for SaaS application success, fault tolerance AND recovery management were selected as an independent variable. Hence, Hypothesis 6 and corresponding null hypothesis can be stated as follows.

Hypothesis 6 (H6): Fault tolerance and recovery management are considered very important features of SaaS application architecture.

SECTION 3Research Model & Methodology
3.1 Research Model
The objective of the proposed research model is to study the relationship between key architecture factors and the success of SaaS application also to understand the influence of these factors on overall SaaS development quality in the SaaS market. The model's theoretical foundation is based on existing concepts found in the SaaS development literature identified through systematic literature approach.

Most of the work in the literature discuss one or two of the factors (as mentioned in Section 2) for SaaS architecture and their impact on the overall SaaS development process. This study proposes to investigate empirically the influence and association of key software factors for improved SaaS architecture. A theoretical model is shown in Fig. 1 which will be empirically investigated.


Fig. 1.
Research model.

Show All

The theoretical model evaluates the relationships between various independent variables emerging from software engineering and management concepts with the dependent variable, Performance of SaaS application, in the context of the SaaS application architecture. This study mainly investigates and addresses the following research question.

Research Question: How can SaaS developers improve the quality of SaaS application specifically in terms of its architecture dimension to capture more business for their product?

The research model includes six independent variables: customization, scalability, MTA, security, integration and fault tolerance and recovery management and one dependent variable: SaaS application performance. The multiple linear regression equation of the model is given as (1):
SaaSapplicationPerformance=α0+α1f1+α2f2+α3f3+α4f4+α5f5+α6f6.(1)
View SourceRight-click on figure for MathML and additional features.where α0,α1,α2,α3,α4,α5,α6 are coefficients and f1 to f6 are the six independent variables.

3.2 Research Methodology
SaaS development process includes five stages [75]. The first stage is the requirement stage which focuses on exploring business opportunities from market requirements. Analysis stage is performed from a business perspective. In the design phase, business process modeling and different technologies are used. Implementation stage is performed by considering the SaaS platform environment, and Testing stage focuses on validation of interaction between the application and the SaaS platform, performance, and usage metering. From design to test phase, there is a need to consider key factors of SaaS architecture which plays a very important role in its success. In this study, we selected employees of SaaS development organizations as the targeted respondents. For data collection, the authors contacted many SaaS development organizations. The respondents participating in the study were part of multinational organizations in Asia, Europe, and North America. Fig. 2 shows region wise distribution of respondents.

Fig. 2. - 
Number of respondents by specific region.
Fig. 2.
Number of respondents by specific region.

Show All

There was agreement with respondents of the survey to keep their identities confidential. The size of the SaaS development teams chosen for survey ranged from 10- 50. SaaS projects considered by respondent of this study have different time period which is shown in Fig. 3. Fig. 4 shows the respondents percentage based on their role in the SaaS application development project. The participants in the study were mainly part of SaaS development projects and applications were developed for different platforms such as standalone devices, the Web, PC/Macs, and mobile phones.


Fig. 3.
Total SaaS project development duration of projects considered by respondents.

Show All


Fig. 4.
Percentage of respondents based on their roles in the project.

Show All

Only the respondents who were part of the team which had at least three full-time developers and the respondent worked in the project development team for at least one-third of its total duration were qualified for this survey. Project requirements were to be completed or canceled within the last three years. Respondents worked on different roles like a developer, programmer, designer, producer, manager, and tester. Sixty-nine (69) respondents participated in the survey including one to four respondents per organization. Almost, 65 percent participant organizations were medium size and provider of some business-critical solutions. The 35 percent of respondents belong to small organizations and provide mix solutions to different customers. The 10 percent respondents are part of the large organizations and provider of mix solutions also.

3.2.1 Measuring Instrument
This study gathered data on the key factors and the perceived level of SaaS application Performance identified in the research model depicted in Fig. 1.

To learn about these two topics, the questionnaire presented in Appendix was used as a data collection instrument. First, organizations involved in the SaaS development process were asked to what extent they practiced the identified key factors for the SaaS development project in the questionnaire. Second, they responded to the questions about their thought of the SaaS application Performance in the market. Respondents were asked to specify their level of agreement using five points Likert scale. To measure the independent variable, thirty-one statements were used and for the dependent variable (SaaS application Performance), six statements were used. We performed a detail literature review to generate a complete list of measuring statement for each factor. Five points Likert scale was associated with each statement which ranges from 1 for strongly disagree to 5 for strongly agree. The statements for each identified key factor were numbered from 1 to 31 which are shown in the appendix. Results were measured based on a multi-item five-point Likert scale for the projects which were completed within the last three years. The SaaS application Performance was chosen as the dependent variable and six measuring statements are labeled sequentially from 1 to 6 in the appendix.

3.2.2 Reliability and Validity Analysis
The reliability is a degree of stability or consistency of measurement and validity refers to a valid inference or agreement between the test measure and the true values. For reliable and valid research, quantitative analysis was performed. Reliability and validity analysis was performed to test the measuring instruments designed for this study. Common techniques which are used for empirical analysis were used for the test. To perform empirical studies, two integral measure of precision, reliability, and validity analysis were used. To measure the consistency of multi-scale measurement statements for six factors, a reliability analysis was performed on sample dataset and to evaluate consistency, Cronbach's alpha [76] coefficient was used. Researchers have found different ranges of Cronbach's alpha. Some researchers stated that the value of 0.70 or higher for a reliability coefficient is satisfactory while others found that the value of 0.55 or higher was satisfactory. For this study, criteria for Cronbach's alpha 0.60 and above was considered satisfactory and depicted in Table 1.

TABLE 1 Cronbach's Alpha Coefficient and Principal Component Analysis of Six Variables
Table 1- 
Cronbach's Alpha Coefficient and Principal Component Analysis of Six Variables
In order to perform validity analysis of measuring instrument, principal component analysis [77] was used determined by eigenvalue criterion [78]. Greater than one value is used to retain any component based on Kaiser Criterion [79]. Eigenvalue analysis showed that all factors formed a single factor and Eigenvalue was greater than one. Hence, the reported convergent validity of this study was considered adequate and showed in Table 1.

3.2.3 Data Analysis Techniques
Different statistical approaches were used to perform an empirical investigation of this study. To assess the implication of proposed hypotheses from H1 to H6, this research activity was divided into three stages. Normal distribution and parametric statistical tests were performed at stage one. At this stage, the Pearson correlation coefficient using parametric statistical approach was calculated for tests with a one-tailed t-test for each hypothesis of H1 to H6. At stage two, the Spearman correlation coefficient was used to test hypotheses using the non-parametric statistical technique. For the analysis, a partial least squares analysis was carried out. We used both parametric and nonparametric methods to address external threats to validity due to small sample size. Parametric approach measured the strength of the linear relationship between normally distributed variables and the non-parametric approach is used for the non-linear relationship between variable. Consistent results are found for both approaches. There were multiple statements for each independent and dependent variable in measuring instrument and the composite value was collected by aggregating the respondent rating on the Linkert scale. To address problems of non-normal distribution and complexity or small sample size of the dataset, an empirical investigation was performed at stage 3. The partial least square analysis is helpful in case of non-normal distribution, complexity, small sample size, and low theoretical information [80], [81]. So, to deal with the small sample size problem and to increase the reliability of the results of this study, the PLS technique was used at stage 3.

SECTION 4Data Analysis and Results
4.1 Hypothesis Testing: Phase I
At stage 1, parametric statistics were used to test hypothesis H1 to H6. The Pearson correlation coefficient between the independent variables and dependent variables was determined. Then the criteria to select or reject a hypothesis was defined. If the p-value of the hypothesis was less than 0.05, the hypothesis was accepted and if the p-value was greater than 0.05, then it was rejected. Results of the Pearson correlation coefficient are shown in the Table 2.

TABLE 3 PLS Regression Results for Hypothesis Testing
Table 3- 
PLS Regression Results for Hypothesis Testing
The hypothesis I was accepted because the Pearson Correlation Co-efficient between customization and the SaaS application Performance was positive (0.47) at p<0.05. For hypothesis H2 concerning Scalability in SaaS and the SaaS application Performance, the Pearson correlation coefficient was also positive (0.69) at p<0.05, and therefore hypothesis H2 was also accepted.

Hypothesis H3 concerning MTA and the SaaS application Performance was accepted due to a positive (0.60) correlation coefficient at p<0.05. Hypothesis H4 concerning security factor for SaaS architecture and SaaS application Performance was accepted based on its positive Pearson correlation coefficient (0.44) at p<0.05. Hypothesis H5 concerning integration and the SaaS application Performance was accepted based on its positive correlation coefficient (0.77) at p<0.05. Hypothesis H6 regarding fault tolerance and recovery management and the SaaS application Performance was rejected based on its positive correlation coefficient (0.21), but p>0.05.

4.2 Phase II of Hypothesis Testing
At stage 2, nonparametric Spearman correlation coefficient was used to test hypothesis H1 to H6. Results for the Spearman correlation coefficient are shown in the Table 2. Hypothesis 1 H1 regarding customization was accepted because of its positive Spearman correlation coefficient (0.47) at p<0.05. The Spearman correlation coefficient for scalability and the SaaS application Performance (hypothesis H2) was also positive (0.69) at p<0.05 and was also found to be significant. The relationship between MTA and the SaaS application Performance (hypothesis H3) was found to be statistically significant due to its Spearman correlation coefficient (0.64) at p<0.05 and was accepted. For hypothesis H4 regarding security and the SaaS application Performance, the Spearman correlation coefficient was positive at p<0.05, and therefore H4 was accepted. Hypothesis H5 concerning integration factor and the SaaS application Performance was accepted due to its positive coefficient (0.78) at p<0.05. Hypothesis H6 concerning fault tolerance and recovery management and the SaaS application Performance was rejected due to its positive Spearman correlation coefficient (0.21) at p>0.05.

4.3 Phase III of Hypothesis Testing
To cross-validate, the results from the parametric and non-parametric statistical technique used at stage1 and 2, partial least squares (PLS) technique was used to test the hypothesis at stage 3. Tests were also performed on hypotheses H1 to H6 to check their direction and significance. For PLS examination, independent variables were designated as the predicate variables and the dependent variable, i.e., the SaaS application Performance, as the response variable. Results are shown in the Table 4. the values of the path coefficient, R2, and the F-ratio are also presented in Table 3.

TABLE 2 Hypothesis Testing Using Parametric and Non-Parametric Correlation Coefficients

The path coefficient for customization (H1) was observed to be 0.58, with an R2 of 0.079 and an F-ratio of 10.45, and H1 was therefore found to be significant at p<0.05. Scalability (H2) had a positive path coefficient of 0.78, R2=0.340, and F−ratio=135.80 and was also found to be statistically significant at p<0.05. MTA (H3) had a path coefficient of 0.55, with an R2 of 0.570, and an F-ratio of 72.07 and was found to be significant at p<0.05. Security (H4) had a positive path coefficient of 0.17, a low R2 of 0.009, and an F-ratio of 0.69 and was judged to be significant because the p-value was less than 0.05. Integration (H5) (path coefficient: 0.49,R2:0.018, and F−ratio:1.90) was found to be a significant and fault tolerance and recovery management (path coefficient: 0.06,R2:0.29, and F−ratio:25.10) was found to be statistically insignificant at p>0.05.

4.4 Research Model Testing
The linear regression equation for the research model is given by (1). The research model was tested to provide empirical evidence that factors important to SaaS developers play a considerable role in the SaaS application Performance. The regression analysis, the model coefficient values and the direction of the associations were observed in the test. For PLS examination, independent variables (key factors) was designated as the predicate variables and the dependent variable, i.e., the SaaS application Performance, as the response variable. Results from regression analysis are shown in the Table 4.

TABLE 4 Linear Regression Analysis of the Research Model
Table 4- 
Linear Regression Analysis of the Research Model
The path co-coefficient of customization, scalability, MTA, security, integration) were positive and were found to be statistically significant at p<0.05. The path coefficient for fault tolerance and recovery management was positive but was found not to be statistically significant at p>0.05. The overall R2 value of the research model was 0.85, and the adjusted R2 value was 0.71 with an F-ratio of 37.01, which was significant at p<0.05.

SECTION 5Discussion
The emerging of SaaS is the result of changes in the software business environment. By observing new trends of business delivery model and benefits of SaaS, more and more number of companies are trying to advance to a new paradigm with SaaS service component. There are many SaaS representative vendors like Google, Amazon, Microsoft, and Salesforce.com, which have different methods to follow this paradigm shift. A good-quality of SaaS architecture is a very important part for SaaS application business performance. A SaaS architecture identifies the main structural components of the underlying product and their interdependency. There are many challenging issues due to lack of proper guidelines in adopting SaaS delivery model. Traditional and new companies must consider key factors to exist in the current competitive environment and to improve their existing SaaS architecture. In this regard, the experience of SaaS developers can help to understand these key factors to improve SaaS architecture quality. This work will help developers and vendors to understand these key factors and their relationship from developer's perspective to improve SaaS application. To the best of our knowledge, this is the first empirical investigation of factors and association between them which are important for SaaS architecture and application success.

Customization for multi-tenant SaaS application is very important but at the same time, it brings a lot of challenges while designing and implementation of SaaS application as it needs to work in each area of application including data fields, process, services, and interface. At first designer and developers need to model customization point then they should define the relationship between those variation points. This dependency should be defined in tenant's understandable formats because value selected for one point changes options available for its dependent variation point. Guided customization framework in which the system provides top matching customization choices and tenant can review and modify them if needed simplify this process to some extent. There should be a way to validate customization made by the user as there are chances of error or unpredictable results because there are hundreds of customization points with multiple options for each point. This study has discovered the positive association between customization feature of SaaS architecture and SaaS application performance.

Multitenancy is one of the key attributes that are widely used in SaaS maturity models. Three levels of multitenancy are data model, application and full multi-tenancy range from simplest to complex. It favors the SaaS vendor by increasing the utilization rate of the hardware resource and decreasing the cost. Multi-tenancy increases the complexity associated with scalability, security, and customization of SaaS application as more effort is involved to implement these features with multi-tenancy. More security is required as data and resources are shared by multiple tenants. Scalability is one of the greatest challenges with multi-tenancy where there are multiple tenants with hundreds of users. Requirements of these tenants change at run time so the system must be able to scale based on each tenant request. There are multiple database design options which can be choose based on application domain or requirements. Multi-tenancy has been found to be positively associated with the SaaS application Performance.

Ability to scale up or scale down of application resource to make pay per use possible is a very attractive feature for every growing business. It is very cost-effective as compared to traditional hosting solutions. Any SaaS system should be intelligent enough to scale automatically when the system is overloaded to maintain persistent response time. As scale out is a more appropriate approach for SaaS systems, there is need of more work to find best practices to achieve required scalability and to avoid over and underutilization of resources. There are several criteria to evaluate Software as a Service (SaaS) which can be used based on business requirements. Creating a test environment for scalability is another important issue. Cloud vendor can provide easy and effective cloud APIs and tools to enable cloud users to test SaaS scalability in an actual environment. Scalability also has been found positively associated with the SaaS application Performance.

Security issues in SaaS make enterprises uncomfortable while transferring important data to the SaaS. Integration and multi-tenancy feature of SaaS improve resource usage and sharing in application but at the same time raise concerns related to security. In multi-tenant SaaS system, where each user has different security requirements which can emerge or change at run time, it is very hard to integrate security in each level of SaaS. External pluggable security is the best fit to SaaS model where each user can customize it according to requirements. Monitoring of security incidents and evidence collection help to avoid that incident in the future. They also improve customer satisfaction as they can observe any attack or potential misuse. This study has empirically investigated that addressing security concern during architecture design will have significant importance and help the organization to secure its position in the market. Moreover, it has found a positive association between them.

The Success of SaaS in software cloud cannot obscure the integration challenges faced by designers, developers, and enterprise infrastructure. It also made the transition to existing software and data from ASP to SaaS very complicated. Integration is one of the issues which can affect SaaS adoption. One problem is data integration because each data set consists of different data types and the second problem is software integration as there can be a variety of softwares which need to be integrated with SaaS application. These softwares can be other SaaS application or enterprise's on-premise software without which, sometimes, SaaS application has little to no value. There is absence for the standard to handle data and software integration problem. Use of standards, integration as a service and web services model which is adopted by most of the SaaS application can decrease the complexity and cost associated with integration. This study has also found a positive association between Integration factor and SaaS application performance.

Introducing fault tolerance in the multi-tenant application is also a challenging task due to the different quality requirements of each tenant. We could not find much work about fault tolerance for multi-tenant SaaS system so there is a need of investigation for fault tolerance technique at SaaS architecture level. Although SaaS can use fault tolerance of underlying PaaS but introducing fault tolerance at the SaaS level will help to provide customized fault tolerance to each tenant. The findings of the study do not support a statistically positive relationship between fault tolerance and recovery management and the SaaS application performance. The direction of association was found to be positive, but the required level of confidence was not supported. Hence, the hypothesis that fault tolerance and recovery management has a positive impact on the SaaS application performance was statistically rejected.

Outcomes of this research are very significant for the development of good quality and successful SaaS application. Software development activities are effected by continual changes in technology. Established and new SaaS organizations need to follow current trends and also asses their development methodologies to find their weaknesses and strengths. Proper assessment methodology will also provide guidance for improvement. The findings of this study will help SaaS vendors to look for important key success factors for SaaS application architecture dimension.

5.1 Limitations of the Study
Different types of empirical approaches like case studies, metrics, surveys and experiments have been used for software engineering process. Empirical studies and this study have some limitations. Four criteria for validation of empirical studies suggested by Easterbrooks et al. [82] includes internal validity, construct validity, external validity, and reliability. Generalizing experimental results to industrial practice by researchers is mostly limited by threats to external validity [83]. Measurements were taken to handle external threats to the validity of this study. Respondents were chosen from all around the world using a random sampling method.

One of the limitations of this study was the choice and selection of key factors (independent variable) which were chosen to analyze their association and their impact on SaaS application market performance. There can be other key factors which have an impact on SaaS application performance but due to the presence of the selected six variables in the literature, they were excluded in the study. The focus of this study was only on key architecture factors affecting the SaaS application performance. Another main limitation of this study is the sample size. Although a large number of responses were collected, it can be considered a small sample size compared to the whole population size. Many respondents refused to answer the questionnaire because of their busy work schedule. So, data collected from the SaaS industry was limited. Researchers highlighted some techniques to handle small sample size problem. The reason to divide data analysis section into three stages was to handle the small sample size issue. The main consequence of small sample size is on its statistical power, Type II error, significance and on distribution [84] so strong statement must be avoided while making a conclusion. Although results from small sample size studies can be difficult to generalize [85], they can be helpful to find the interplay between variables and to get quick results. Care must be taken while interpreting small sample size results [86]. In this study, the results of small studies are used to design large confirmatory studies. With the increasing popularity of empirical methods, concerns about ethics have been raised. All applicable ethical principles have been followed in this study to avoid violation of experimental ethical guidelines. Regardless of its limitations, this study has contributed to the SaaS architecture design and has helped SaaS development organizations understand the architecture dimension of SaaS application to remain competitive in the market.

SECTION 6Conclusions
The SaaS application industry has a very bright future and evolving rapidly. There are new advancements in the SaaS industry in terms of mobility, security, new revenue models and integration. SaaS is transforming the market and has incredible potential for growth. The customers of SaaS application are becoming more dependent on the provided solutions, while at the same time their retention is only possible if provided solutions are up to mark. Increasing cost pressure, high customer expectation, and global competition in the software industry have introduced new demands on SaaS application development processes. A good-quality SaaS architecture is a very important part of the SaaS development process and for its success in the market. A SaaS architecture identifies the main structural components of the underlying product and their interdependency. For successful development of good-quality SaaS architecture and product, SaaS developers must consider and explore all related key factors as well as discuss them with all the stakeholders involved. In this study, a better understanding of key factors of SaaS application architecture is provided. This study also explored the impact of these key factors on the SaaS application performance. The research question that was stated earlier in this paper is answered in this study. Results of this empirical investigation showed that these key factors play a very important role in improving SaaS architecture and ultimately, its performance. It is concluded from this study that customization, scalability, MTA, security, and integration are positively associated with SaaS application performance. This study is first of its kind and will be helpful for SaaS developers and SaaS vendors. Empirical evidence and justification to include key architecture factors are provided in this study so developers must consider the identified key factors to improve the current SaaS architecture, develop good-quality SaaS applications in order to remain competitive.