Cloud computing provisions scalable resources for high performance industrial applications. Cloud providers usually offer two types of usage plans: reserved and on-demand. Reserved plans offer cheaper resources for long-term contracts while on-demand plans are available for short or long periods but are more expensive. To satisfy incoming user demands with reasonable costs, cloud resources should be allocated efficiently. Most existing works focus on either cheaper solutions with reserved resources that may lead to under-provisioning or over-provisioning, or costly solutions with on-demand resources. Since inefficiency of allocating cloud resources can cause huge provisioning costs and fluctuation in cloud demand, resource allocation becomes a highly challenging problem. In this paper, we propose a hybrid method to allocate cloud resources according to the dynamic user demands. This method is developed as a two-phase algorithm that consists of reservation and dynamic provision phases. In this way, we minimize the total deployment cost by formulating each phase as an optimization problem while satisfying quality of service. Due to the uncertain nature of cloud demands, we develop a stochastic optimization approach by modeling user demands as random variables. Our algorithm is evaluated using different experiments and the results show its efficiency in dynamically allocating cloud resources.

SECTION 1Introduction
Cloud computing is a popular networking paradigm that provides resources via Internet [1], [2]. Cloud computing helps web service providers reduce hardware infrastructure expenses for deploying their applications. In addition, easy resource management and fast response time are the other interesting characteristics that bring the attentions to the cloud computing [3], [4]. In this paper, the focus is on cloud Infrastructure-as-a-Service (IaaS), where infrastructure resources such as network, computing, database, etc. are offered by cloud providers.

Cloud providers usually offer two types of IaaS resource provisioning plans, reserved and on-demand plans, to web service providers that have different charging schemes based on the resource usage [5], [6], [7]. The reserved plans are often offered for relatively long-term contracts. Using reserved plans, web service providers can get discount rates on reserved resources and pay once for the contract time period (e.g., one-year contract or three-year contract for Amazon EC2) [8]. Through on-demand plans, cloud providers offer more flexible resource pricing strategies. On-demand plans charge cloud web service providers on a pay-as-you-go basis and enable them to start or terminate instances at any moment according to their needs without paying any penalty. However, comparing the costs of resources per unit of time, on-demand resources are often more expensive than the reserved ones.

With the reserved plans, web service providers reserve instances in advance for long-term contracts. Due to ignorance of demand uncertainty in the reserved plans, resource provisioning only with the reserved instances is a challenging task. The purchased resources may not be enough to handle the demands all the time that leads to under-provisioning. This may result in failure in meeting web service providers’ Quality of Service (QoS) criteria which is a crucial concern for both cloud providers and web service providers in presence of the uncertainty in the demands [9]. On the other hand, over-provisioning may happen if the allocated resources are excessive to handle actual arrived demands most of the time [1], leading to unnecessary costs.

Recently, some research studies have addressed cloud resource allocation, as optimizing resource provisioning costs has become important for cloud web service providers [9], [10], [11]. Most of the existing approaches in cloud resource allocation, model resource allocation problem as a single-phase algorithm [12], [13], [14], [15]. In these works, the authors ignore demand uncertainty by assuming deterministic values for demands. Therefore, the elastic nature of cloud-based applications is not considered. To address the demand uncertainties, in [16], [17], [18], [19], several dynamic resource allocation algorithms are developed. These algorithms are more flexible and allocate cloud resources dynamically to optimize resource provisioning costs. However, these works do not often exploit the cost benefits of the reserved plans that are offered by the cloud providers. Therefore, they may fail to achieve economical solutions.

In this paper, we propose a hybrid method to allocate cloud resources for deploying cloud-based web applications dynamically. We take advantage of reserved and on-demand resources and achieve a hybrid solution that minimizes total deployment cost and guarantees the QoS under demand uncertainties. The major contributions of this paper can be summarized as follows: Proposing Dynamic Cloud Resource Allocation (DCRA) algorithm that solves the resource provisioning in two reserved and dynamic provision phases, developing a stochastic optimization approach to model the user demands as random variables, and achieving 10 percent improvement in total deployment costs.

The proposed DCRA algorithm is evaluated using two different benchmark workloads in Amazon Web Services (AWS) [7] and Microsoft Azure cloud [6] as the cloud providers. The results show that the proposed DCRA algorithm finds solutions that minimize total deployment costs under the uncertainties in users’ demands.

The rest of this paper is organized as follows. Relevant existing resource allocation algorithms are discussed in Section 2. In Section 3, the system model and assumptions are explained. Section 4 provides the detailed explanation of the proposed DCRA algorithm. In Section 5, we present the results of experiments and data analysis using real price models and benchmark workloads. Finally, conclusion and future work are given in Section 6.

SECTION 2Related Works
The problem of cloud resource provisioning has brought researchers’ attention to providing resource allocation algorithms and techniques in the past few years [20], [21], [22], [23]. Most of the resource allocation works model the problem as a single phase algorithm that only considers resources with reserved plans from the cloud providers [24], [25], [26], [27]. These works either do not consider the uncertain nature of user's demands and denote the demand as a deterministic value [13] or simply use an expensive over-provisioning approach for the worst-case demand [12]. To cope with this problem, in [9], [28], [29], on-demand resource provisioning methods are proposed to allocate resources according to the dynamic cloud demand. In the following sections, the existing works are discussed in two deterministic resource provisioning and dynamic resource provisioning categories.

2.1 Deterministic Resource Provisioning
Jiao et al. developed a cost model for Online Social Network deployment [13]. The goal of this work is to optimize the monetary cost spent for using cloud resources while satisfying the QoS such as access latency. Considering that the modeled optimization problem is NP-hard, a heuristic algorithm is proposed to ensure the QoS requirements are met. However, the optimization is performed based on a deterministic demand of geo-distributed clouds and the work does not consider dynamic provisioning. Moreover, since the QoS requirements are based on the user location. If the location of the user is changed, the existing solution may not satisfy the QoS requirements anymore. Using a heuristic algorithm, the cost is optimized but the achieved solution may be only a local optimum. Similarly, in [27], a multi-objective algorithm is proposed to minimize total deployment cost and maximize the QoS performance at the same time, in spite of being competing objectives. This algorithm includes a single phase optimization that only considers the reserved cloud resources for deployment. In addition, the application demands are assumed to be deterministic and the elasticity of cloud environment is ignored. The results show that the proposed algorithm achieves the optimal resources for web application deployment.

In [12], Imai et al. proposed an application-agnostic performance modeling for a broad types of applications to minimize the cost. To enhance the prediction accuracy, a probabilistic prediction capability is added to the model to foresee the application performance. To meet the Service Level Agreement (SLA) such as latency violation, user's maximum throughput is considered to create a model. Although the results show that the demand changes can be covered by the proposed model, it cannot satisfy the SLA during the whole execution time. Also, the authors do not provide any analytical model for cost and SLA.

All these works consider deterministic approaches to model different resource allocation problems, that may lead to under- and over-provisioning. To this end, in this paper, a dynamic cloud resource allocation algorithm is proposed to allocate resources according to the dynamic user demands.

2.2 Dynamic Resource Provisioning
To handle the uncertainties in user demands, in [17], stochastic programming is used to propose the Optimal Cloud Resource Provisioning (OCRP) algorithm. OCRP algorithm minimizes total cost by achieving a trade-off between reservation and on-demand resources. Each stage of the algorithm may include three provisioning phases including reservation, expending, and on-demand phases. In the first phase, resources are provisioned without considering the users's demand. Demands and prices are observed in the expanding phase. In case that purchased resources cannot satisfy the demands, more resources will be purchased in on-demand phase. Since the uncertainty model is discrete, no convex optimization technique can be used, i.e, no global optimal solution can be guaranteed. Although a decomposition method is employed in the OCRP algorithm to solve the subproblems in parallel and save the runtime, it affects the algorithm's quality of results.

Similarly, Chaisiri et al. minimized the resource provisioning cost by proposing a Robust Cloud Resource Provisioning (RCRP) algorithm in [9]. The proposed RCRP provisions cloud resources in three phases. Three types of uncertainties are used in this work, which include the uncertainties in demand, price and cloud resource availability. In the first phase, reservation is done where a specific amount of resources is assigned to the application. The usage of resources is observed in the expending phase to recognize that resources are under- or over-provisioned. If reserved resources cannot satisfy the incoming demands, in the on-demand phase, further resources should be assigned in the form of on-demand resources. The results show that the RCRP algorithm obtains minimum on-demand costs compared to the existing works. However, since the proposed RCRP algorithm employs robust optimization, it takes a pessimistic approach that yields to a relatively high cost. In addition, this algorithm does not differentiate the computing and database cloud resource types in problem modeling.

In [28], Ran et al. proposed a cost-efficient provisioning strategy for resource allocation problem in distributed cloud environment. The objective of this work is to minimize the cost of purchasing resources and to maximize the profit by considering both demand and cost uncertainties. The proposed strategy includes two stochastic programming stages. First, the deterministic equivalent formulation is expressed to minimize the cost of purchasing Virtual Machines (VM). In the second stage, the profit is maximized by allocating the resources optimally. Although the deployment cost is minimized, the main focus of this work is just the dynamic resource allocation part and reserved instances are ignored.

Yu et al. proposed a virtual cloud allocation algorithm to minimize the bandwidth occupancy cost [29]. Stochastic virtual cluster is proposed by considering demand uncertainty to ensure the tenants’ bandwidth demands are satisfied. In this paper, normal distribution is considered to represent the bandwidth demand uncertainty. The proposed dynamic programming based allocation algorithm has exponential time complexity which makes it inefficient for applications that require a large number of VMs. To cope with this problem, a heuristic algorithm is developed to decrease the time complexity by considering limitation for the capacity of allocated VMs. Although the bandwidth cost is minimized, this work cannot guarantee to achieve the global minimum cost due to of the nature of heuristic algorithms.

In [26], the main goal is minimizing the total energy consumption. A stochastic linear programming model is developed in this work to provision cloud resources. The cloud service uncertainty and time variability are assumed in the proposed model. Monte Carlo simulations are used to produce the input parameters. The results show that this work can reduce the power consumption by up to 60 percent.

In this paper, we propose the DCRA algorithm to obtain the minimum total deployment cost in two reserved and dynamic provision phases. Also, an optimization approach is developed to consider cloud demand uncertainty to enable efficient dynamic cloud resource allocation for web applications. Compared to [9] and [17] that both take pessimistic approaches by employing worst-case robust optimization, we propose a stochastic optimization approach to obtain a balanced solution and avoid unnecessary costs due to pessimistic solutions. Unlike [28] where the decisions on reserved instances are left to the the web service providers and are never optimized, our proposed algorithm optimizes both required reserved and on-demand resources. Compared to [29] that propose a heuristic algorithm, we employ convex optimization that is efficiently solved and achieves a global optimum solution for resource provisioning. Finally, unlike the work proposed in [26] that considers the service uncertainty from the cloud provider's point of view, our proposed DCRA algorithm addresses the problem of dynamic cloud resource allocation from the cloud web service providers’ point of view.

SECTION 3System Model and Assumptions
In almost all the cloud providers such as Amazon [7] and Microsoft Azure [6], the reserved resources are secured through long-term (e.g., months or years) contracts, whereas on-demand resources are acquired for any arbitrary time period, typically in hours. We consider the reserved resources to have a one-time cost (independent of the time period) while the on-demand resources are charged for the time period they are utilized. To meet diverse demands, cloud providers supply different types of VMs with different resource configuration. The price of these resources differs by the subscription length, long-term or short-term. As exemplified, the Amazon pricing model [7] and the GoGrid [30] pricing model are presented in Table 1.

TABLE 1 AWS and Microsoft Azure Parameters for Reserved and On-Demand Resources

Since user requests for web applications are not deterministic, for cost efficiency, web service providers subscribe to a combination of reserved and on-demand cloud services [9], [15], [21]. However, existing cloud resource allocation works, fail to consider both reserved and on-demand resource types leading to under-provisioning or over-provisioning [25], [31]. In this paper, we propose a Dynamic Cloud Resource Allocation algorithm that minimizes the combined cost of reserved and on-demand cloud services. In DCRA, we consider the dual price model from the cloud provider and the QoS requirements from the web service provider. DCRA takes a realistic approach to cope demand uncertainty in cloud-based web service provisioning. This leads to a solution that maintains the web application performance under demand changes.

Fig. 1 illustrates where DCRA fits in the cloud-based web service deployment. The algorithm is deployed as a module on the primary server of the web service. This is usually a proxy or load-balancing server that is the first contact point (i.e, the server associated to the domain name in the URL). Using the proposed DCRA algorithm enables the web service providers to optimize the resource provision costs. This module takes as input the QoS requirements from the web service provider and the price model from the cloud service provider. It runs the DCRA algorithm to determine the optimal resource allocation. As will be shown in Section 5, the runtime of DCRA is relatively low, hence it can be effectively used to determine the resource allocation in real-time according to the changing demands.


Fig. 1.
A model of web service deployment in cloud.

Show All

3.1 Problem Definition
In this paper, parameters from the cloud provider and web service provider are considered to model the resource allocation problem. In order to meet various user demands, cloud providers supply different types of VMs with different resource configuration. In this paper, this information is collected as the input to the cloud deployment problem. Most cloud providers, such as Amazon [7], Microsoft Azure [6] and GoGrid [30], set the price of resources based on the two resource provisioning plans: reserved plan and on-demand plan. Therefore, two different prices are associated with the VMs in cloud models as explained below.

To model the cloud deployment problem from web service provider's point of view, in addition to the cloud providers’ information and pricing, the web service provider's application requirements should be integrated into the model. Different types of resource requirements and QoS performance criteria to support the web service providers’ application are explained below.

Parameters from cloud provider (algorithm inputs):
Prdb	
Price for reserved database instance ($)

Podb	
Pay-per-use price for on-demand database instance ($hour)

Prc	
Price for reserved computing instance ($)

Poc	
Pay-per-use price for on-demand computing instance ($hour)

Prs	
Price of storage for each reserved database instance ($GB)

PrIO	
Price of reserved Input/Output (I/O) request capacity ($)

PoIO	
Pay-per-use price for on-demand I/O request capacity ($)

Rrc	
Number of requests per hour a reserved computing instance can handle (1hour)

Roc	
Number of requests per hour an on-demand computing instance can handle (1hour)

Rrdb	
Number of requests per hour a reserved database instance can handle (1hour)

Rodb	
Number of requests per hour an on-demand database instance can handle (1hour)

Parameters from web service provider (algorithm inputs):
dt	
Total deployment service time (hour)

dp	
Dynamic cloud provisioning duration (hour)

rminc	
Minimum number of user requests per hour for computing servers (1hour)

rmindb	
Minimum number of user requests per hour to access the database servers (1hour)

tdb	
Maximum time for accessing database server (s)

tc	
Maximum time for serving a user request (s)

s	
Required storage for web application (GB)

Problem varibales (algorithm outputs):
αoc	
Number of on-demand computing instances

αrc	
Number of reserved computing instances

βodb	
Number of on-demand database instances

βrdb	
Number of reserved database instances

μrs	
Required storage for each reserved database instance GB)

γoRc	
Minimum on-demand service rate given by computing instances (1hour)

γrRc	
Minimum reserved service rate given by computing instances (1hour)

λoRdb	
Minimum on-demand service rate given by database instances (1hour)

λrRdb	
Minimum reserved service rate given by database instances (1hour)

SECTION 4Dynamic Cloud Resource Allocation Algorithm
In contrast to existing cloud resource allocation algorithms [14], [32], we aim to provide dynamic cloud resource allocation that considers the dual price plan from cloud providers and finds the balance between reserved and on-demand resources. In this section, we propose Dynamic Cloud Resource Allocation algorithm, a two-phase algorithm that minimizes the cost of the web service deployment. In the first phase (referred to as the reservation phase), resources from the reserved plan are allocated for web application deployment to meet the minimum QoS requirements. In the second phase (referred to as the dynamic provision phase), non-deterministic user demands are modeled as random variables. A stochastic optimization approach is proposed to dynamically allocate on-demand resources to minimize deployment costs under the on-demand plan subject to QoS requirements.

4.1 DCRA Flowchart Overview
Due to the uncertain nature of the demand, we propose DCRA, a two-phase resource allocation algorithm that reserves computing and database instances according to the dual price plan to cost-effectively handle the dynamic changes in the demand. The two phases of DCRA, namely, reservation phase and dynamic provision phase, are presented in Fig. 2. Cloud providers offer certain amount of resources as reserved resources to web service providers in form of long-term contracts at lower prices (under the reserved plan). For example, Amazon EC2 [7] reserved plan is available in one-year or three-year contracts while GoGrid [30] offers annual and monthly contracts. In the reservation phase, the algorithm determines the minimum resources to meet the minimum user requests rmin (in requests per hour) for the web services. Note that rmin is given as an input by the web service provider just once at the beginning of the deployment service time and is never calculated nor updated later. Therefore, including it into the input parameters does not lead to any extra overhead. More specifically, the cloud resource reservation optimization model takes the minimum requests rmin as the input and outputs the minimum required cloud resources (computing and database instances). The reservation optimization is modeled using a geometric programming approach, as will be detailed in Section 4.2. The output of the optimization model is fed to the resource control unit to reserve the resources in advance at a flat rate to provide the minimum QoS guarantee.


Fig. 2.
Flowchart of dynamic cloud resource allocation (DCRA) algorithm.

Show All

In the dynamic provision phase, the DCRA algorithm monitors the actual user demands for the web application for a time period dp (e.g., a 15-minute period). Although for DCRA, very short time periods dp can be considered as the algorithm takes a very low runtime, 15-minute is a reasonable choice for dp as it is close to the length of the monitoring period of the major public cloud providers’ scaling tools, e.g., [33]. As the DCRA's runtime is relatively low, the runtime bottleneck for having a shorter dynamic cloud provisioning duration is the time needed to provision and boot a new cloud instance. If setting up a new cloud instance takes a few minutes, then, it does not make sense to have a dynamic cloud provisioning duration dp shorter than that. In addition, most of the major public cloud providers charge the full hour price for a cloud instance, no matter if it has been used for 1 second or 59 minutes. Therefore, in case of over-provisioning, having shorter dynamic cloud provisioning durations does not really help the deployment costs. However, it can help in the case of under-provisioning where new cloud instances can be secured as soon as the user demands grow.

As described in Fig. 2, if the monitored average user requests ravg exceeds the minimum expected requests, rmin, the web application is under-provisioned. DCRA applies the dynamic provision optimization to secure on-demand resources to meet the dynamic demands. This optimization model takes the average requests ravg as the input and outputs the minimum required on-demand cloud resources (computing and database instances). Dynamic cloud provision optimization is modeled using a stochastic optimization approach, as will be detailed in Section 4.3, to achieve solutions that are robust to the uncertainties in the user demands. The output of the optimization model is fed to the resource control unit to secure the on-demand resources at higher costs to meet the actual demand. The next round of dynamic provision begins again with the monitoring. The output of each iteration of the algorithm is a solution with minimum total deployment cost that maintains the QoS under demand uncertainty. In reality, the demand may increase or decrease over time. In DCRA, as long as the observed requests ravg is higher than rmin, it leaves it to the dynamic provision optimization to dynamically adjust the provisioning of the on-demand resources. In case, the observed requests ravg is lower than rmin, all on-demand resources should be turned off, and the resources from the reservation phase should be adequate to satisfy the demands.

Overall, DCRA determines and allocates cloud resources dynamically to provide a flexible optimization that meets the QoS requirements of the web application under demand uncertainty with a minimum cost solution. In this paper, we focus on developing and solving the two major optimization blocks: reservation optimization and dynamic provision optimization. The resource control unit and monitoring are often provided by the cloud providers.

4.2 Cloud Resource Reservation Optimization
In this paper, the resource reservation optimization is proposed to help web service providers to make business decisions and obtain optimal solutions for their reserved resources. In the reservation phase, our goal is to secure the resources to meet the minimum QoS requirements with minimum cost. Since the DCRA is designed based on the dual price model from the cloud provider, this phase takes the price model from the reserved plan and the minimum user request rmin as inputs. We employ geometric programming [25] to model the optimization problem as follows:
min.βrdb×Prdb+βrdb×Prs×μsr+αrc×Prc+[λrRdb+γrRc]×PrIO×dt.(1)
View Source

The cost function is defined according to the cloud providers’ reserved pricing model. The deployment cost in Eq. (1) includes the cost of reserved database instances (term 1), the cost of required storage for reserved databases (term 2) and the cost of reserved computing instances (term 3) for a long-term contract dt (e.g., one-year). For the storage term, we assume that the storage required by the computing instances are negligible because they either process the requests or query the database instances. Thus, the storage requirement is associated with the database instances only. Communication of reserved computing and database servers for the given contract period dt is also considered (term 4). The reserved resources’ communication costs are calculated based on the usage over time [7]. For the communication cost, the cost is associated with the duration of the service dt because the request rates are in request per hour. This formulation is subject to a set of constraints explained in the following paragraphs. Collectively, we wish to minimize the total cost of the resources but also need to meet several constrains.
αrc×Rrc≥rminc(2)
View Source
βrdb×Rrdb≥rmindb.(3)
View Source

As defined in Eqs. (2) and (3), we first need to ensure that we secure sufficient database instances and computing instances such that their respective service rate meet the minimum requests for database service rmindb and the minimum requests for computing service rminc. The Rrdb and Rrc are the maximum service rate of each database instance and computing instance, respectively.
1γrRc1−rmincγrRc≤tc(4)
View Source
1λrRdb1−rmindbλrRdb≤tsdb.(5)
View SourceRight-click on figure for MathML and additional features.

The web application request arrival rate follows a Poisson process as shown in [31]. Considering the dependency between arrival rate and response time of VM instances, the constraints in Eqs. (4) and (5) are defined to ensure the achievable service rates by computing instances γrRc and database instances λrRdb meet the expected response time constraints for the computing requests tc and database requests tdb, respectively. The conversion from service rate to response time is based on the model proposed in [31].
βrdb×μrs≥s.(6)
View SourceRight-click on figure for MathML and additional features.

Storage constraint in Eq. (6) controls that the reserved storage space for web application is sufficient.
αrc+βrdb≥1(7)
View Source
αrc∈{0,1,2,…}(8)
View Source
βrdb∈{0,1,2,…}.(9)
View Source

To start deploying the web application, web service provider should purchase at least one reserved database or computing instance that is expressed by the constraint in Eq. (7). Integer constraints Eqs. (8) and (9) indicate that computing and database variables take values from a set of non-negative integer numbers.

In the reservation phase of DCRA algorithm, the cloud resource reservation optimization is formulated and solved. Although the resource reservation optimization is not originally GP, it can be converted to GP form and be solved using convex optimization techniques [25]. This phase outputs an optimal cost combination of reserved resources that meets the minimum demands while meeting the QoS requirements. However, considering the elasticity of cloud applications and the demand uncertainty, such solution will not provide a robust performance during the deployment time. Therefore, in the next section, a novel dynamic cloud provision phase for the DCRA algorithm is proposed.

4.3 Dynamic Cloud Provision Optimization
The uncertaint nature of user demands for web applications in cloud environment makes any deterministic resource allocation optimization inadequate to satisfy web service provider's QoS. In other words, it is simply unrealistic to assume an a-priori deterministic constant value for the user demands to a web application. According to [9], [22], [29], [34], [35], the web application demand uncertainty can be modeled by a normal distribution. To cope with the demand uncertainty, we adopt a stochastic optimization approach considering random variables with normal distributions for the user demands. Therefore, in this phase of DCRA, we define the user demands as random variables, which is the key to robustness against demand uncertainty. The solution allows web service providers to dynamically secure on-demand resources in cloud according to the actual incoming demands.

The optimization variables are the number of on-demand computing and database instances and their minimum service rates to meet the updated request, ravec and ravedb, are received from the monitoring unit of DCRA algorithm. It is important for the web service providers to minimize the on-demand resources’ costs during the given deployment period dp which is considered as the problem minimization objective of the dynamic cloud provision optimization. (βodb×Podb) and (αoc×Poc) represent the per-time cost of all on-demand database and computing instances. The cost of communications between on-demand computing and database servers are modeled in the on-demand deployment cost as (λoRdb+γoRc)×PoIO. Thus, the cost minimization objective function for the dynamic cloud provision optimization is defined as follows:
min.(βodb×Podb+αoc×Poc+[λoRdb+γoRc]×PoIO)×dp.(10)
View SourceRight-click on figure for MathML and additional features.

This formulation is subject to a set of constraints. To avoid under-provisioning and over-provisioning, demand uncertainty is considered in Eqs. (11) and (12) using a stochastic optimization approach. Based on [9], [22], [29], [34], [35], we model the demand uncertainty of database and computing resources (beyond the service guaranteed by the reserved plan) as random variables that follow normal distributions with expected values of ravec and ravedb and standard deviations of σrc and σrdb, respectively. To ensure that the demands are met with 95 percent confidence interval, we meet the constraints for all realizations of the uncertain demands up to 2σ above the expected value [36]. In Section 5.3, we provide justification on the selection of this value. Note that the number of reserved computing and database instances that are obtained in the reservation phase are considered as constant values, Nrdb and Nrc, in this phase.
(αoc+Nrc)×Roc≥ravec+2σrc(11)
View Source
(βodb+Nrdb)×Rodb≥ravedb+2σrdb.(12)
View Source

The constraints on response time of computing and database instances are modeled in Eqn. 13 and Eq. (14). In these constraints, the demand uncertainty is considered to ensure that the secured reserved and on-demand instances satisfy web service providers’ QoS performance requirements.
1γoRc+RrRc1−ravec+2σrcγoRc+RrRc≤tc(13)
View Source
1λoRdb+RrRdb1−ravedb+2σrdbλoRdb+RrRdb≤tdb.(14)
View Source

By adding constraints Eqs. (15) and (16), we indicate on-demand computing and database instances are integers to guarantee physically meaningful solutions.
αco∈{0,1,2,…}(15)
View Source
βdbo∈{0,1,2,…}.(16)
View SourceRight-click on figure for MathML and additional features.

In each iteration of the dynamic provision phase of DCRA algorithm, the dynamic cloud provision optimization is formulated and solved. This phase outputs a cost-efficient and robust combination of on-demand cloud resources that meets the web service providers’ QoS requirements under user demand uncertainty. This matches the inherent indeterminism and elasticity in cloud web applications and addresses the shortcomings of existing deterministic cloud resource allocation models [14], [25], [31], [32].

With the proposed DCRA algorithm, we are able to minimize deployment costs of web application in the cloud, even with demand uncertainty. With the cloud resource reservation optimization, reservation cost is minimized as the minimum expected demands are assumed to be known a-priori. Then, the additional on-demand resources can be provisioned instantly with the dynamic cloud provision optimization when the reserved cloud resources are insufficient to accommodate the incoming demands.

SECTION 5Performance Analysis
In this section, the merits of the proposed algorithm are illustrated by analyzing the experimental results.

5.1 Experimental Setup
In our evaluation, any cloud computing environment can be used but we use two popular cloud providers, Amazon Web Services [7] and Microsoft Azure [6], to acquire cloud resources for web application deployment. Both reserved and on-demand instances from AWS and Microsoft Azure are considered for resource provisioning. Under the uncertainty of users’ demands, a combination of reserved and on-demand resources is employed to deploy the cloud web application and satisfy the QoS constraints. The experiments were run on an OS X El Capitan machine with 8 GB of memory and 1.6 GHz Intel Core i5 processor. We have developed a limited cloud environment simulator to test our proposed algorithm. The proposed DCRA algorithm as well as the experimental algorithms are developed using C++ programming language. To solve the optimization problems formulated as part of the proposed algorithm, Mosek 6.0 [37] solver is used.

Simulation setup is developed in C++ environment. The arrival rate of user demands is modeled based on the queueing theory-based model presented in [31]. To model cloud resource behaviors, the providers’ performance data from the cloud providers’ web sites [6], [7] are used. Moreover, the average time to respond to a single user request is derived based on the providers’ specifications of resources as well as the average data transfer size of typical computing and database user requests for the given web application workload scenario.

AWS and Microsoft Azure provide reserved and on-demand instances with different characteristics and pricing strategies. In Table 1, pricing of the resources offered by these cloud providers is summarized. As shown in this table, the reserved resources and on-demand resources pricing from AWS provider are presented in columns 2 and 3 and from Microsoft Azure provider are in columns 4 and 5, respectively. In this paper, Amazon EC2 general purpose t2.small [8] and Amazon RDS standard instance db.t2.small [38] are considered as computing and database instances, respectively. From Microsoft Azure provider, standard virtual machines D1 instance [39] and storage optimized virtual machine L4 instance [40] are used as computing and database instances, respectively. These instances are used since they are relatively comparable instances from the performance/cost point of view and enable us to fairly compare between the solutions in the two different cloud environments. However, any instance types from any cloud provider can be used depending on the web service providers’ preferences. For reserved resources, both AWS and Microsoft Azure offer one-year and three-year contracts. In this experiment, the price of a one-year contract is used for the reserved instances, while on-demand resources are charged hourly. In rows 2 and 3, the price of database and computing instances are presented. As storage requirements are rather static than dynamic, the storage is only considered for reserved plans based on the provider characteristics. Therefore, the cost of a one-year contract of storage per GB is presented. In row 5, communication costs for reserved and on-demand instances are given. The service rates, i.e., the number of requests a virtual machine can handle per hour, for a single computing instance and a single database instance are presented in rows 6 and 7, respectively. These service rates are calculated by dividing the instance dedicated throughput by the average file size for a user request which is the average amount of data that should be processed for a user request.

As seen in Table 1, the selected AWS instances offer a relatively higher performance compared to the selected instances from Microsoft Azure. However, the one-year contract cost of the AWS reserved instances are more expensive compared to Microsoft Azure. For on-demand resources, the hourly cost for the AWS database instances are higher than Microsoft Azure, but the hourly cost of the computing instance for Microsoft Azure is higher than the AWS. Therefore, the selected instances from the two cloud providers are relatively comparable when considering both performance and reserved/on-demand costs. This enables us to have a fair comparison of the solutions in the two cloud environments.

The workload models that are considered in these experiments are divided into two distinct workload benchmarks. Each of these workload benchmarks has different characteristics, demands and QoS constraints. These benchmarks are implemented as the web services of the real workloads [41]. The first workload benchmark (RUBiS) is based on a simulator that characterizes an auction website [41]. To emulate the real users’ behavior for RUBiS workloads, a client browser emulator is used. In [41], to extract a set of workload benchmarks (SPEC), a simulator is generated to produce a multi-tier application server. In this server, the simulator considers the direct communications of a web application with the application servers in a data center. To show the effectiveness of our proposed algorithm, we scaled seven different scenarios from these workloads to represent web applications with large-scale demands. Table 2 lists the required resources and QoS constraints for each scenario.

TABLE 2 The Input Parameters from Seven Different Workload Scenarios

Column 2 of Table 2 presents the required storage for each scenario. In columns 3 and 4, the web service providers’ minimum database and computing requests are shown. The maximum response time to satisfy web service providers’ QoS criteria for database and computing instances are given in columns 5 and 6.

Additional requirements for dynamic provision phase are explained in Table 3. These data have been extracted by fitting the workloads’ data to a normal distribution to simulate the uncertainties in the user demands. The extracted mean (columns 2 and 3) and standard deviation (columns 4 and 5) of the fitted normal distribution are used as inputs to the dynamic provision phase.

TABLE 3 The Input Expected Values and Standard Deviations of User Demands for the Workload Scenarios to be Used in the Dynamic Provision Phase

The cloud resource allocation solutions of the proposed DCRA algorithm are compared with two existing works, QCost algorithm [25] and RCRP algorithm [9]. The QCost algorithm, which is a single phase algorithm, is chosen to show the effectiveness of our first contribution to exploit a combination of reserved and on-demand instances in DCRA algorithm. The other algorithm we compare our work with is RCRP algorithm which is the most comprehensive existing work on dynamic provisioning. This algorithm benefits from the advantages of both reserved resources and on-demand resources which makes it a fair choice to compare our proposed DCRA algorithm with. The performance comparisons are performed based on several metrics, e.g., the total deployment costs, QoS, and runtime. The intermediate solutions of each phase as well as the overall results are analyzed in detail in the following sections.

5.2 Numerical Results
Several experiments have been carried out on the mentioned workload scenarios to analyze the effectiveness of the proposed algotithm. We start with evaluating the first contribution of this paper that is exploiting combination of reserved and on-demand resources in the DCRA algorithm.

The solutions of the proposed DCRA algorithm for seven scenarios are presented in Tables 4 and 5 for deployment in AWS and Microsoft Azure cloud environments, respectively. These tables present the DCRA solutions for the resources allocated during the reservation phase and dynamic provision phase separately. In these tables, the number of required computing and database instances allocated by the reservation phased are shown in Columns 2 and 3 while the number of computing and database instances secured by the dynamic provision phase are shown in Columns 5 and 6. The required amount of storage for each reserved database instance is presented in Column 4. As seen in these tables, the number of required computing and database instances in Microsoft Azure are generally larger than those in AWS environment. This is expected because the selected instances in Microsoft Azure have a lower rate of request handling than the selected AWS instances.

TABLE 4 The Solutions of the Proposed DCRA Algorithm for Deployment in AWS Cloud Environment

TABLE 5 The Solutions of the Proposed DCRA Algorithm for Deployment in Microsoft Azure Cloud Environment
Table 5- 
The Solutions of the Proposed DCRA Algorithm for Deployment in Microsoft Azure Cloud Environment
One main contribution of this paper is developing the reservation phase and dynamic provision phase and integrating them to achieve a hybrid solution of reserved and on-demand resources. To evaluate these solutions, the costs of reservation and dynamic provision phases for both AWS and Microsoft Azure cloud providers are compared in Fig. 3a and 3b. As expected, the costs of DCRA solutions are different since cloud providers offer different pricing models and performance characteristics for their resources. As shown in Fig. 3b, since the unit cost of the on-demand resources are higher than reserved resources for deployment in AWS cloud provider, the DCRA algorithm finds solutions that invest more in reserved resources to decrease the total deployment costs. In Fig. 3b, the comparison of the reserved and dynamic costs of Microsoft Azure represents that the DCRA selects a relatively larger number of on-demand resources to minimize the total deployment costs which is due to the different pricing model. The integration of reservation phase and dynamic provision phase is important for the web service providers as it enables them to exploit both pricing plans and their flexibilities. The largest total deployment costs are observed for the RUBiS3200 workload scenario where, the DCRA selects 54 reserved instances and 30 on-demand instances for deployment in AWS, while in Microsoft Azure, 112 reserved and 60 on-demand instances are used.


Fig. 3.
Comparing the costs of the DCRA algorithm's reservation phase and dynamic provision phase solutions.

Show All

To compare the results of the DCRA algorithm for AWS and Microsoft Azure cloud providers, the total deployment cost of the DCRA algorithm that is the summation of the cost of reserved and dynamic provision phases are shown in Columns 2 and 5 of Table 6. The database QoS and computing QoS for the DCRA algorithm are presented in columns 3 and 6, and 4 and 7, respectively, in terms of instance response times. The instance response times demonstrate that the achieved QoS for database and computing instances are way below the maximum allowed response times and meet the QoS requirements set by the web service providers.

TABLE 6 Evaluation of the Solutions of the Proposed DCRA Algorithm in Terms of Total Deployment Costs, and QoS for Deployment in AWS Cloud Environment and Microsoft Azure Cloud Environment
Table 6- 
Evaluation of the Solutions of the Proposed DCRA Algorithm in Terms of Total Deployment Costs, and QoS for Deployment in AWS Cloud Environment and Microsoft Azure Cloud Environment
To better illustrate the effectiveness of our proposed two-phase DCRA algorithm, a recent existing algorithm that solves the resource allocation problem in one single phase, QCost [25], is considered. To have a fair comparison and in order to enable QCost to handle the dynamic user demands, the QCost algorithm and DCRA's dynamic provision phase are run for 15-minute periods. Therefore, for QCost algorithm, only one type of cloud resources, i.e., on-demand resources, can be considered.

We use QCost and DCRA algorithms to solve the cloud resource allocation problem for the workload benchmarks. In Fig. 4, the solutions from the proposed DCRA algorithm and QCost algorithm are evaluated. In Fig. 4a the DCRA and QCost are compared in terms of total deployment cost. Response times (QoS criteria) of database and computing instances are presented in Fig. 4b and 4c, respectively. The evaluations in terms of total deployment cost clearly show that QCost over-provisions resources to handle the user demands. This can be observed by considering the QoS criteria of the QCost solutions which are significantly lower than the QoS constraints set by the web service providers in Table 2. DCRA algorithm on the other hand, provides more economical solutions to the web service providers by exploiting a combination of cheap but less flexible reserved resources with expensive pay-as-you-go on-demand resources.


Fig. 4.
Comparing the solutions of the proposed DCRA algorithm and QCost algorithm.

Show All

The results show a modest reduction in total deployment cost by avoiding over-provisioning while DCRA solutions still comfortably meet the QoS constraints. Although when comparing the QoS criteria, the DCRA solutions may seem inferior compared to the QCost solutions, as we will show in the next section, they are more robust to the demand uncertainties and meet the QoS constraints in a significantly larger number of uncertainty realizations. The largest improvement in total deployment cost is achieved for RUBiS3200 (15 percent). For this scenario, the DCRA achieves the database QoS of 0.79s and the computing QoS of 0.17s which are lower than the allowed maximum times set by the web service provider, 6.80s and 4.50s for database and computing instances, respectively. The proposed DCRA on average obtains 10 percent improvement in total deployment cost compared to QCost.

In the next experiment, to show the effectiveness of the proposed DCRA algorithm in provisioning resources dynamically, a comparison among the proposed DCRA and one of the pioneer existing works that considers dynamic resource provisioning is performed and the results are presented in Table 7. This existing work is known as the robust cloud resource allocation algorithm [9]. The RCRP algorithm models the resource allocation problem as a robust optimization problem to deal with the demand uncertainties. Also, both reserved and on-demand virtual instances are considered in RCRP algorithm to exploit both pricing plans.

TABLE 7 Comparison between the Solutions of the Proposed DCRA Algorithm and the RCRP Algorithm

As shown in Table 7, the cost of RCRP algorithm's solution is consistently higher than the cost of the proposed DCRA algorithm's solution in all the scenarios (22.7 percent on average). The reason is that the RCRP algorithm is modeled as a robust optimization problem taking a pessimistic approach. Therefore, to provide reliable solutions, the worst-case scenarios are considered by the RCRP algorithm leading to relatively higher cost compared to the proposed DCRA algorithm. On the other hand, our proposed DCRA algorithm employs a stochastic approach to consider the demand uncertainties as random variables and optimizes based on the distribution rather than the worst-case scenarios. Therefore, it reduces the cost of virtual machine instances while still achieving reliable solutions. Although the DCRA's response times are slightly larger than RCRP by around 1.5 percent for database and 2 percent for computing instances, they are still well below the web service provider's QoS requirements.

5.3 Demand Uncertainties
Another major contribution of this paper is developing a stochastic optimization approach to handle the uncertainties in the user demands. The goal is to obtain cloud resource allocation solutions that are robust to the changes in the user demands. Therefore, DCRA models the demands as random variables that follow normal distributions. Taking a pessimistic but reliable approach, we optimize for a 2σ (2 × standard deviation) range when solving the dynamic cloud provision optimization to guarantee meeting the constraints for around 95 percent of realizations of the uncertain user demands [36]. In this section, we have conducted a series of experiments to verify the effectiveness of this contribution by comparing DCRA with the QCost as a deterministic optimization approach where user demands are assumed to be constant values during optimization.

We perform Monte Carlo simulations [42] to simulate real-world scenarios where user demands change over the deployment time. Monte Carlo simulations are often used to evaluate the solutions of the problems with uncertain nature [17], [28], [43]. By running a large number of Monte Carlo simulations (e.g., 1000 times), we can evaluate the performance of both DCRA and QCost algorithms in presence of demand uncertainties. Both algorithms are tested using the experimental algorithm presented in Algorithm 1.

Algorithm 1. Monte Carlo Simulations
Input: Cloud resource optimization solution, rave and σ

Output: #demandViols and #QoSViols

set #experiments 0

set #demandViols 0

set #QoSViols 0

while #experiments <= 1000 do

generate a random demand following a normal distribution with mean rave and std. dev. σ

if web service provider demand constraints violated then

#demandViols++

if web service provider QoS constraints violated

then

#QoSViols++

#experiments++

return #demandViols and #QoSViols

The input parameters to the Monte Carlo Simulations algorithm are the cloud resource optimization solution of DCRA algorithm or QCost. As user demands to the web application are random variables following normal distributions, the demand's mean and standard deviation are also considered as the input parameters to the algorithm presented in Table 3. In the first step of Algorithm 1, the number of performed experiments is initialized to 0. Similarly, the number of violated demand and QoS constraints are initialized to 0 in steps 2 and 3. In each of the 1000 iterations of the while loop in step 4, a Monte Carlo simulation is run. For each simulation, first a random demand is generated according to the given random variable's distribution (step 5). Then, under the generated demand, we evaluate and check if the solution meets the user demand and QoS constraints, in steps 6 and 8. The number of uncertainty realizations that lead to violated constraints is recorded and output as a measure to evaluate the performance of a solution under demand uncertainties. The lower the number of the violations are the more robust the solution is to the uncertainties in the user demands.

Based on the web service provider's preference, our DCRA algorithm can be modified to take a more pessimistic or less pessimistic approach. However, there is indeed a trade-off between the on-demand resource costs and robustness of the achieved solutions. To demonstrate this trade-off, in Table 8, we present the results of an experiment where different multipliers for the standard deviation σ are used to see how they impact the total on-demand costs and the number of constraint violations. In this experiment, we use the multipliers 1 (68 percent distribution coverage), 2 (95 percent distribution coverage), 3 (97 percent distribution coverage), 4 (99 percent distribution coverage), 5 (almost 100 percent distribution coverage), and 6 (almost 100 percent distribution coverage) for the standard deviation σ. According to this table, our chosen default multiplier, 2, provides a relatively balanced trade-off between the cost and the robustness of the solution. However, it is a web service provider's decision to choose the best trade-off for the application based on the criticality and budget availability.

TABLE 8 The Trade-Off between Total On-Demand Costs and Solution Robustness for 1000 Monte Carlo Simulations
Table 8- 
The Trade-Off between Total On-Demand Costs and Solution Robustness for 1000 Monte Carlo Simulations
The results of running Monte Carlo simulations of Algorithm 1 for the solutions of the proposed DCRA and the QCost algorithms are compared in Fig. 5. In this figure, we can observe the effectiveness of our stochastic optimization approach to make the DCRA solutions more robust to the demand uncertainties compared to a deterministic algorithm such as QCost. The QCost solutions violate the constraints in around 50 percent of the realizations of the uncertain demand. DCRA solutions however only fail to meet the constraints in about 2 percent of the realizations which demonstrate the solution's robustness. This significant robustness improvement is achieved while the DCRA solutions also have lower deployment costs as they avoid over-provisioning.


Fig. 5.
Comparison of the results of Monte Carlo simulations (Algorithm 1) for the solutions from the proposed DCRA and the QCost algorithms.

Show All

5.4 Industry Case Study
In order to show the consistency between the performance of the proposed algorithm on the simulated workload scenarios and real-world testcases, an industrial workload testcase of the PYXIS WorldView from the PYXIS Innovation Inc. [44] is used in this experiment. PYXIS WorldView uses Microsoft Azure cloud as the public cloud provider. The input parameters from this workload testcase are presented in Table 10. The proposed DCRA algorithm is used to dynamically allocate resources for this workload testcase and the results are reported in Table 9. The DCRA algorithm allocates 10 reserved database and 13 reserved computing instances. It then allocates 6 on-demand database and 7 on-demand computing instances to handle the actual incoming demands in the testing period. During this deployment time the database and computing response times are well below the given limits with the maximum of 0.7s and 1.2s, respectively. Note that the reported total deployment costs in Table 9 are the estimated total deployment costs for one year of web application deployment which is below the allocated budget limit.

TABLE 9 The Solution of the Proposed DCRA Algorithm for PYXIS WorldView [44] Deployment in Microsoft Azure Cloud
Table 9- 
The Solution of the Proposed DCRA Algorithm for PYXIS WorldView [44] Deployment in Microsoft Azure Cloud
TABLE 10 The Input Parameters from PYXIS WorldView [44] Workload Testcase

5.5 Runtime
In dynamic resource allocation, the turnaround time is critical due to the elasticity of the cloud environment. For our proposed DCRA algorithm to be practically used for dynamic resource allocation, it should maintain a low runtime. To visualize the runtime impact of solving resource allocation problem in two steps, in Fig. 6, the runtime of the DCRA algorithm is compared to the RCRP algorithm and QCost algorithm.


Fig. 6.
The runtime comparison between the proposed DCRA algorithm, RCRP algorithm and the QCost algorithm.

Show All

As seen in this figure, for both algorithms there is not an obvious counterbalance between user demands increase and the runtime. This is because, the size of the demands does not affect the number of variables and constraints of our proposed optimization problems. The runtime to solve a convex optimization problem depends on the number of problem variables and constraints which are constant for our proposed algorithm and do not change with the size of user's demands. However, this runtime also depends on the tightness of the problem's constraints which explains the runtime changes in this figure. Although the DCRA algorithms includes two steps, we only go through one step at a time and we only solve one optimization problem (either cloud resource reservation optimization or dynamic cloud provision optimization) each time. Our DCRA runtime is lower than QCost for every single workload scenario, on average 45% improvement. DCRA runtime is also shorter than the RCRP. This shows that the proposed DCRA can dynamically allocate resources to a web application considering the average runtime is 0.07s.

SECTION 6Conclusion
A cost-efficient dynamic provisioning algorithm for cloud-based web applications in cloud environment is proposed that focuses on optimizing the total provisioning costs while considering the uncertainties in the user demands. The proposed DCRA is modeled in two-phases: reservation and dynamic provision phases. To evaluate the performance of DCRA, simulations have been performed for different workload scenarios. The results show that the proposed algorithm can achieve reliable and cost-effective solutions using a dynamic combination of reserved and on-demand resources for deploying cloud-based applications. The combination of solutions of both reservation and dynamic provision phases saves the total provisioning costs significantly. In addition, the proposed DCRA is cloud provider independent and can be used for major cloud providers such as AWS [7], Microsoft Azure [6], and GoGrid [30]. The future work may be expanding the DCRA to dynamically allocate resources to applications from multiple cloud providers to achieve lower costs and better redundancy. Moreover, an integrated monitoring procedure can be added into DCRA algorithm.

ACKNOWLEDGMENTS
This research is supported by the Natural Sciences and Engineering Research Council of Canada and Alberta Innovates Technology Futures. The binary executable of this work isreleased here: “https://www.ucalgary.ca/mireslami/publications”

Appendix
A.1 Geometric Programming
Geometric Programming (GP) is a class of optimization problems with the general form as [45]:
mins.t.f0(x)fi(x)≤1, i=1,…,nhi(x)=1, i=1,…,m(17)
View SourceRight-click on figure for MathML and additional features.if the objective function, f0(⋅) and inequality constraint functions fi(⋅) are posynomials and equality constraint functions hi(⋅) are monomials. A monomial is a function in the form of:
g(x)=cxα11xα22⋯xαnn,(18)
View SourceRight-click on figure for MathML and additional features.where the coefficient c is a positive real number, exponents, α1,…,αn, are real numbers and x1,x2,…,xn are non-negative variables. Then, a posynomial function is defined as a summation of monomials.

The advantage of GP is that it can handle non-linear functions encountered in complex engineering problems. Furthermore, although GP is not a convex optimization problem, it can be converted to a convex form [45].

A.2 Stochastic Optimization
Although there are uncertainties in variable and parameters of many optimization problems, usually, the variables and parameters are assumed as deterministic values in the problem modeling. The classic optimization techniques achieve nominal solutions and ignore uncertainties. The obtained nominal solutions can lead to infeasibility and constraint violation because of the parameters’ fluctuation. Stochastic optimization is a popular approach in most of the applications that involve uncertainties and indeterministic variables. Stochastic optimization provides optimal solutions considering the parameters and variables with uncertainties as random variables. In stochastic optimization, the variables and parameters’ uncertainties are characterized by specific probability distributions. The general form of a single variable linear programming problem is expressed as:
min.h(x)s.t.k(x)≤0,(19)
View Sourcewhere the problem objective is h(.), k(.) represents the constraints and x is the problem variable. Then, a stochastic optimization formulation can be written as:
min.E[h(x˜)]s.t.E[k(x˜)]≤0,(20)
View SourceRight-click on figure for MathML and additional features.where E[.] is the expected value operator. This stochastic optimization formulation minimizes the expected value of the objective function by considering the probability density function of the random variable x˜.

Although robust optimization can also be used in applications that include uncertainties, it is a pessimistic approach that considers the worst-case realizations of the uncertainties. However, stochastic optimization finds the more realistic and general solutions by imposing the probability distributions that parameters follow. Therefore, stochastic optimization is more effective when the uncertainties are probabilistic and a distribution is known for them.