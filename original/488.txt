With proliferation of computation-intensive Internet of Things (IoT) applications, the limited capacity of end devices can deteriorate service performance. To address this issue, computation tasks can be offloaded to the Mobile Edge Computing (MEC) for processing. However, it consumes considerable energy to transmit and process these tasks. In this paper, we study the energy efficient task offloading in MEC. Specifically, we formulate it as a stochastic optimization problem, with the objective of minimizing the energy consumption of task offloading while guaranteeing the average queue length. Solving this offloading optimization problem faces many technical challenges due to the uncertainty and dynamics of wireless channel state and task arrival process, and the large scale of solution space. To tackle these challenges, we apply stochastic optimization techniques to transform the original stochastic problem into a deterministic optimization problem, and propose an energy efficient dynamic offloading algorithm called EEDOA. EEDOA can be implemented in an online manner to make the task offloading decisions with polynomial time complexity. Theoretical analysis is provided to demonstrate that EEDOA can approximate the minimal transmission energy consumption while still bounding the queue length. Experiment results are presented which show the EEDOA’s effectiveness.
SECTION 1Introduction
With the prosperous development of Internet of Things (IoT), the number of computation-intensive applications running on the IoT devices becomes ever-increasing [1], [2]. These computation-intensive applications typically require powerful computing capacity and it incurs high energy consumption to process them locally on the devices, whereas the computing and battery capacities of the IoT devices are limited. To tackle the challenge, the computation tasks can be offloaded from IoT devices to the cloud with powerful computing capacity for processing. As a promising technology, mobile edge computing (MEC) is introduced to provide computing service at the network edge. Unlike the conventional cloud computing which is remote from the IoT devices, MEC can be deployed at the radio access point such as a base station. MEC can help reduce the traffic of core network and the service latency [3]. The IoT devices can get better computing service and prolong the battery life by offloading the computation tasks [4]. Therefore, the task offloading in MEC for IoT has attracted significant attention from both industry and academia [5], [6].

Computation offloading from the IoT devices to MEC incurs high energy consumption which accounts for a significant portion of the device’s total energy consumption [7], [8]. In IoTs, the energy consumption for transmission of each device is greatly affected by the wireless channel state. When the channel condition is better, the transmission rate would be higher, and it needs less time to transmit data, thus reducing the transmission energy consumption. On the contrary, when the channel condition is worse, more energy would be consumed to transmit the same amount of data. Thus, the IoT devices’ transmission energy consumption could be reduced by postponing task offloading until the wireless channel becomes better. However, the IoT devices’ queue lengths would become large and even unstable [9]. Therefore, it is critical to design an effective task offloading strategy which could optimize the energy efficiency while providing performance guarantees for the IoT devices.

It faces several challenges to design such an effective offloading strategy. First, the quality of the wireless channel is dynamic and varying over time. It can be affected by not only the locations of IoT devices, but also other factors like network congestion, fading, etc [10]. Moreover, the time-varying channel state is hard to be predicted exactly in practice. Besides, the task arrival process of each IoT device is also hard to obtain. Therefore, it is of great challenge to design an offloading strategy which could adapt to the dynamics of channel condition and task arrival. Second, as the IoT devices’ number rises rapidly, the scale of the energy efficient dynamic offloading problem would be huge [11]. Thus, it is vital to design a low-complexity and efficient offloading algorithm to address this issue.

This article focuses on the energy efficient dynamic offloading problem in MEC for IoT. A stochastic optimization problem is formulated aiming at minimizing the average transmission energy consumption and guaranteeing the devices’ performance. By taking advantage of stochastic optimization techniques, we design an energy efficient dynamic offloading algorithm (EEDOA) to solve this problem. EEDOA dynamically makes offloading decisions without any statistics of channel condition or task arrival process, and it balances the energy efficiency and queue length by setting a parameter V. Mathematical analysis is given which demonstrates that the time complexity of EEDOA is polynomial. In addition, EEDOA can approximate the optimal transmission energy consumption while still guaranteeing the upper bound of queue length. Experiment results show the EEDOA’s effectiveness.

For the remainder of this article, we present related work in Section 2. System model and energy efficient offloading optimization problem are presented in Section 3. In Section 4, EEDOA is proposed to solve this optimization problem effectively. Section 5 gives the performance analysis for EEDOA. In Section 6, experiments are conducted to evaluate EEDOA. This article is concluded in Section 7.

SECTION 2Related Work
There have been some works about the computation offloading in MEC. Munoz et al. [11] focused on a femto-cloud system and presented an optimal computation and radio resources allocation strategy to optimize the energy consumption and latency concurrently. Wang et al. [12] focused on the energy saving problem in cloud radio access network, and formulated a non-convex energy minimization optimization problem. Then, an iterative algorithm was designed to solve this problem. Chen et al. [13] proposed a distributed algorithm by taking advantage of game theory for the computation offloading problem.

Yu et al. [14] studied the computing and radio resources allocation strategy for the MEC system, where multiple devices accessed the MEC by Orthogonal Frequency-Division Multiplexing Access. They proposed an allocation algorithm which could save energy and offload more computing tasks at the same time. Lyu et al. [15] focused on the task offloading in proximate cloud, and formulated a framework to optimize the system utility. The NP-Hard property of the proposed utility optimization problem was proven, and a heuristic algorithm was given. You et al. [16] considered the case that the wireless energy transfer powered the mobile cloud computing, and formulated an energy efficient framework to maximize the computing probability with the constraints of energy and delay. Most of these research were based on the prediction or assumption of task arrival or channel state. However, the offloading traffic of IoT devices and the wireless channels’ quality are highly dynamic and hard to predict exactly.

To deal with this challenge, some stochastic optimization techniques have been applied in recent works. Mao et al. [17] investigated the computing offloading in the energy harvesting devices, and devised an algorithm to reach the minimal execution cost. Lyu et al. [18] studied the cooperation offloading of several selfish devices, and proposed a distributed algorithm with the low time complexity to optimize the energy consumption. Kwak et al. [19] focused on computing offloading for various applications in single-user MEC system, and designed a dynamic algorithm which could satisfy the delay constraints and minimize the energy consumption. Jiang et al. [20] investigated the scheduling scheme for one multi-core mobile device, and designed an algorithm to optimize the energy consumption while stabilizing the queue. These works mainly focused on single-user system. It is more challengeable to design offloading strategy for multi-user system. Furthermore, as the IoT devices’ number increases rapidly, a low-complexity algorithm is critical for the task offloading in multi-user system.

Lyu et al. [21] focused on the task scheduling problem to maximize the system utility, and designed an optimal scheme which could decrease the feedbacks from IoT devices. Mao et al. [22] focused on the resource management in multi-user MEC system, and built one optimization model to optimize the power while stabilizing the queue. However, these works gave few insights on the impact of channel condition on the devices’ energy consumption. To tackle the above issues, we focus on the task offloading in multiple users MEC system, and propose a stochastic energy efficient optimization framework. And an effective algorithm which requires no prior knowledge about the task arrival or channel state’s statistical information is designed to solve this optimization problem.

SECTION 3System Model and Problem Formulation
3.1 System Model
One MEC system with a base station (BS) is considered. The BS has a MEC server providing services to n IoT devices in proximity. IoT devices can access the MEC server through the wireless channels, and offload the computation tasks for processing. By computation task offloading, the IoT devices can obtain better service and prolong the battery life. The set of the IoT devices is collected by I={1,2,…,n}, and a time-slotted system is considered, which is indexed by t∈{0,1,…,T−1} with slot length τ. Table 1 gives the main notations.

TABLE 1 Notations and Definitions

3.2 Task Model and Offloading Model
For each IoT device i, let Ai(t) (in bits) represent the amount of arrived computation tasks. For generality, these IoT devices are considered heterogeneous. Therefore, Ai(t) can be different among different IoT devices. Note that we do not need any prior statistic information about Ai(t), which is also hard to be obtained in real-life systems. This makes our model more extensive and applicable.

Let S(t) denote the number of available uplink sub-channels. For generality, we consider S(t) can be dynamic over different time slots. For each IoT device i, define Pi as its transmit power, and hi(t) as the channel power gain in slot t [23]. Then, the achievable task offloading rate (in bit/s) is denoted by Ri(t) as follows,
Ri(t)=Blog2(1+Pihi(t)BN0),(1)
View Sourcewhere B is the sub-channel’s bandwidth, and N0 is the noise power spectral density.

This article studies the task offloading for the IoT devices in the MEC system. Define the task offloading decisions as κ(t)={κ1(t),…,κn(t)}, where κi(t) denotes the offloading duration for IoT device i. Then, the available amount of computation tasks offloaded by device i is Di(t)=Riκi(t).

Each IoT device maintains a task buffer to store the arrived but not yet offloaded tasks. Let Qi(t) denote the task buffer’s queue backlog at IoT device i. Since each IoT device can not offload more than what it has, it should be satisfied that
κi(t)≤Qi(t)Ri(t),∀i∈I.(2)
View Source

Consider each IoT device operates in narrow-band, thus it can only access a sub-channel at the same time [24]. Hence, it holds that
0≤κi(t)≤τ,∀i∈I.(3)
View Source

Together with (2) and (3), we can obtain that
0≤κi(t)≤Ti(t),∀i∈I,(4)
View Sourcewhere Ti(t)=min{Qi(t)/Ri(t),τ}.

Similar to [21], we consider that each sub-channel can be accessed by the time division multiple access (TDMA), where a sub-channel can be accessed by different devices at different times during one slot. Moreover, a IoT device can access different sub-channels at different times to offload computation tasks during one slot [24]. Therefore, the total offloading duration of all the IoT devices must not exceed the time slot length of all the available sub-channels, as described in (5).
∑i=1nκi(t)≤S(t)τ.(5)
View SourceRight-click on figure for MathML and additional features.

3.3 Task Queuing Model
Recall that Qi(t) denotes the queue backlog of IoT device i, and Di(t) represents the amount of offloaded computation tasks in device i. Then, the queue backlog Qi(t+1) in the next slot is,
Qi(t+1)=max{Qi(t)−Di(t),0}+Ai(t).(6)
View SourceRight-click on figure for MathML and additional features.

To reduce the queueing delay and maintain the queue stability of these IoT devices, for each IoT device i, we bound its average queue backlog qi across the time slots, which is,
qi=limT→∞1T∑t=0T−1E{Qi(t)}<ε,∃ ε∈R+.(7)
View Source

3.4 Energy Model
For each IoT device i∈I, the energy consumption for transmission hinges on the transmit power and offloading duration, i.e., ei(t)=Piκi(t). Thus, the energy consumed by all the IoT devices for transmission is,
e(t)=∑i=1nPiκi(t).(8)
View Source

As the wireless channels’ qualities are dynamic and change over different time slots, the task offloading speed and energy consumption for transmission during one slot also vary across time. Thus, we target at the average transmission energy consumption in long time scale which is expressed in (9).
e=limT→∞1T∑t=0T−1E{e(t)}.(9)
View Source

3.5 Optimization Problem
When the wireless channels are under better condition, the transmission speed could be larger. Thus, it is preferred to transmitting offloadable tasks when the wireless channels are better so as to reduce the overall transmission duration and the energy consumption. However, if we do not offload the tasks until the wireless channels become good enough, the queue backlog of the IoT devices might become very large and the IoT devices might be unstable. Therefore, we can see that tradeoff exists between the transmission energy consumption and queue backlog. In this article, a unified optimization problem is formulated for the computation offloading in IoT devices, which aims at minimizing average transmission energy consumption while guranteeing the average queueing latency.
minκ(t)  e=limT→∞1T∑t=0T−1E{e(t)}.(10)
View Source
s.t. (4), (5) and (7).
View Source

Remark.
Problem (10) is a stochastic optimization problem as the computation task arrivals and the wireless channel conditions vary across time randomly. Since the statistical information is generally hard to be acquired or predicted accurately in real systems, it is of great challenge to solve Problem (10) offline. Moreover, as the IoT devices’ number rises rapidly, the solution space is increasing dramatically. How to solve the problem efficiently with low complexity is also very challenging. To attack the above challenges, an online task offloading algorithm is proposed which has no requirements on the statistical information of computation task arrivals or channel conditions, in Section 4.

SECTION 4Energy Efficient Dynamic Offloading Algorithm Design
In this section, taking advantage of Lyapunov optimization techniques [25], an energy efficient dynamic offloading algorithm called EEDOA is designed to solve Problem (10). By dynamically making the offloading decisions, EEDOA can achieve the tradeoff between the transmission energy consumption and queue backlog, and arbitrarily approximate the optimal transmission energy consumption while stabilizing the IoT devices.

4.1 Problem Transformation
We define Θ(t) as the queue backlog matrix of the IoT devices, i.e., Θ(t)=(Qi(t)). Let L(Θ(t)) denote the Lyapunov function, which is,
L(Θ(t))=12∑i=1nQ2i(t).(11)
View SourceRight-click on figure for MathML and additional features.In (11), L(\Theta (t)) indicates the IoT devices’ queue backlog state. A large L(\Theta (t)) implies that at least a IoT device’s queue backlog is large. If and only if the queue backlog of each IoT device is small, L(\Theta (t)) would be small. Thus, we seek to reduce the value of L(\Theta (t)) to maintain a low congestion state of the IoT devices. Define conditional Lyapunov drift as \Delta (\Theta (t)) in (12). \begin{equation*} \Delta (\Theta (t)) = \mathbf {E} \lbrace L(\Theta (t+1)) - L(\Theta (t)) | \Theta (t) \rbrace .\tag{12} \end{equation*}
View Source

Recall that this article minimizes the transmission energy consumption and guarantees the IoT devices’ queue backlog. Following Lyapunov optimization theory, combining transmission energy consumption with queue backlog, the drift plus energy is, \begin{equation*} \Delta (\Theta (t)) + V \mathbf {E} \lbrace e(t) | \Theta (t) \rbrace .\tag{13} \end{equation*}
View SourceIn (13), V\geq 0 is a tradeoff parameter between the transmission energy consumption and queue backlog. Particularly, a larger V indicates that more weight is put on transmission energy consumption.

Next, the drift plus energy’s upper bound is given by Theorem 1.

Theorem 1.
In slot t, if A_{i}(t) and R_{i}(t) are upper bounded by A_{i}^{max} and R_{i}^{max} over the time slots, the drift plus energy with any task offloading algorithm satisfies, \begin{equation*} \begin{split} \Delta (\Theta (t)) &+ V\mathbf {E}\lbrace e(t)|\Theta (t)\rbrace \leq C\\ &+\sum _{i \in I } Q_{i}(t) \mathbf {E}\lbrace A_{i}(t) - R_{i}(t) \kappa _{i}(t) |\Theta (t) \rbrace\\ &+ V \sum _{i \in I } \mathbf {E} \lbrace P_{i} \kappa _{i}(t) |\Theta (t) \rbrace,\\ \end{split}\tag{14} \end{equation*}
View Sourcewhere C= \frac{1}{2} [ \sum _{i \in I } (A_i^{max})^2 + \sum _{i \in I } (R_i^{max} \tau)^2 ] is a constant.

Proof.
Taking square on (6) and exploiting (\text {max}[a - b,0])^2 \leq a^2 + b^2 - 2ab for any a,b \geq 0, we can obtain (15). \begin{equation*} \begin{split} Q_{i}^2(t+1) \leq Q_{i}^2(t) & + D_{i}^2(t) + A_{i}(t)^2 - 2Q_{i}(t)D_{i}(t)\\ &+ 2A_{i}(t) \text {max}[Q_{i}(t)-D_{i}(t), 0].\\ \end{split}\tag{15} \end{equation*}
View SourceRight-click on figure for MathML and additional features.

Let \bar{{D}}_{i}(t) represent the actual amount of computation tasks offloaded from IoT device i. Thus, (16) holds. \begin{equation*} \bar{D}_{i}(t)= \left\lbrace \begin{array}{ll}Q_{i}(t),& Q_{i}(t) \leq D_{i}(t)\\ D_{i}(t),& otherwise. \end{array}\right.\tag{16} \end{equation*}
View SourceRight-click on figure for MathML and additional features.So it holds that \text {max}[Q_{i}(t)-D_{i}(t),0] = Q_{i}(t)- \bar{D}_{i}(t). And we can rewrite (15) as, \begin{equation*} \begin{split} Q_{i}^2(t+1)& \leq Q_{i}^2(t) + D_{i}^2(t) + A^2_{i}(t)\\ & + 2 Q_{i}(t) [A_{i}(t)- D_{i}(t)] - 2\bar{D}_{i}(t)A_{i}(t).\\ \end{split}\tag{17} \end{equation*}
View Source

Since \bar{D}_{i}(t) and A_{i}(t) are non-negative, it holds (18). \begin{equation*} \begin{split} \frac{1}{2} [Q_{i}^2(t+1)-Q_{i}^2(t)] &\leq \frac{1 }{2} [A_{i}^2(t) + D^2_{i}(t)]\\ & + Q_{i}(t)[A_{i}(t)-D_{i}(t)].\\ \end{split}\tag{18} \end{equation*}
View SourceRight-click on figure for MathML and additional features.Summing over all the devices on (18) and taking conditional expectations, (19) holds. \begin{equation*} \begin{split} \Delta (\Theta (t)) &\leq \frac{1}{2} \sum _{i \in I} \mathbf {E}\lbrace A_{i}^2(t)+ D^2_{i}(t)|\Theta (t) \rbrace\\ &+ \sum _{i \in I} Q_{i}(t)\mathbf {E}\lbrace A_{i}(t) - D_{i}(t) |\Theta (t) \rbrace . \end{split}\tag{19} \end{equation*}
View SourceRight-click on figure for MathML and additional features.

Since for any i \in I, there holds that R_i(t) \leq R_i^{max} and \kappa _{i}(t) \leq \tau, we obtain \begin{equation*} D_{i}(t) = R_{i} \kappa _{i}(t) \leq R_{i}^{max} \tau .\tag{20} \end{equation*}
View Source

According to (20) and A_i(t) \leq A_i^{max}, (21) can be obtained. \begin{equation*} \sum _{i \in I} \mathbf {E} \lbrace A_{i}^2(t)+ D^2_{i}(t)|\Theta (t) \rbrace \leq \sum _{i \in I} [ (A_{i}^{max})^2 + (R_i^{max} \tau)^2 ].\tag{21} \end{equation*}
View Source

Let C equal to \frac{1}{2} \sum _{i \in I} [ (A_{i}^{max})^2 + (R_i^{max} \tau)^2 ], and add V\mathbf {E}\lbrace e(t)|\Theta (t)\rbrace to (19). Thus, \begin{equation*} \begin{split} \Delta (\Theta (t))+V\mathbf {E}\lbrace e(t)|\Theta (t)\rbrace \leq C + V\mathbf {E}\lbrace e(t)|\Theta (t)\rbrace\\ +\sum _{i \in I} Q_{i}(t)\mathbf {E}\lbrace A_{i}(t)-D_{i}(t) |\Theta (t) \rbrace . \end{split}\tag{22} \end{equation*}
View Source

Substituting (8) into (22), it yields (14).

4.2 Energy Efficient Dynamic Offloading Algorithm
In this section, we minimize the drift plus energy’s upper bound, and devise an optimal algorithm, EEDOA. By minimizing the upper bound in each time slot, EEDOA can effectively reduce the average energy consumption for transmission and maintain the queue backlog of each IoT device at a low level.

In each time slot, EEDOA makes the offloading decisions \boldsymbol{ \kappa }(t) to minimize the the drift plus energy’s upper bound, expressed by, \begin{equation*} \mathop {\text {min}}_{\boldsymbol{ \kappa }(t)} \lbrace C + \sum _{i \in I } Q_{i}(t) [ A_{i}(t) - R_{i}(t) \kappa _{i}(t) ] + V \sum _{i \in I } P_{i} \kappa _{i}(t) \rbrace .\tag{23} \end{equation*}
View Source\begin{equation*} s.t.~(4), (5). \end{equation*}
View Source

Since C and A_{i}(t) are constant for given slot t, (23) can be reduced to (24). \begin{equation*} \mathop {\text {min}}_{\boldsymbol{ \kappa }(t)} \sum _{i \in I } [ V P_{i} - Q_{i}(t) R_{i}(t)] \kappa _{i}(t).\tag{24} \end{equation*}
View Source

Transforming the above minimization problem to the maximization problem, we have (25). \begin{equation*} \mathop {\text {max}}_{\boldsymbol{ \kappa }(t)} \sum _{i \in I } \omega _{i}(t) \kappa _{i}(t).\tag{25} \end{equation*}
View Source\begin{equation*} s.t.~(4), (5), \end{equation*}
View Sourcewhere \omega _{i}(t) = Q_{i}(t) R_{i}(t) - V P_{i}.

Problem (25) can be regarded as the linear relaxation of a knapsack problem. S(t)\tau is the capacity of the knapsack, and \omega _{i}(t) can be considered as the item’s unit value. Hence, for this linear relaxation knapsack problem, the optimal solution is to select the item with highest non-negative \omega _{i}(t) to fulfill the knapsack [26]. Therefore, we sort the IoT devices in the descending order of \omega _{i}(t), where \omega _{i}(t) \geq \omega _{i+1}(t). The devices with larger values of \omega _{i}(t) have higher offloading priorities, and are filled into the knapsack prior to other devices. Then, the interruption condition of the knapsack filling process is that the residual capacity of the knapsack is empty or the unit value of the selected item is negative. Therefore, the index of interruption item \chi can be derived as follows, \begin{equation*} \chi = \text {min} \lbrace \chi _{1}, \chi _{2} \rbrace,\tag{26} \end{equation*}
View SourceRight-click on figure for MathML and additional features.where \begin{equation*} \chi _{1} = \text {arg} \mathop {\text {min}}_{i} \sum _{j =1 }^{i} T_{i}(t) > S(t)\tau,\tag{27} \end{equation*}
View SourceRight-click on figure for MathML and additional features.\begin{equation*} \chi _{2} = \text {arg} \mathop {\text {max}}_{i} ~ \omega _{i}(t) \geq 0.\tag{28} \end{equation*}
View SourceRight-click on figure for MathML and additional features.

Thus, we can obtain the optimal offloading decisions \boldsymbol{ \kappa }^{*}(t), \begin{equation*} \kappa _{i}^{*}(t) = \left\lbrace \begin{array}{ll}T_{i}(t),& i < \chi\\ \text {min} \lbrace S(t)\tau - \mathop{\sum }_{i=1}^{\chi - 1} T_{i}(t), T_{\chi }(t) \rbrace,& i = \chi\\ 0,& i > \chi . \end{array}\right.\tag{29} \end{equation*}
View Source

Remark.
Recall that there exists tradeoff between transmission energy efficiency and queue backlog. For each IoT device i, combining its transmission energy consumption and queue length, EEDOA defines \omega _{i}(t) as its unit offloading profit. \omega _{i}(t) hinges on the current queue backlog and channel condition. In each time slot t, by selecting the IoT devices with higher non-negative \omega _{i}(t) to offload tasks, EEDOA maximizes the overall offloading profit for all the IoT devices. As a result, EEDOA can reduce both transmission energy consumption and queue length effectively. In addition, according to the definition of \omega _{i}(t), EEDOA can achieve the tradeoff between queue backlog and transmission energy consumption arbitrarily by adjusting V.

Algorithm 1. Energy Efficient Dynamic Offloading Algorithm (EEDOA)
for all i \in I do

Calculate the R_{i}(t), T_{i}(t) and \omega _{i}(t).

end for

Sort all the devices i in the descending order of \omega _{i}(t).

Set the index \chi according to (26).

for all i \in I do

Set the offloading decision \kappa _{i}(t) according to (29).

end for

Algorithm 1 presents the details of the EEDOA algorithm.

SECTION 5Algorithm Analysis for EEDOA
We first analyze the EEDOA’s performance through mathematical analysis, then give the time complexity of EEDOA.

Define \bar{Q} as the time-average queue backlog of the IoT devices, expressed in (30). \begin{equation*} \bar{Q}=\lim \limits _{T\rightarrow \infty } \frac{1}{T} \sum _{t=0}^{T-1} \sum _{i = 1}^{n} {\mathbf {E}\lbrace Q_{i}(t)\rbrace }.\tag{30} \end{equation*}
View SourceRight-click on figure for MathML and additional features.

To derive the upper bounds of e and \bar{Q}, we present that there exists an optimal strategy which is independent of the queue length, and makes the offloading decisions \boldsymbol{ \kappa }(t) following some fixed probability distribution, and can optimize the transmission energy efficiency. The details are given in Lemma 1.

5Lemma 1.
For any task arrival rate \boldsymbol{\lambda } satisfying \boldsymbol{\lambda } \in \boldsymbol{\Lambda }, a task offloading strategy \boldsymbol{\pi } ^* exists, which does not depend on the current queue length and satisfies, \begin{equation*} \begin{split} & \mathbf {E} \lbrace e^{\pi ^*}(t) \rbrace = e^*(\boldsymbol{\lambda });\\ \mathbf {E} \lbrace & A_{i}(t) \rbrace \leq \mathbf {E} \lbrace R_{i}(t)\kappa _{i}^{\pi ^*}(t) \rbrace,\\ \end{split} \end{equation*}
View Sourcewhere \boldsymbol{\Lambda } represents the system capacity, and e^*(\boldsymbol{\lambda }) represents the optimal transmission energy consumption with \boldsymbol{\lambda }.

5Proof.
Caratheodory’s theorem can be used to prove Lemma 1 [25]. For the sake of readability, the detailed proofs are omitted here.

Recall that the task arrival rate A_{i}(t) of each IoT device is upper bounded by A_{i}^{max}. Thus, the energy consumption for transmission would be upper bounded by a finite value \hat{e} and lower bounded by a finite value \check{e}. Then, by applying Lemma 1, Theorem 2 gives the average transmission energy consumption’s upper bound and queue length’s upper bound.

5Theorem 2.
Suppose there exists a positive \epsilon satisfying \boldsymbol{\lambda } + \epsilon \in \boldsymbol{\Lambda }. For the given V, the transmission energy consumption of EEDOA satisfies, \begin{equation*} e^{EEDOA}\leq e^{*}+\frac{C}{V}.\tag{31} \end{equation*}
View Source

In addition, the average queue length of EEDOA is also upper bounded in (32). \begin{equation*} \bar{Q} \leq \frac{C+V(\hat{e}-\check{e})}{\epsilon },\tag{32} \end{equation*}
View Sourcewhere C is a constant given by Theorem 1, and e^* represents the optimal transmission energy consumption with \boldsymbol{\lambda }.

5Proof.
According to Lemma 1, for the task arrival rate \boldsymbol{\lambda } + \epsilon, a randomized policy \pi ^{\prime } exists, which satisfies, \begin{align*} \mathbf {E} \lbrace e^{\pi ^{\prime }}(t) \rbrace & = & e^*(\boldsymbol{\lambda } + \epsilon);\tag{33} \end{align*}
View Source\begin{align*} \mathbf {E} \lbrace A_{i}(t) \rbrace + \epsilon & \leq & \mathbf {E} \lbrace R_{i}(t)\kappa _{i}^{\pi ^{\prime }}(t) \rbrace .\tag{34} \end{align*}
View Source

Since EEDOA minimizes (22)’s R.H.S., for the offloading strategy \pi ^{\prime }, we can obtain that \begin{align*} \Delta (\Theta (t))&+V\mathbf {E}\lbrace e(t)|\Theta (t)\rbrace \leq C + V\mathbf {E}\lbrace e^{\pi ^{\prime }}(t)|\Theta (t)\rbrace\\ &+\sum _{i \in I} Q_{i}(t)\mathbf {E}\lbrace A_{i}(t)-R_{i}(t)\kappa _{i}^{\pi ^{\prime }}(t) |\Theta (t) \rbrace .\tag{35} \end{align*}
View Source

Plugging (33) and (34) into (35), it can be obtained that \begin{equation*} \Delta (\Theta (t)) + V\mathbf {E}\lbrace e(t)|\Theta (t)\rbrace \leq C + V e^*(\boldsymbol{\lambda } + \epsilon) - \epsilon \sum _{i \in I} Q_{i}(t) .\tag{36} \end{equation*}
View Source

Taking expectations on (36), and using iterated expectations, we can obtain \begin{equation*} \begin{split} \mathbf {E}\lbrace L(\Theta & (t+1)) - L(\Theta (t))\rbrace + V \mathbf {E}\lbrace e(t) \rbrace\\ & \leq C + V e^*(\boldsymbol{\lambda } + \epsilon) - \epsilon \sum _{i \in I} \mathbf {E} \lbrace Q_{i}(t) \rbrace . \end{split}\tag{37} \end{equation*}
View Source

Summing (37) over the slots, it holds, \begin{equation*} \begin{split} \mathbf {E}\lbrace L(\Theta (T)) \rbrace - \mathbf {E}\lbrace L(\Theta (0))\rbrace + V \sum _{t=0}^{T-1} \mathbf {E} \lbrace e(t) \rbrace\\ \leq C T + V T e^*(\boldsymbol{\lambda } + \epsilon) - \epsilon \sum _{t=0}^{T-1} \sum _{i \in I} \mathbf {E} \lbrace Q_{i}(t) \rbrace . \end{split}\tag{38} \end{equation*}
View Source

For generality, consider that the queue lengths of the IoT devices are empty when t=0. Thus, we can obtain L(\Theta (0)) = 0. Moreover, since it holds that L(\Theta (T)) \geq 0, it holds, \begin{equation*} V \sum _{t=0}^{T-1} \mathbf {E} \lbrace e(t) \rbrace \leq C T + V T e^*(\boldsymbol{\lambda } + \epsilon) - \epsilon \sum _{t=0}^{T-1} \sum _{i \in I} \mathbf {E} \lbrace Q_{i}(t) \rbrace .\tag{39} \end{equation*}
View Source

Since Q_{i}(t) and \epsilon are non-negative, we obtain (40). \begin{equation*} V \sum _{t=0}^{T-1} \mathbf {E} \lbrace e(t) \rbrace \leq C T + V T e^*(\boldsymbol{\lambda } + \epsilon).\tag{40} \end{equation*}
View SourceBy dividing (40) by VT, it yields \begin{equation*} \frac{1}{T} \sum _{t=0}^{T-1} \mathbf {E} \lbrace e(t) \rbrace \leq\; \frac{C}{V} + e^*(\boldsymbol{\lambda } + \epsilon).\tag{41} \end{equation*}
View SourceLet \epsilon \rightarrow 0, T \rightarrow \infty and apply the Lebesgues dominated convergence theorem, we obtain (31).

According to (39), we also obtain \begin{equation*} \begin{split} \epsilon & \sum _{t=0}^{T-1} \sum _{i \in I} \mathbf {E} \lbrace Q_{i}(t) \rbrace\\ & \leq C T + V T e^*(\boldsymbol{\lambda } + \epsilon) - V \sum _{t=0}^{T-1} \mathbf {E} \lbrace e(t) \rbrace\\ & \leq C T + V T (\hat{e} - \check{e}). \end{split}\tag{42} \end{equation*}
View SourceRight-click on figure for MathML and additional features.By dividing (42) by \epsilon T, and letting T \rightarrow \infty, we obtain (32).

5Remark.
(31) shows that transmission energy consumption’s upper bound decreases as V rises. However, (32) shows that the queue length’s upper bound rises as V increases. Nevertheless, (7) is satisfied if \varepsilon is set as \frac{C+V(\hat{e}-\check{e})}{\epsilon }. We use O(1/V) to represent the upper bound of gap of energy consumption, and O(V) to represent the gap of queue length [21]. Combing (31) and (32), we can see that EEDOA achieves an [O(1/V),O(V)] tradeoff between transmission energy efficiency and queue length. By changing V, EEDOA can realize different balances between energy consumption and queue backlog. Besides, Theorem 2 also indicates that the minimal transmission energy consumption can be approximated by EEDOA while guaranteeing that all the devices are stable.

Next, we provide the time complexity analysis for EEDOA. According to Algorithm 1, for the two loops (line 1-3 and line 6-8), EEDOA traverses all the IoT devices once. Thus, each loop terminates in O(n) operations, where n is the IoT devices’ number. For line 4, the process of sorting devices takes O(n\;\log n) operations with the quicksort algorithm. For line 7, it takes O(n) operations in the worst case. Thus, the EEDOA’s time complexity is O(n\;\log n).

SECTION 6Evaluation
This section demonstrates that EEDOA can adapt to various parameter changes. We also provide the comparison experiments to show the EEDOA’s effectiveness.

In the experiments, we consider 100 IoT devices offloading computation tasks. The slot length \tau = 1 s. The offloadable task arriving rate and the channel state are set to follow certain fixed statistical distributions. The amount of data arriving at IoT device i per second is set to be uniformed distributed within [0, 2200] bits, i.e., A_{i}(t) \sim U[0,2200] bits. For the wireless channel, a small-scale Rayleigh fading model is adopted, and h_{i}(t) is an exponential distribution with the unit mean, i.e., h_{i}(t) \sim E(1) [22]. We set the number of available sub-channels as S(t) \sim U[10,30], and the transmit power of each IoT device as P_{i} \sim U[10,200] mW [21]. Besides, B is set as 1 MHz and N_{0} is set as 10^{-6} W/Hz. To improve the reliability of the experiments, we run 3,000 times for every setting, and average the results. Note that although in the experiments, the offloadable task arrivals and channel states are set according to fixed statistical distributions, EEDOA actually requires no statistics for the information in advance.

6.1 Parameter Analysis
6.1.1 Effect of Tradeoff Parameter
In Fig. 1, we plot the transmission energy consumption and queue length with different V. Fig. 1a shows the relationship between the transmission energy consumption and tradeoff parameter V. We can see that as V rises, the transmission energy consumption decreases, which conforms (31) in Theorem 2. The reason is that a larger V means putting more weight on transmission energy consumption, and EEDOA would dynamically adjust the offloading decisions to reduce the transmission energy consumption. However, Fig. 1b shows that when V increases, the queue length also rises. This phenomena conforms (32) in Theorem 2. Nevertheless, the queue length would converge gradually with more increase of V, demonstrating that EEDOA’s queue length would be bounded. From Fig. 1, it can be observed that by adjusting V, EEDOA can balance the transmission energy consumption and queue length. Besides, by increasing the value of V sufficiently large, EEDOA can approach the optimal energy consumption and stabilize all the IoT devices.


Fig. 1.
Transmission energy consumption and queue length with different values of V.

Show All

6.1.2 Effect of Arrival Rate
In Fig. 2, we plot the transmission energy consumption and queue length with different task arrival rates. The arrival rate for each IoT device is set as \alpha \cdot A_i(t), where \alpha = 0.8, 1 and 1.2, respectively. Fig. 2a illustrates that the transmission energy consumption rises as the arrival rate rises. It is because as the arrival rate rises, the amount of computation tasks also increases. As a result, it would consume more energy to offload the computation tasks. Similarly, Fig. 2b shows that the queue length rises as arrival rate rises. In addition, we can see that with different arrival rates, both the transmission energy consumption and queue length of EEDOA would converge quickly. This shows that EEDOA can dynamically tune the offloading decisions to adjust to the change of arrival rate, and make the IoT devices stable quickly.


Fig. 2.
Transmission energy consumption and queue length with different arrival rates.

Show All

6.1.3 Effect of Transmit Power
In Fig. 3, we plot the transmission energy consumption and queue length with different P_{i}. For each IoT device, we set the transmit power as \beta \cdot P_i, where \beta = 0.8, 1 and 1.2, respectively. Fig. 3a shows that as the transmit power rises, the energy consumption rises. It is because that with the rise of transmit power, the energy consumption of each IoT device for transmitting data would also increase. Consequently, the overall transmission energy consumption of EEDOA would rise. Fig. 3b shows that the queue length rises with the increase of transmit power. The reason is that when the transmit power increases, EEDOA would reduce the amount of computation tasks offloaded to decrease the transmission energy consumption, which results in the increase of queue length.

Fig. 3. - 
Transmission energy consumption and queue length with different transmit powers.
Fig. 3.
Transmission energy consumption and queue length with different transmit powers.

Show All

6.1.4 Effect of Channel Power Gain
Fig. 4 plots the transmission energy consumption and queue length with different channel power gains. For each IoT device, we set the channel power gain to be the exponential distribution with the mean of \gamma \cdot \mu, where \gamma = 0.8, 1 and 1.2, respectively. Fig. 4a shows that as channel power gain rises, the transmission energy consumption reduces. With the rise of channel power gain, the offloading rate would increase, and thus, the transmission duration for offloading tasks decreases. Consequently, the transmission energy consumption of EEDOA would also decrease. We can see the similar phenomena in Fig. 4b that the queue length decreases as channel power gain rises. The reason is that as the channel power gain and offloading rate rise, the tasks offloaded would rise; therefore, the queue length of EEDOA would decrease.


Fig. 4.
Transmission energy consumption and queue length with different channel power gains.

Show All

6.1.5 Effect of Number of IoT Devices
Fig. 5 plots the transmission energy consumption and queue length with different numbers of IoT devices. The IoT devices’ number ranges from 70 to 110 with an increment of 10. From Fig. 5a, we can see that as IoT devices’ number rises, the transmission energy consumption rises. It is because that when the IoT devices’ number rises, the amount of offloaded computation tasks also rises, which causes the rise of the transmission energy consumption. Fig. 5b shows that as the IoT devices’ number rises, the total queue length increases. The reason is that the amount of offloaded computation tasks would rise as the IoT devices’ number rises. Only part of the increased computation tasks are offloaded, and the rest are stored in the task buffer waiting for transmitting, which leads to the increase of queue length.


Fig. 5.
Transmission energy consumption and queue length with different numbers of IoT devices.

Show All

6.2 Comparison Experiments
To further evaluate the EEDOA’s performance, we compare EEDOA with two baseline algorithms:

Equal allocation strategy: In slot t, the offloading duration is allocated among all the IoT devices equally.

Queue-weighted strategy: In slot t, the offloading duration is allocated among the IoT devices according to their weighted queue length. Particularly, IoT devices with larger queue length have higher priorities, and the offloading durations allocated to them are longer.

In Fig. 6, we plot the transmission energy consumption and queue length with different algorithms. Both the transmission energy consumption and queue length of our EEDOA are the lowest. It is demonstrated that EEDOA can decrease the transmission energy consumption as well as the queue length effectively. It is because EEDOA can dynamically make the offloading decisions among the IoT devices to adapt to the channel dynamics and queue length. In addition, we can see that the transmission energy consumption of Equal allocation strategy and Queue-weighted strategy is close; however, the queue length of Queue-weighted strategy is less than the Equal allocation strategy. The reason is that Queue-weighted strategy allocates longer offloading durations to the IoT devices with larger queue length, reducing the overall queue length of the IoT devices. Nevertheless, the Queue-weighted strategy does not take into account the channel dynamics. Our EEDOA considers both the dynamic channel states and the queue length information. Fig. 6 shows the superiority of EEDOA in reducing the transmission energy consumption as well as the queue length effectively.


Fig. 6.
Transmission energy consumption and queue length with three different algorithms.

Show All

SECTION 7Conclusion
In this article, an online and polynomial-time-complexity algorithm EEDOA has been proposed for offloading in MEC to approximate the minimal energy consumption and guarantee the IoT devices’ delay performance. It needs no prior statistic knowledge related with task arrival or channel condition. EEDOA can also make arbitrary tradeoff between transmission energy efficiency and queue backlog. A close-to-optimal transmission energy consumption can be acquired by EEDOA while guaranteeing the queue backlog’s upper bound. Experiment results show the EEDOA’s effectiveness in reducing the transmission energy consumption and keeping the queue backlog of IoT devices at a low level.