In the multi-access edge computing (MEC) environment, app vendors’ data can be cached on edge servers to ensure low-latency data retrieval. Massive users can simultaneously access edge servers with high data rates through flexible allocations of transmit power. The ability to manage networking resources offers unique opportunities to app vendors but also raises unprecedented challenges. To ensure fast data retrieval for users in the MEC environment, edge data caching must take into account the allocations of data, users, and transmit power jointly. We make the first attempt to study the Data, User, and Power Allocation (DUPA 3 ) problem, aiming to serve the most users and maximize their overall data rate. First, we formulate the DUPA 3 problem and prove its NP -completeness. Then, we model the DUPA 3 problem as a potential DUPA 3 game admitting at least one Nash equilibrium and propose a two-phase game-theoretic decentralized algorithm named DUPA 3 Game to achieve the Nash equilibrium as the solution to the DUPA 3 problem. To evaluate DUPA 3 Game, we analyze its theoretical performance and conduct extensive experiments to demonstrate its effectiveness and efficiency.
SECTION 1Introduction
Due to the exponential growth of mobile and Internet-of-Things (IoT) devices like smart phones and smart vehicles over the last decade, multi-access edge computing (MEC) is emerging as the novel distributed computing paradigm to tackle the unprecedented challenges raised by the enormous network traffic. In the MEC environment, an edge server powered by a cluster of physical machines is attached to each base station geographically close to users [1]. In this way, mobile and IoT application vendors (app vendors) can hire storage and computing capacities on edge servers for hosting their apps (edge apps) to serve nearby users with low latency [2].

When users access edge apps, a large volume of mobile data is transmitted via edge servers between the cloud and users’ devices. Caching app data, especially popular ones like popular VR videos from Facebook Horizon1, can considerably reduce the delay in users’ data retrieval [3]. Moreover, the transferred data from the cloud to users can also be significantly reduced by caching app data on edge servers [4]. This way, the data transmission costs are lowered [5]. In the MEC environment, the new challenges of edge data caching (EDC) are starting to attract researchers’ attention in recent years, who aim to maximize caching performance and/or minimize caching cost in general [2], [4].

Given a group of users and their data requests in a specific area, a straightforward solution for the app vendor is to cache all the requested data on each edge server. However, due to the size limits, edge servers usually have limited storage capacities [2], [6]. The competition among app vendors makes it often impossible to cache all the requested data on individual edge servers. In this case, reserving cache spaces on individual edge servers is a common practice [7]. Then, popular app data can be cached for users to retrieve who are allocated appropriate transmit power to ensure their data rates. Unallocated users that have to access the remote cloud will suffer from high latency and incur user attrition costs to app vendors [3].

In the MEC environment, networking resources play a critical role in impacting users’ achievable data rates when users are retrieving cached data from edge servers. Networking resource management has been widely studied in research that combines cloud computing and radio access network [8], [9]. Very recently, researchers are starting to investigate new challenges in the MEC environment under multiple access schemes with consideration of networking resources, e.g., data offloading [10], and computation offloading [11]. However, existing EDC studies have predominantly focused on storage resources, and ignored or oversimplified networking resources during app data retrieval in the MEC environment where multiple access schemes are enabled to power the 5G wireless network.

The Non-Orthogonal Multiple Access (NOMA) scheme is a new multiple access scheme for 5G. It improves spectral efficiency significantly and provides connectivity for massive users by allowing non-zero cross-correlation signals, compared with conventional orthogonal multiple access schemes [12]. Under the NOMA scheme, multiple channels are available on each base station (edge server). Each channel can accommodate multiple users simultaneously, whose data rates are guaranteed through appropriate transmit power allocation [13], [14], [15]. In a NOMA-based MEC environment, app vendors for the first time can manage the storage and networking resources jointly for ensuring fast app data retrieval, by submitting their strategies to the edge infrastructure provider for implementation [16]. This offers many new opportunities, and in the meantime introduces unprecedented challenges that app vendors have never encountered before MEC. As NOMA becomes widely acknowledged in both academia and industry, researchers are starting to investigate its impact on MEC problems, e.g., computation offloading [17] and user allocation [15].

The EDC problem has been investigated intensively from the edge infrastructure provider’s perspective with various optimization objectives, e.g., minimum delay cost [18] or maximum data sharing efficiency [19]. However, app vendors, as key stakeholders in the NOMA-based MEC environment, must consider the allocation of their own data, their own users and the transmit power jointly and systematically when formulating their EDC strategies. This paper makes the first attempt to investigate this joint data, user and power allocations (DUPA3) problem, aiming to 1) maximize user coverage (EDC Objective #1) and 2) maximize users’ overall data rate (EDC Objective #2). Its key contributions are:

We model and formulate the DUPA3 problem for app vendors and prove its NP-completeness.

We model the DUPA3 as a potential game, and prove that this DUPA3 game can admit at least one Nash equilibrium.

We propose a two-phase decentralized algorithm, namely DUPA3Game, to achieve the Nash equilibrium in a DUPA3 game, and evaluate its performance theoretically and experimentally.

The paper is structured as follows. We provide an example in Section 2 to motivate the research. The DUPA3 problem is formulated in Section 3. In Section 4, we formulate the DUPA3 game and present a two-phase decentralized algorithm to achieve the Nash equilibrium in a DUPA3 game. In Section 5, we evaluate DUPA3Game theoretically and experimentally. Section 6 reviews the related work and Section 7 concludes the paper.

SECTION 2Motivating Example
An example EDC scenario in the MEC environment is shown in Fig. 1, involving three edge servers, i.e., {s1,s2,s3}, and nine users, i.e., {u1,…,u9} that request four data, i.e., {d1,…,d4}. In the MEC environment, a user in the intersecting coverage of nearby edge servers can only retrieve data from one of them (server coverage constraint) [1]. For example, users u6, u7 and u8 can only access edge server s1 while u3 can access either s1 or s3. In addition, the data pieces to be cached must not exceed reserved cache spaces on individual edge server, referred to as the server capacity constraint [2]. Let us take Fig. 1 as an example, assuming that d1, d2 and d3 are cached on s1. User u8, who is requesting app data d4, must obtain d4 from the remote cloud and suffer the high latency. This incurs a significant loss for app vendors. Thus, the first EDC objective (EDC Objective #1) is to minimize such losses by maximizing the user coverage, i.e., the number of users retrieving app data from edge servers.


Fig. 1.
An Edge Data Caching Scenario. The interference between the target users and the users of other apps hosted on s1,s2 and s3 can be modelled as background noise and thus is omitted in the figure.

Show All

Under the NOMA scheme, EDC must also consider transmit power allocation to users under the server coverage constraint to ensure their data rates for data retrieval with the interference. To highlight the importance of networking resources in EDC, let us assume in Fig. 1 that all three edge servers have cached all the requested app data - this ensures full user coverage. Now let us consider an EDC strategy that allocates users {u1,u2} to edge server s3 on channel c3,3, {u6,u7} to s1 on c1,1, {u3,u8} to s1 on c1,2, {u4} to s2 on c2,2 and {u5,u9} to s2 on c2,4. Multiple users communicating with edge servers simultaneously may incur 1) intra-cell interference among users allocated to the same channel on the same edge server; and 2) inter-cell interference among users allocated to the same channel on different edge servers. Let us take a look at the users allocated to s1 and s2, i.e., {u3,…,u9}. Users u3 and u8 are allocated to c1,2 on s1. There is intra-cell interference between their communication with s1, indicated by the solid red line between them. The same applies to u6 and u7, u3 and u8, as well as u5 and u9. There is also inter-cell interference received by users in coverage areas intersect. Take u3,u4 and u5 for example. User u4 is in the overlapping area of all the three edge servers. Since u4 is allocated to c2,2 on s2, it receives the inter-cell interference from both s1 and s3. In the meantime, u3’s data rate is impacted by the inter-cell interference from s2 and u5’s data rate is impacted by that from s3. Users’ channel conditions are impacted by both intra-cell and inter-cell interference. Consequently, their data rates are impacted. According to users’ channel conditions, the transmit power must be properly allocated to ensure users’ data rates under the NOMA scheme. Thus, the second EDC objective (EDC Objective #2) is to maximize their overall data rate by properly allocating transmit power to users.

In general, those with strong channel conditions, e.g., short distance from edge servers and less interference, are usually given less transmit power than those with poor channel conditions [12], [20]. Fig. 1 presents the power allocation decisions for u4,u6 and u7 as an example. Suffering the same interference, u6 is allocated more transmit power than u7, because it is more distant from u7 and thus has a poorer channel condition. Compared with u6 and u7, u4 is given higher transmit power because it is the only user allocated to s2 on c2,2.

A real MEC environment may be very large with hundreds (or more) users, edge devices and edge servers. Thus any solution to this MEC allocation problem must also be able to scale and be computed in a reasonable time to be useful.

SECTION 3System Model
Below we formulate a model for our DUPA3 problem. Table 1 summarizes the main notations. Given M users U={u1,u2,…,uM}, F data D={d1,d2,…,dF} and N edge servers S={s1,s2,…,sN} in an area, the DUPA3 problem needs to define an EDC strategy that includes: 1) a data allocation strategy that allocates D across S; 2) a user allocation strategy that allocates U to S on appropriate wireless communication channels; and 3) a power allocation strategy that allocates the transmit power of S to U.

TABLE 1 Summary of Notations

3Definition 1 (Data Allocation Strategy).
Let τi,f∈{0,1} indicate whether df (1≤f≤F) is cached on si (1≤i≤N), a data allocation strategy is represented by τ={τ1,1,⋯τ1,F,…,τN,F}.

Let Ci={ci,1,ci,2,⋯ci,K} denote the channels available on edge server si, Bi and pi denote the bandwidth and transmit power of edge server si. The bandwidth and transmit power available on channel ci,k can be denoted by Bi,k and pi,k.

3Definition 2 (User Allocation Strategy).
Let Xji,k∈{0,1} indicate whether user uj (1≤u≤M) is allocated to channel ci,k. The user allocation decision for uj can be represented by Xj={Xj1,1,⋯Xj1,K,…,XjN,K}. The user allocation strategy is constituted by all user allocation decisions, denoted by X={X0,…,XM}.

Let Ui,k(X) denote the users allocated to ci,k by X.

3Definition 3 (Power Allocation Strategy).
Given a user uj, the power allocation decision for uj is denoted as pj={pj1,1,…,pj1,K,…,pjN,K}, where pji,k is the transmit power allocated to uj (uj∈Ui,k(X)). The power allocation strategy is constituted by all users’ power allocation decisions, denoted by p={p1,…,pM}.

In the MEC environment, a device usually has a minimum power requirement and a power upper bound for wireless communication. Correspondingly, each user uj∈U has a minimum power δjmin and a maximum power δjmax. Thus, for uj to be allocated to channel ci,k, its allocated transmit power pji,k must fulfil:
Xji,k⋅δjmin≤pji,k≤Xji,k⋅δjmax.(1)
View Source

Moreover, the total allocated power on si must not exceed the available power pi:
∑ci,k∈Ci∑uj∈Ui,k(X)pji,k≤pi.(2)
View Source

Cache spaces are reserved on edge servers to cache commonly requested app data requested by users of edge devices. Thus, the spaces occupied by cached data on si must not exceed the cache spaces reserved on si:
∑df∈Dτi,f≤αi.(3)
View Source

3.1 System Cost Model
The EDC Objective #1, discussed in Section 2, is to maximize user coverage. This minimizes the overall system cost. According to the server coverage constraint discussed in Section 2, a user uj can be allocated to an edge server si only when it is covered by si:
Xji,k≤{10uj∈Uiuj∉Ui,1≤k≤K(4)
View Sourcewhere Ui is the set of users covered by si. Take user u3 in Fig. 1 as an example. It is covered by edge servers s1 and s3, but not by s2. Accordingly, X31,k and X33,k can be 0 or 1 while X32,k can only be 0.

Let φj,f∈{0,1} indicate whether user uj requests data df. User uj can be allocated to a channel of si only when its requested data df is cached on si:
Xji,k≤∑df∈Dφj,f⋅τi,f.(5)
View SourceRight-click on figure for MathML and additional features.

A user uj can be allocated to one channel at most, there is:
∑si∈S∑ci,k∈CiXji,k≤1.(6)
View SourceRight-click on figure for MathML and additional features.

Let σj denote the joint user and power allocation decision for uj that combines Xj and pj:
σj=(Xj,pj)={(Xj1,1,pj1,1),⋯(Xj1,K,pj1,K),…,(XjN,K,pjN,K)}.(7)
View SourceRight-click on figure for MathML and additional features.

In this way, the joint user and power allocation strategy for U={u1,…,uM} can be represented by σ={σ1,…,σM}.

The failure to allocate a user incurs the system cost. Its value is to be determined domain-specifically based on the app vendor’s priority for avoiding unallocated users. Let cost denote the cost incurred by one unallocated user and I{condition} denote the indicator function such that returns 0 if the condition is false, otherwise 1. The system cost incurred by user uj can be calculated with:
Z(σj)=I{σj=σ0}⋅cost,(8)
View SourceRight-click on figure for MathML and additional features.where σ0={(0,0),(0,0),…,(0,0)}, indicating that a user is not allocated to any edge server.

3.2 System Benefit Model
As discussed in Section 2, EDC Objective #2 is to maximize users’ overall data rate. This maximizes the overall system benefit.

The NOMA scheme implements the successive interference cancellation (SIC) technique, where a user with worse channel condition treats the signals of users allocated to the same channel with better channel conditions as noise [13]. Let us assume that the users allocated to channel ci,k, i.e., Ui,k(X), are ordered by their channel conditions from poor to strong, i.e. Oi,k={1,2,…,|Ui,k(X)|}. Accordingly, the jth user in Ui,k(X), where n<j<m, can decode un’s signal, treating um’s signal as noise. Let gji,k denote the channel gain between channel ci,k on edge server si and user uj, capturing the impact of antenna gain, shadowing and path-loss [21]. This channel gain can be calculated with l−lossi,jλ|h^ji,k|2, where li,j is the distance between si and uj, loss is the path loss exponent, λ is the frequency dependent factor, h^ji,k∼CN(0,1) is the fading coefficient from uj on ci,k. In this way, the intra-cell interference received by uj allocated to channel ci,k can be calculated with gji,k∑|Ui,k(X)|t=j+1pti,k [22]. In addition, the inter-cell interference received by uj allocated to channel ci,k, denoted by ϑji,k, is ϑji,k=∑so∈S∖sigjo,kpo,k [20].

In EDC scenarios, users try to retrieve app data, e.g., interactive VR/AR data, from edge servers. Therefore, we only focus on the downlink in this study. According to [15], [20], the downlink Signal-to-Interference-plus-Noise Ratio (SINR) for uj’s communication with si on channel ci,k is calculated with:
γji,k=gji,kpji,kgji,k∑|Ui,k(X)|t=j+1pti,kintra-interference+ϑji,kinter-interference+ωnoise,(9)
View Sourcewhere ω is the variance of the additive white Gaussian noise.

Assume that user um is allocated to channel ci,k. It has to decode all other users’ signals, i.e. {uj∈U|pji,k>pmi,k}, ∀j,m∈Oi,k,j<m, because uj’s transmit power is higher than um’s. SIC requires that um’s data rate for decoding uj's signal is not lower than uj’s [15], [20]:
Rm→ji,k≥Rj→ji,k,(10)
View Sourcewhere
Rm→ji,k=Bi,klog2⎛⎝⎜⎜1+pji,k∑|Ui,k(X)|q=j+1pqi,k+ϑmi,k+ωgmi,k⎞⎠⎟⎟.(11)
View SourceIn Fig. 1, users u3 and u8 are allocated to channel c1,2, i.e., the 2nd channel on edge server s1. Since the transmit power allocated to u3 is higher than that allocated to u8, u8’s data rate for decoding u3’s signal is not lower than u3’s: R8→31,2≥R3→31,2=R31,2.

Once (10) is fulfilled, SIC can be performed on user uj to perfectly cancel the intra-cell interference received by uj [23], [24]. Hence, uj’s available downlink data rate can be expressed by:
Rji,k=Rj→ji,k=Bi,k⋅log2(1+pji,k∑|Ui,k(X)|q=j+1pqi,k+max{ϑmi,k+ωgmi,k ∣∣ ∀m≥j}),(12)
View Sourcewhere m,j∈Oi,k. This equation shows that uj’s data rate is equal to the users’ minimum rates after uj in Oi,k for decoding uj’s signal.

The joint user and power allocation decisions for all the users except uj can be represented by σ−j={σ1,…,σj−1,σj+1,…,σM}. A user’s data rate is determined by its and as well as other users’ joint user and power allocation decisions. Given a data allocation strategy τ and other users’ joint user and power allocation decisions σ−j, the system benefit produced by allocating a specific user uj is calculated with:
Bτ,σ−j(σj)=I{σj≠σ0}∑df∈Dφj,f⋅∑si∈S∑ci,k∈CiRji,k,(13)
View Sourcewhere σj={(0,0),…,(Xji,k,pji,k),…,(0,0)} and Rji,k is calculated with (12).

3.3 Optimization Model
The DUPA3 problem consists of finite variables with corresponding domains listing their possible values and constraints over those variables. Thus, it is a constrained optimization problem. A feasible strategy to a constrained optimization problem is to assign a set of values to all variables in its domain while satisfying all the constraints.

Given M users U={u1,u2,…,uM}, F data D={d1,d2,…,dF} and N edge servers S={s1,s2,…,sN} in a specific area, the DUPA3 problem is formulated as below:
EDC Objective#1:min∑uj∈UZ(σj)(14)
View Source
EDC Objective#2:max∑uj∈UBτ,σ−j(σj)(15)
View Source
s.t.:τi,f∈{0,1},∀si∈S,df∈DXji,k∈{0,1},∀si∈S,ci,k∈⋃si∈SCi,uj∈U0≤pji,k≤pi,∀si∈S,ci,k∈⋃si∈SCi,uj∈U(1),(2),(3),(4),(5),(6)
View Source

In the MEC environment, there are many domain-specific ways to the trade-off between EDC Objective #1 and EDC Objective #2. For example, an app vendor can allocate most of their users to edge servers without worrying whether their overall data rate is optimal. It can also allocate some users to the cloud to reduce the interference among the remaining users so that their overall data rate is maximized.

Now, we demonstrate the NP-completeness of the DUPA3 problem.

Theorem 1.
The DUPA3 problem is NP-complete.

Proof.
The DUPA3 problem is the generalization of the multiple knapsack (MK) problem [25]. In a classic MK problem, there are m items U′={u′1,…,u′m} with benefit bj for each item and n knapsacks S′={s′1,…,s′n} with capacities wi for each knapsack. The MK problem aims to maximize total benefit of selected items, while obeying that the maximum total weight of the chosen items must not exceed ∑s′i∈S′wi. In the DUPA3 problem, users can be regarded as items while all the channels on the edge servers can be regarded as knapsacks. As mentioned in Section 3.3, there are many ways to trade off between the objectives in the DUPA3 problem. Usually, the two objectives can be sum to create a weighted combination as a new objective. This way, the new objective of the DUPA3 problem can be regarded as the objective in the MK problem. The constraints of the DUPA3 problem, including the cache space constraint and power resource limit, can be projected to the weights in the MK problem. This way, the DUPA3 problem is reduced to a MK problem and it is NP-complete.

SECTION 4Game Formulation and Algorithm Design
We propose DUPA3Game, a 2-phase game-theoretic algorithm in this section to solve the DUPA3 problem effectively and efficiently. Game theory is adopted for design of DUPA3Game for the following three main reasons.

Game theory does not need centralized control from the remote cloud which inevitably incurs extra communication latency unacceptable in the MEC environment.

The solution to a game can be sought in a decentralized manner because the decisions can be made for individual users in parallel. In this way, the burden of finding the central optimal solution can be lifted, and the EDC strategy can be formulated rapidly.

Game theory has been proven to be a powerful tool for mitigating participants’ multiple conflicting objectives.

Game theory has been widely employed to solve different problems in a variety of domains. The key is to design a suitable game-theoretical approach for a specific problem. Game-theoretical approaches tackling different problems can be profoundly different in their designs. In our study, we design DUPA3Game to tackle the novel DUPA3 problem specifically, taking into account the unique constraints of MEC, including the server coverage constraint and the server capacity constraint.

4.1 Game Formulation and Property
Similar to many studies based on game theory [1], [8], [15], [26], the DUPA3 game simulate all users by the corresponding players to make decisions, following a specific benefit function to achieve EDC Objective #1: maximizing user coverage, and EDC Objective #2: minimizing users’ overall data rate. Under the NOMA scheme, users with poor channel conditions need high transmit power to ensure their data rates. The allocation of such users to pursue Objective #1 may undermine other users’ data rates profoundly and conflict with the pursuit of Objective #2. From Eq. (13), we can see that system benefit is measured based on allocated users’ data rates. An unallocated user will not produce any system benefit, and in the meantime will incur the system cost as discussed in Section 3.1. Thus, DUPA3Game is designed to pursue Objective #2 as it will also approach Objective #1 at the same time.

In DUPA3 game, the players make decisions on channels and edge servers that corresponding users are allocated to, and how much transmit power they obtain, producing a joint user and power allocation decision σj=(Xj,pj) for each uj∈U. As discussed in Section 3, an EDC strategy involves data, user and power allocation strategies. There are two phases in the DUPA3 game. In Phase #1, the data allocation strategy τ is formulated by updating the joint user and power allocation strategy σ. For example, if user uj is allocated to ci,k, i.e., Xji,k←1, data df requested by uj will be cached on server si if it is not cached on si, i.e., τi,f=1. In Phase #2, the joint strategy σ is formulated by joint user and power allocation decisions. This way, τ and σ constitute the final EDC strategy.

Given σ−j, a decision σj needs to be made for user uj to achieve its maximum benefit in data rate calculated with benefit function (13):
maxBτ,σ−j(σj).(16)
View Source

The DUPA3 problem is formulated as a game G=(S,U,{Aj}uj∈U,{Bτ,σ−j(σj)}σj∈Aj) based on (16), where Aj is uj’s finite set of possible joint user and power allocation decisions. The users might conflict with others in this game. If some users have been allocated to a specific edge server, others may be prevented from being allocated to it due to the limits on reserved cache spaces and inadequate transmit power. Take Fig. 1 as an example. Allocating all the users in s1’s coverage area, including u3,u4,u6,u7 and u8, to the same channel on edge server s1 may exhaust the transmit power on that channel and thus cannot ensure these users’ data rates. To mitigate such conflicts, we need to ensure that at least one Nash equilibrium [27] is admitted by the DUPA3 game:

Definition 4 (Nash Equilibrium).
An strategy σ∗=(σ∗1,σ∗2,…,σ∗M) is a Nash equilibrium if no decision can unilaterally be changed for increasing any individual user’s benefit, i.e.,
Bτ∗,σ∗−j(σ∗j)≥Bτ∗,σ∗−j(σj),∀σj∈Aj,uj∈U,(17)
View Source

where τ∗ is determined by σ∗.

It is important to ensure that the DUPA3 game can admit one Nash equilibrium at least due to the following property [28]:

Property 1.
The user allocation decision σ∗j for uj is the best choice in Ai based on σ−j, if the strategy σ∗ is a Nash equilibrium.

A Nash equilibrium can be applied as a self-enforcing strategy for the DUPA3 game based on Property 1. Since the sticking agreements are in users’ own self-interests, there is no need for a centralized enforcement [28]. We first introduce the potential game [29] here:

Definition 5 (Potential Game).
In a potential game, there is a potential function π(σ) fulfilling:
Bτ,σ−j(σj)⇒<Bτ,σ−j(σ′j)π(σj,σ−j)<π(σ′j,σ−j),(18)
View Sourcefor any uj∈U, σj,σ′j∈Aj and σ−j∈∏l≠jAl.

The Nash equilibrium in a DUPA3 game can be interpreted in another way. An EDC strategy σ∗ is a Nash equilibrium if there is Bτ∗,σ∗−j(σ∗j)=maxσj∈AjBτ∗,σ∗−j(σj), ∀uj∈U. Therefore, in a potential game, the local optima to the potential function can also ensure at least one Nash equilibrium [29].

Now, we first prove Lemma 1 for demonstrating that the DUPA3 game is a potential game.

Lemma 1.
Given an EDC strategy σ={σ1,…,σN}, a user uj can be allocated to channel ci,k, if the interference received by uj, calculated with μji,k(σ)≜∑|Ui,k(σ)|t=j+1gji,kpji,k, is not higher than Tj, calculated with:
Tj=gji,kpji,k2R¯Bi,k−1−ϑji,k−ω,(19)
View Sourcewhere R¯=Bi,k⋅log2(δjminpi,k−δjmin).

We provide the proof of Lemma 1 in Appendix A, which can be found on the Computer Society Digital Library at http://doi.ieeecomputersociety.org.ezproxy.auckland.ac.nz/10.1109/TPDS.2021.3104241.

We now prove that the DUPA3 game is a potential game with Theorem 2 based on Lemma 1.

Theorem 2 (Potential DUPA3Game).
With the potential function π(σj,σ−j) below, the DUPA3 game is a potential game.
π(σj,σ−j)=−12∑uj∈U((gji,kpji,k⋅I{σj≠σ0}+Tj⋅I{σj=σ0})⋅(∑t=j+1|Ui,k(σ)|gti,kpti,k⋅I{σj≠σ0}+Tt⋅I{σj=σ0}))(20)
View Source

We provide the proof of Theorem 2 in Appendix B, available in the online supplemental material.

4.2 Algorithm Design and Convergence Analysis
It is important for a potential game to achieve a Nash equilibrium with finite iterations [29]. Based on this, the DUPA3 game employs a 2-phase process to find the Nash equilibrium that involves M users U={u1,u2,…,uM}, F data D={d1,d2,…,dF} and N edge servers S={s1,s2,…,sN}. The pseudo codes of Phase #1 and Phase #2 are presented in Algorithm 1 and Algorithm 2 respectively.

Phase #1: In this phase, DUPA3Game employs Algorithm 1 to formulate the data allocation strategy by updating joint user and power allocation decisions for individual users uj,j=1,…,M who are temporarily given the minimum power as required by δjmin. This way, DUPA3Game can allocate the most users to edge servers to achieve EDC Objective #1. The algorithm initializes σj for each user and τ (Lines 1-4). Let τ(t) and σ(t) denote τ and σj in the current iteration t. In each iteration, the algorithm first updates data allocation strategy τ(t) based on the current joint user and power allocation strategy σ(t) (Line 6).

Next, for each user uj, we calculate the current system benefit produced by σj (Lines 8). After that, Algorithm 1 attempts to find out all the possible joint user and power allocation decisions for uj to be stored in Aj (created on Line 9). To do that, we use a loop (Lines 10-18) to inspect every edge server si∈S. Specifically, edge servers that do not cover uj or do not have adequate cache spaces are excluded (Lines 11). Then, if any channels of the remaining edge servers have enough transmit power for uj, the corresponding joint user and power allocation decisions are included into Aj (Lines 12-16). Among all the joint decisions in Aj, the one σ′j∈Aj that produces the highest benefit is sent to contend for update if it produces a higher benefit than uj’s current joint user and power allocation decision.

Algorithm 1. Phase #1 in DUPA3Game Algorithm
initialization

set the joint user and power allocation decision set σj={(0,0),⋯(0,0)} for each user uj, and σ={σ1,…,σM}

initialize data allocation decisions τi,f=0 for strategy τ={τ1,1,⋯τ1,F,…,τN,F}

end of initialization

repeat

update data allocation strategy τ(t) according to σ(t)

for all uj∈U do

calculate current benefit Bτ(t),σ−j(t)(σj)

create Aj←∅

for all si∈S do

if uj∈Ui and (uj’s requested data is cached on si and adequate cache space on si) then

for all ci,k∈Ci do

if Δpi,k≥δjmin then

Aj=Aj⋃{…,(Xji,k=1,pji,k=δjmin), ⋯}

end if

end for

end if

end for

find the allocation decision σ′j∈Aj that produces the highest benefit

if Bτ(t),σ−j(t)(σ′j)>Bτ(t),σ−j(t)(σj) then

send σ′j to contend and wait for the winner

if uj wins then

update σj with σ′j

end if

end if

end for

until no decision updates

returnτ and σ

Algorithm 2. Phase #2 in DUPA3Game Algorithm
receive τ and σ={σ1,…,σM} from Algorithm 1.

repeat

for all uj∈U do

calculate current benefit Bτ,σ−j(t)(σj)

create Aj←∅

for all si∈S do

if uj∈Ui and uj’s requested data is cached on si then

for all ci,k∈Ci do

if Δpi,k≥δjmin then

pji,k=min{δjmax,Δpi,k}

Aj=Aj⋃{…,(Xji,k=1,pji,k),⋯}

end if

end for

end if

end for

find the allocation decision σ′j∈Aj that produces the highest benefit

if Bτ,σ−j(t)(σ′j)>Bτ,σ−j(t)(σj) then

send σ′j to contend and wait for the winner

if uj wins then

update σj with σ′j

end if

end if

end for

until no decision updates

returnτ and σ

In each iteration, one user’s joint user and power allocation decision is randomly selected in a decentralized manner. The calculations for individual users in Lines 5-27 is performed in parallel. The iterations repeats until no any user requests to submit its decision. Data allocation strategy τ and the joint user and power allocation strategy σ are returned as the input of Algorithm 2, which aims to achieve EDC Objective #2.

In this phase, an implicit heuristic is employed to accelerate the convergence of the game. Briefly speaking, in each iteration of the game, each user will first try to find a nearby edge server that has already cached the data it requires and has adequate transmit power to ensure the user’s minimum requirement. If such an edge server cannot be found, the user will try to find a nearby edge server with adequate caching spaces and transmit power for processing its data request. Based on this heuristic, the data allocation decisions are made in Phase #1. After that, the decision making in Phase #2 only needs to focus on user and power allocation.

Phase #2: In this phase we aim to achieve EDC Objective #2. The DUPA3Game employs this algorithm for allocating more power to each individual user uj∈U based on the data allocation strategy τ and joint user and power allocation strategy σ returned by Algorithm 1. Algorithm 2 starts with calculating the system benefit produced by the current user and power decision for uj (Line 4). Then, it iterates through all the edge servers si to find all the channels that can accommodate uj with higher transmit power than its minimum transmit power (Lines 6-15), and includes the corresponding joint user and power allocation decisions into Aj (created on Line 5).

Next, if the optimal joint user and power allocation decision in Aj produces higher system benefit than the current decision for uj, it will be sent to contend for update (Lines 16-22). This phase completes when no more decision updates are needed for any users (Line 24). Finally, τ and σ are returned as the final EDC strategy for solving the DUPA3 problem.

The DUPA3 game should achieve a Nash equilibrium within finite iterations. Let Tmax≜max(Tj), Tmin≜min(Tj), Qj≜gji,kpji,k, Qmax≜max(Qj), Qmin≜min(Qj), (i=1,…,N, j=1,…,M and k=1,…,K). The upper bound of the total number of iterations, denoted by Y, can be quantified with Theorem 3.

Theorem 3.
The total number of iterations in DUPA3Game is not more than MT2max2Qmin :
Y≤MT2max2Qmin.
View Source

We provide the proof of Theorem 3 in Appendix C, available in the online supplemental material.

Now, we can analyze the computational complexity of DUPA3Game based on Theorem 3. The computational complexity of both iteration processes in Algorithm 1 and Algorithm 2 are O(MN). Since the maximum number of iterations is MT2max2Qmin, the computational complexity of DUPA3Game is O(M2NT2max2Qmin). As defined above Theorem 3, Tmax and Qmin are constants. In addition, K is the number of channels on individual edge servers. It is usually not a large number. Thus, the computational complexity of DUPA3Game is O(M2N).

SECTION 5Evaluation
In this section, we analyze the theoretical performance of DUPA3Game first, and then we evaluate it against three representative approaches experimentally.

5.1 Theoretical Analysis
In every iteration of the DUPA3 game, the allocation decisions for individual users are made in parallel. The decision to be updated in each iteration is determined through a random selection. Such non-deterministic selections possibly lead to more than one Nash equilibrium. Therefore, the performance of DUPA3Game is based on its Price of Anarchy (POA), measured by the ratio of the central optimal EDC strategy over the worst Nash equilibrium’s utility [30]. In the DUPA3 game, we measure the utility by the overall system cost incurred and the overall system benefit produced, both of which are calculated based on the number of users allocated. Thus, we prove Lemma 2 first.

Lemma 2 (Number of Allocated User).
For any Nash equilibria σ in the DUPA3, the number of users allocated num(σ) fulfills:
⌊Tmin/Qmax⌋≤num(σ)≤⌊Tmax/Qmin⌋+1.(21)
View Source

We provide the proof of Lemma 2 in Appendix D, available in the online supplemental material.s

5.1.1 POA in Overall System Cost
Let σ∗=(σ∗1,σ∗2,…,σ∗M) denote the central optimal EDC strategy, and G denote EDC strategies achieving various Nash equilibria. Now, we analyze the overall system cost of DUPA3Game with Theorem 4 based on Lemma 2.

Theorem 4 (POA in Overall System Cost).
Given the central optimal EDC strategy σ∗ and an EDC strategy σ∈G, the POA in overall system cost denoted by ρcost fulfills:
1≤ρcost(σ)≤M−⌊Tmin/Qmax⌋M−⌊Tmax/Qmin⌋−1.(22)
View Source

We provide the proof of Theorem 4 in Appendix E, available in the online supplemental material.

5.1.2 POA in Overall System Benefit
Another optimization objective in the DUPA3 problem is to maximize the overall system benefit. Here, we prove Theorem 5 for analyzing the POA in overall system benefit of DUPA3Game.

Theorem 5 (POA in Overall System Benefit).
Given the central optimal EDC strategy σ∗ and an EDC strategy σ∈G, the POA of DUPA3Game in terms of overall system benefit, denoted by ρbenefit, fulfills:
Rmin(⌊Tmin/Qmax⌋)Rmax(⌊Tmax/Qmin⌋+1)≤ρbenefit(σ)≤1,(23)
View Sourcewhere Rmin is the minimum data rate of allocated users by DUPA3Game, and Rmax=max{Bi,k,∀ck∈C,si∈S}.

We provide the proof of Theorem 5 in Appendix F, available in the online supplemental material.

5.2 Experimental Evaluation
5.2.1 Competing Approaches
We compare the performance of DUPA3Game against three representative approaches:

Centralized Algorithm for Cache Placement (CACP) [31]: This greedy approach provides a near-optimal solution for minimizing the retrieval latency, considering the intra-cell interference and signal noise.

Data Rate Greedy (DRG): In each iteration of this approach, each user applies for its maximum power and sends its requests to all edge servers having adequate cache spaces. This approach always selects the data allocation decision that achieves the highest increase in total data rate until it satisfies constraint family (3). The user and power allocation decisions are determined after the data allocation decision is formulated.

User Coverage Greedy (UCG): In each iteration of this approach, the data allocation decision that allocates the most users is always selected until it satisfies constraint family (3). Once a data allocation decision is determined, UCG allocates the nearby users to selected edge server under the available power constraint. Similar to the DRG approach, each user applies for its maximum power.

5.2.2 Experiment Settings
A real-world dataset, named EUA dataset,2 is used to conduct the experiments. This dataset contains the geographical locations of 130,000+ users and 90,000+ base stations in Australia. The experiments are conducted in the Melbourne CBD area with 816 users and 125 base stations. To simulate EDC scenarios generically, we use unitized data sizes. The maximum data cache storage is 20 units and each data is randomly sized from 1 to 4 units. As mentioned in Section 3, each device has its own power range. Thus, in our experiments, the lower and upper bounds of each device’s power, i.e., δjmin and δjmax, are randomly selected from 1 to 3 Watts and 3 to 5 Watts, respectively, similar to the device power settings employed in [13]. Following the same experiment setting in [8], [20], each server has 10 channels, each with channel bandwidth 1MHz, transmit power 100 Watts and background noise ω=−174dBm, and we set λ=1 and loss=3 to calculate the channel gain gji,k.

We simulate different EDC scenarios in the experiments by varying three parameters, summarized in Table 2: 1) the number of edge servers N=|S|; 2) the number of users M=|U|; and 3) the number of data F=|D|. In these sets, each experiment repeats 100 times when a setting parameter varies, and the average results are reported. The overall system cost and overall data rate are employed as the performance metrics for effectiveness evaluation, corresponding to EDC Objective #1 and EDC Objective #2 of the DUPA3 problem.

TABLE 2 Parameter Settings

Computation time is employed as the metric for efficiency evaluation. Please note that decisions in each iteration of the DUPA3 game are simultaneously made. In this case, the time consumption of each iteration is calculated with the most time-consuming decision in that iteration. In addition, we also apply the number of decision iterations in DUPA3Game as the convergence time to evaluate the efficiency of a game-theoretical approach [1], [8].

5.2.3 Effectiveness
Through comparison with CACP, DRG and UCG, Figs. 2, 3, and 4 demonstrate the effectiveness of DUPA3Game. Overall, DUPA3Game achieves the highest overall data rate for users, while achieving the second lowest overall system cost. Across three experiment sets, the average advantages of DUPA3Game in the overall data rate are 116.63 percent over CACP, 119.37 percent over DRG and 104.57 percent over UCG. With respect to the overall system cost, its average performance loss compared with UCG, which achieves lowest overall system cost, is 8.82 percent in Set #1, 8.40 percent in Set #2 and 6.33 percent in Set #3.


Fig. 2.
Experiment set #1.

Show All


Fig. 3.
Experiment set #2.

Show All


Fig. 4.
Experiment set #3.

Show All

Fig. 2 depicts the results of Set #1. DUPA3Game achieves remarkably higher data rates than the other approaches in Fig. 2a. When the number of edge servers increases, the overall data rates increases for all four approaches, from 78,642 to 120,848 by 53.67 percent for DUPA3Game, from 44,624 to 51,304 by 14.97 percent for CACP, from 43,413 to 51,882 by 19.51 percent for DRG and from 50,699 to 54,802 by 8.93 percent for UCG. The reason is that, given more edge servers, users can be allocated to different channels to reduce the interference and receive higher transmit power. This is also the reason for the reduction in Fig. 2b. Since UCG is a cost-oriented greedy approach that solely minimizes the overall system cost, it is not surprising that UCG achieves the lowest overall system cost in Fig. 2b. DUPA3Game achieves the second lowest overall system cost at 27.20 on average, compared with CACP’s 33.08 and DRG’s 32.76.

The experimental results with various numbers of users are shown in Fig. 3. The overall data rate achieved by DUPA3Game significantly and consistently outperforms those achieved by CACP, DRG and UCG in Fig. 3a. The performance of DUPA3Game excels with significant advantages, 118.39 percent over CACP, 122.38 percent over DRG, 105.86 percent over UCG. In addition, with the increase in the number of users, the overall data rate achieved by DUPA3Game increases much faster than the other approaches, i.e., 145.85 percent (DUPA3Game) versus 82.14 percent (CACP), 72.91 percent (DRG) and 115.20 percent (UCG). This indicates that DUPA3Game can utilize edge servers’ resources effectively, including cache spaces and transmit power. When the number of users increases in Fig. 3b, the overall system cost increases for all four approaches. The reason is that more users cannot be allocated due to the limited cache spaces and transmit power on edge servers in the experiments.

Fig. 4 demonstrates the experimental results with various numbers of data to cache. In Fig. 4a, DUPA3Game achieves the highest overall data rate again. With more data to be cached, the performance of all four approaches declines. Fig. 4a also shows that the performance of DUPA3Game decreases much slower than other approaches, i.e. 13.75 percent (DUPA3Game) versus 33.82 percent (CACP), 34.57 percent (DRG) and 28.27 percent (UCG). In Fig. 4b, with the increasing number of data, the overall system costs achieved by all approaches increase, from 14.82 to 28.94 for DUPA3Game, from 18.40 to 37.16 for CACP, from 19.58 to 35.42 for DRG and from 14.50 to 27.40 for UCG. Since the reserved cache spaces on edge servers are limited and do not suffice to cache all the data requested by nearby users, more requested data will result in more users retrieving data from the remote cloud.

5.2.4 Efficiency
Figs. 2c, 3c, and4c illustrate the computation time taken by all the approaches in Sets #1, #2 and #3. In all the experiments, UCG takes the least time to complete, between 1ms and 7ms, and DRG takes the most time, between 95ms and 3,298ms. Compared with CACP and UCG and less than DRG, DUPA3Game takes more time to complete, between 88ms and 440ms. This is the price it pays for the significant effectiveness advantages over the other approaches as shown and discussed in Section 5.2.3. In Fig. 2c, when the number of edge servers N increases from 10 to 50 in Set #1, DUPA3Game’s computation time rises from 151ms to 325ms by 115.24 percent in Fig. 2c. When the number of users M increases from 100 to 300 in Set #2, DUPA3Game’s computation time increases from 88ms to 441ms by 401.13 percent in Fig. 3c. A comparison between Figs. 2c and 3c indicates that the impact of M is more significant than that of N. These numerical results validate the analysis of DUPA3Game’s computational complexity in Section 4.2.

Figs. 2d, 3d, and 4d demonstrate the number of iterations in DUPA3Game to achieve a Nash equilibrium. As shown in Fig. 2d, DUPA3Game requires more iterations to converge with more edge servers. The reason is that each user has more optional decision options. Thus, DUPA3Game needs more iterations to move users around to reach a Nash equilibrium. Interestingly, DUPA3Game takes fewer iterations with more data. Since the average cache spaces and user number are fixed, fewer users can be served by the data allocation strategy obtained by DUPA3Game in Phase #1. Accordingly, fewer iterations are needed to finalize the decisions for all the users in Phase #2.

SECTION 6Related Work
Multi-access edge computing (MEC) allows app vendors deploying their data on edge servers to provide their users low latency service. MEC offers many unique advantages compared with cloud computing, however, it poses many new challenges for app vendors, e.g., edge data distribution [5], edge data integrity [32], collaborative edge computing [33], etc.

In recent years, researchers are starting to investigate edge data caching (EDC). Cao et al. [4] modeled the EDC problem as an auction between the edge infrastructure provider and users, where the former determined the allocation of cache spaces based on the latter’s data evaluations. A method was proposed to calculate the cache space allocation and users’ payments for cache data that optimized the data retrieval quality. Gharaibeh et al. [3] leveraged the ability of collaborative edge servers for minimizing app vendors’ data caching cost. They proposed an online algorithm to determine how data should be retrieved and cached to fulfill users’ data requests. Tran et al. [18] targeted edge video caching specifically and proposed two approaches, one for video data allocation and the other for video request scheduling. Their main objective was to optimize users’ quality of experience by caching different bitrate versions of a video on edge servers. While edge data caching is a highly active research area where significant attentions are paid to users’ quality of experience, none of the existing studies have taken into account the impacts of networking resources, which directly dictates users’ data rates when retrieving data from edge servers.

Very recently, researchers are starting to realize the importance of networking resources in MEC. As the de facto radio access scheme for 5G, Non-Orthogonal Multiple Access (NOMA) promises low latency and massive connectivity among users and edge servers [12]. It complicates the allocation of users to base stations and has attracted a lot of researchers’ attention [15], [20], [23], [24]. Fu et al. [23] studied a joint user allocation and power optimization problem under the NOMA scheme. They first proposed a distributed user selection and grouping approach to partition users into different groups. Then, they implemented a classic heuristic algorithm to optimize power consumption based on user allocation. Nguyen et al. [24] investigated a similar joint user allocation and power control problem under the NOMA scheme, aiming to maximize the spectral efficiency. They formulated it as a non-convex problem and proposed two heuristic algorithms to solve this problem.

In the NOMA-based MEC environment, app vendors must consider the allocation of data, users and transmit power jointly and systematically when formulating their EDC strategies. Without considering the characteristics of edge data caching, existing user allocation approaches designed under the NOMA scheme cannot be integrated into EDC approaches directly to tackle the new and challenging DUPA3 problem. In this study, we proposed a novel two-phase game-theoretical approach named DUPA3Game to solve this problem specifically.

SECTION 7Conclusion
In this paper, we have tackled the edge data caching problem in MEC environments. We formulated it as a joint data allocation, user allocation and power allocation (DUPA3) problem and proved the NP-completeness of this DUPA3 problem. In order to be able to practically solve it, we proposed the novel DUPA3Game, a two-phase game-theoretical approach that formulates a DUPA3 game admitting a Nash equilibrium to solve the DUPA3 problem. We analyzed the theoretical performance of DUPA3Game and used a real-world dataset to evaluate DUPA3Game experimentally. The results demonstrate the effectiveness and efficiency of DUPA3Game for solving the DUPA3 problem.

In the future work, we will also investigate the impact of users’ dynamic participation in DUPA3 scenarios where edge devices move around.