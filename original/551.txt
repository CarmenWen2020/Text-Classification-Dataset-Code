Abstract
Two-dimensional convolution plays a fundamental role in different image processing applications. Image convolving with different kernel sizes enriches the overall performance of image processing applications. In this regard, it is necessary to design of reconfigurable convolver with respect to desired kernel sizes list. In this paper, a novel approach is presented for implementation of an area-efficient reconfigurable convolver with appropriate throughput and convolution computational time for an arbitrary kernel size list. This approach is based on the adjustment of logical blocks arrangement in the conventional convolvers. The feasibility and benefits of the proposed approach are demonstrated through a case study of the design implementation on an FPGA platform using the XILINX ISE software. Compared to the well-known reconfigurable convolvers, the proposed design significantly reduces convolution computational time and improves throughput with a reasonable number of hardware resources. For instance, the proposed reconfigurable convolver only requires 0.38 ms to perform a 3 × 3 convolution on a 268 × 460 image with 8-bit pixels and only occupies 455 slices resource of Xilinx Virtex-4 (XC4VLX25) FPGA, in which the throughput of 324 million outputs per second (MOPS) is provided with 81 MHz clock frequency for kernel size of 3 × 3. On average, the MPOS of the proposed approach is approximately improved by 43.13% in relation to the other considered alternatives. Experimental results confirm that the proposed reconfigurable convolver is a very competitive design among the alternative reconfigurable convolvers.

Introduction
2-D convolution filters are commonly used in a wide range of image processing applications, such as signature recognition, face recognition, computer vision, and forecasting applications. In these applications, the convolution operation is used as a subsystem of an image analysis system to extract different features from the input image. 2-D convolution filters perform low-pass filtering (blurring), high-pass filtering (sharpening), edge detection, edge enhancement and other image processing functions[1,2,3].Similarly, in Convolutional Neural Network (CNN) architectures that have become the most powerful method for analysis of images, different features are extracted through convolution operations[4, 5].For these reasons, 2-D convolution operation plays a critical role in the efficiency of image processing applications.

Extensive research has shown that the reconfigurability of 2-D convolver can enhance the overall performance of state-of-the-art image processing applications. For instance, successive 2-D convolution computations with different kernel sizes are emerged to enhance the quality of the input image in the image enhancement process [6, 7]. Moreover, as kernel weights and convolution window sizes can vary at runtime in image processing applications with real-time image manipulation, a reconfigurable convolver can enhance the overall performance of image processing applications [8, 9]. Similarity, image convolving with different kernel sizes are necessary to achieve better results in the CNN architectures [10, 11]. The reconfigurability of 2-D convolver is necessary to achieve better results in many image processing applications. In overall, reconfigurability empowers 2-D convolvers to support a large range of image processing applications. However, image processing algorithms require a significant number of parallel 2-D convolution operations. Moreover, although the computation of 2-D convolution operation, which includes a sum of products of weight values (kernel matrix) and variable values (image matrix), is conceptually simple, its implementation incurs high computations and intensive memory usage and occupies large chip area [12,13,14]. Therefore, it is essential to design an efficient reconfigurable convolver regarding resources consumption and system performance metrics.

Convolution operation can be performed by various hardware platforms such as Graphic Processing Unit (GPU), Application-Specific Integrated Circuit (ASIC), and Field-Programmable Gate Array (FPGA). Among these solutions, FPGA-based platforms have become the predominant hardware platform to implement 2-D convolution because of its fine grain parallelism, fast development round, and reconfigurability capabilities [3, 11, 14,15,16,17]. FPGAs can provide high flexibility and performance for convolution implementations. Different 2-D convolution designs have been presented to provide a tradeoff between performance and complexity. Some of these designs investigated the flexibility aspects of 2-D convolvers for image processing applications. In [18], a reconfigurable convolver was proposed for real-time synthetic aperture radar (SAR) imaging by inserting more static hardware resources for selecting a given 2-D convolver among several alternatives at the same time. However, the approach offered in that work incurs incredible area cost. In [19], the authors addressed the implementation of a flexible 2-D-convolution for isotropic kernels. In this regard, as several adjacent convolutions are handled in parallel, some additional modules are obtained only once and are reused many times in this architecture to perform the convolution operations on the adjacent pixels of the image. However, this convolver is only restricted to 3 × 3 isotropic kernels. The work presented in [20] investigated a reconfigurable FPGA-based pipelined 2-D convolver to support different kernel sizes by concatenating 3 × 3 convolvers. However, this design increases the overall system complexity for a large convolution kernel size. And also, modification of constant coefficients of convolution matrix and adjusting data bit resolution are not allowed. Authors in [6] introduced a fully reconfigurable 2-D convolver by the use of single instruction multiple data (SIMD) arithmetic circuits on the FPGA platform to support both 3 × 3 and 5 × 5 convolutions. Although this structure presents high flexibility and computational capability, it consumes a large amount of hardware resources and imposes high implementation cost. In [21], the authors proposed a real-time reconfigurable convolver that consists of generator and convolver modules. The generator module provides new kernel weights in every clock cycle, and the convolver module performs convolution operations. However, the transfer of the kernel weights from a generator module to the corresponding convolver module incurs high latency and also consumes high hardware resources. The work presented in [7] deals with the implementation of a flexible 2-D convolver by runtime partial reconfiguration technology on an FPGA platform for adaptive image processing. Although this convolver provides high throughput results, it requires a sophisticated memory architecture. Also, the clock frequency speed is restricted due to the high computational load in each pipeline. In [22], an FPGA-based reconfigurable 2-D convolver was presented to perform convolution operation just by digital signal processing (DSP) blocks, without using any adder-tree resources. Although this reconfigurable 2-D convolver has great advantages in resource utilization, the number of output pixel per cycle is very low and the computational time required to perform convolution operations is high. Together, these findings indicate that it is desirable to provide an area-efficient reconfigurable convolver to perform convolution operations with appropriate throughput and convolution computational time.

The focus of this paper is to introduce an efficient reconfigurable convolver as a subsystem of image processing applications. In this regard, a novel approach toward the design of FPGA-based reconfigurable convolvers is proposed to perform convolution operations for an arbitrary list of different kernel sizes. Firstly, a conventional convolver which named basic convolver is designed for the maximum kernel size in the list. Then, the basic convolver is divided in such a way that convolution operations are supported for all the kernel sizes in the list. This division convolver process is based on the adjustment of the adder blocks arrangement in the basic convolver by using the commutative property of addition. This approach can simultaneously perform convolution operations for some kernel sizes. Consequently, the system performance enhances. Also, in order to adjust the proposed convolver for a target kernel size and connecting sub-convolvers, only some multiplexer blocks are added to the basic convolver. This design does not require complex hardware modules for providing reconfigurability. As a result, it consumes reasonable number of logical resources in FPGA platforms. Moreover, for setting the convolver upon kernel size change, the architecture only needs to set selectors of multiplexers. Indeed, this scheme does not impose run-time latency to convolution operations.

In order to demonstrate the effectiveness of the proposed approach, a case study of this approach is presented for a reconfigurable convolver with kernel sizes of 3 × 3, 5 × 5, and 7 × 7 on an FPGA platform. It should be noted that these kernel sizes are commonly used for many image processing applications. In order to evaluate the performance of the proposed reconfigurable convolver against other well-known reconfigurable convolvers, these convolvers are implemented using the Xilinx Integrated Software Environment (ISE). Results are reported for different kernel sizes in terms of resource utilization, operating clock frequency, system throughput, and execution time. Experimental results indicate that the proposed reconfigurable convolver remarkably reduces the consumption of logic resources and enhances system throughput appropriately as compared to other reconfigurable convolvers. Also, the proposed reconfigurable convolver reduces the computational time of convolution operations in comparison to the other reconfigurable convolvers. These evidences indicate the competitive potential of the proposed approach in the design of reconfigurable convolvers. The main contributions of this paper are as follows:

A novel approach is proposed to design an efficient reconfigurable convolver for a desired input kernel sizes list.

The proposed approach provides simultaneous convolution operations for each kernel size as much as possible to achieve high system throughput.

There is no run-time reconfiguration latency in the proposed design during the computation of convolutions which indicates system performance enhancement.

This approach offers an efficient reconfigurable convolver with reasonable resources consumption.

The rest of this paper is organized as follows. Section 2 describes the proposed approach to design a reconfigurable convolver based on the basic 2-D convolver structure and a case study of the proposed design. Comparisons of FPGA implementations are provided in Sect. 3. Finally, Sect. 4 concludes the present work.

Preliminary studies
The basic convolver structure is introduced in this section. This is a 2-D convolver and is used for convolution operation with fixed kernel size. 2-D convolution filter is a basic operation in many image processing applications. With the use of convolutional filters, certain features from an input image such as edges and corners can be extracted [3]. The 2-D convolution operation of image for a k × k kernel size is generally expressed by Eq. (1).


 
 

(1)

where F(m, n), C, and I are the convolved pixel, convolution kernel, and the input image, respectively.

For instance, for a 3 × 3 kernel size, the unrolled representation of Eq. (1) is expressed in Eq. (2). Considering that a register circuit delays the input signal, the 3 × 3 convolution operation in Eq. (2) can be rewritten as Eq. (3). Accordingly, 2-D convolvers with other kernel sizes can be constructed [23].


 

(2)


 

(3)

With respect to Eq. (3), in general, the basic convolver can be realized in hardware similar to the structure formed for 3 × 3 kernel in Fig. 1. This convolver has k2 multipliers, k2 − 1 adders, and k2 + 1 input/output registers for a k × k kernel. For example, 8 adders and 9 multipliers modules are required to implement a 3 × 3 convolver (Fig. 1).

Fig. 1
figure 1
The basic convolver structure for a 3 × 3 kernel

Full size image

Proposed scheme
In this section, a novel approach to design a reconfigurable convolver is introduced based on the basic convolver. It is desirable to provide an efficient convolver that can perform convolution operations for different kernel sizes. The proposed approach enables the designing of a reconfigurable convolver for a number of arbitrary kernel size list. To this end, at first, a basic convolver structure is designed for the maximum kernel size of the list, Kmax, similar to the structure constructed for a 3 × 3 kernel in Fig. 1.

The basic convolver with the maximum kernel size is called as basic maximum-sized (BMS) convolver. Note that, the BMS convolver has a simple flexible structure in which the position and arrangement of the adders can easily be changed to make sub-convolvers inside the BMS convolver. Then, the BMS convolver structure is changed in order to perform convolution operation for a given kernel size list. For achieving this purpose, one approach is to put zero in the remaining cells of the convolution coefficient matrix of the convolver for each kernel size that is smaller than Kmax in the list. Note that, convolution coefficient matrix contains the weights of convolution filters. This reconfigurable convolver that is obtained from this approach is called BMS-Zero. As an example, the convolution coefficient matrix for a kernel size of 3 × 3 by the BMS convolver with Kmax = 7 is shown in (Fig. 2). It is clear that this approach wastes a lot of hardware resources. For this example, according to Fig. 1, the BMS convolver needs 49 multipliers and 49 adders, while 40 multipliers and 39 adders are wasted for performing the 3 × 3 convolution operation. However, a 7 × 7 convolver coefficients matrix can be filled by four 3 × 3 convolver coefficients matrices (Fig. 3). These figures clarify how the four 3 × 3 coefficients matrices are fitted into a 7 × 7 coefficients matrix by proper arrangement. Hence, an innovative approach is introduced to design a reconfigure convolver in such a way that wasted resources are effectively utilized for performing several convolution operations, simultaneously.

Fig. 2
figure 2
Using convolution coefficient matrix 7 × 7 for constructing 3 × 3 convolution kernel by filling zero values

Full size image

Fig. 3
figure 3
Using convolution coefficient matrix 7 × 7 for constructing four 3 × 3 convolution kernels simultaneously

Full size image

The proposed approach is based on the division of the BMS convolver into several equal-sized convolver sub-blocks to support performing convolution operations for all the kernel sizes in the list. This division process is done such that no malfunction is occurred in the BMS convolver and convolver sub-blocks can independently perform convolution operations for kernel sizes in the list. Also, each sub-block can be divided into new convolver sub-blocks. This process continues until sub-blocks are no longer divisible. These convolver sub-blocks are connected together and keep the BMS convolver structure for kernel size of Kmax. The procedure algorithm for dividing the BMS convolver into convolver sub-blocks is shown in Fig. 4. This procedure uses a set of kernel sizes as input to design an efficient reconfigurable convolver for these kernel sizes.

Fig. 4
figure 4
The proposed convolver division algorithm

Full size image

Considering descending order of kernel sizes, the division process is done in such a way that all input kernel sizes are supported and also a greater number of concurrent convolution operations is achieved as much as possible. In this way, a convolver with the maximum kernel size (Kmax) is considered. Then, the algorithm checks the next kernel size in the list, named Ki, for calculating the number of parallel convolver sub-blocks. Suppose Kx is the kernel size of the sub-block made in the previous stage. If Ki < [Kx/2], it means that more Ki × Ki convolution operations can be performed in the Kx × Kx convolver. The convolution operation is applicable for the Ki × Ki convolver sub-block and the value of Kx is set to Ki. Otherwise, no more convolution operations can be achieved for this case and the algorithm considers the current Kx to perform convolution for the kernel size Ki.

The output of the proposed algorithm for different scenarios is shown in Table 1. In order to clarify the proposed algorithm, consider the first scenario, where the kernel size list K_in is [15 7 5 3]. First, for Kmax = 15, a 15 × 15 convolver is considered (K1 = 15) and K is set to 15. For K2 = 7, condition of Ki < [Kx/2] is satisfied and four 7 × 7 convolution operations can be performed in parallel. Also, Kx is set to 7. For K3 = 5, the condition is not satisfied. Therefore, no more parallelism is achieved in this case. In fact, there is only one 5 × 5 sub-block in each 7 × 7 sub-block and hence four 5 × 5 convolution operations are performed through 7 × 7 convolver sub-blocks. Also, Kx remains 7. For K4 = 3, the condition is satisfied and there is four 3 × 3 sub-block in each 7 × 7 sub-block and hence 16 convolution operations can be performed in parallel. As shown in Table 1, the algorithm provides possible concurrent convolution operations with their sizes (k_out and Par lists) for the input kernel size list. Also, the algorithm takes care of the remaining area during the convolver division process to produce sub-block convolvers. For instance, in scenario 3, where the kernel list size is [13 7 5 3], the algorithm produces seven sub-blocks that formed from the remaining area of the convolver division process (P_ret list) with 3 × 3 convolution operations (ret list). By considering achieved four 3 × 3 convolver sub-blocks from Par list, the algorithm produces eleven 3 × 3 convolver sub-blocks for this scenario. Note that, when the algorithm examined all the kernels in K_in list, it checks remaining area of the last step. Moreover, if the 3 × 3 kernel size exists in k_in, the convolver division process is performed for the remaining area. It worth mentioning that 3 × 3 kernel size is the most used kernel size for real application. From the perspective of algorithm complexity, the time-complexity of this algorithm is O(n), where n is the size of input kernel sizes list because there is only one loop in the proposed algorithm with simple mathematical operations that have constant execution times. Also, the space complexity of the algorithm is S(n). Therefore, the execution time of the related program is achieved in a reasonable time and the occupied memory of the algorithm also linearly increases by n.

Table 1 The output of the division convolver algorithm for different scenarios
Full size table

These findings indicate that the proposed algorithm is able to determine the number of simultaneous convolution operations for each kernel size as much as possible. This can enhance the system performance by increasing the number of parallel convolution operations at the same time.

In order to control the proposed reconfigurable convolver, some multiplexer blocks are added into design structure for selecting kernel size of a given convolver in the list. Also, these multiplexers provide connectivity between convolver sub-blocks to form the BMS convolver. This indicates that the proposed deign does not require complex hardware except some multiplexer blocks. Moreover, in order to switch between different kernel sizes, the architecture only needs to change selectors of multiplexers. This approach does not impose run-time latency to convolution operations. The implementation of the aforementioned proposed approach is applicable by using the commutative property of addition in mathematics. Figure 5 generally indicates commutative property of addition. In fact, this figure shows how the arrangement of adder block of the basic convolver is changed for division convolver process. Similar to the depicted scenario in Fig. 5, the arrangement of convolver adder blocks can be changed without disrupting convolver functionality. Further details of the proposed convolver design are described later for a case study in the next section.

Fig. 5
figure 5
Illustrating commutative property of addition

Full size image

Case study
It is worth pointing out that the proposed approach is flexible enough to design an efficient reconfigurable convolver for an arbitrary list of different kernel sizes. In order to demonstrate the effectiveness of the proposed approach, a case study is presented of this approach. The details of the proposed approach for the case study are described as follows.

From the literature, 3 × 3, 5 × 5, and 7 × 7 convolution kernel sizes are commonly used in different applications, such as edge detection and image smoothing and sharpening. For instance, the Gaussian filter, as a nonuniform low pass filter, with different sigma values, is used for image denoising by convolution operations with 3 × 3, 5 × 5, and 7 × 7 kernel sizes [24]. Moreover, in classic CNN models, the convolution layer usually uses small-sized convolution kernels to achieve low time complexity and area overhead [5, 25]. For example, authors in [26] proposed a deep residual neural network model for classification of the gastric cancer images by the use of 3 × 3 and 7 × 7 convolution kernels. Thus, kernel size list (K_in) is [7, 5, 3] as a case study.

Considering this case study, the BMS convolver is formed with Kmax = 7 and the proposed convolver division algorithm starts with 7 × 7 convolver. This convolver can perform four simultaneous convolution operations for kernel size of 3 × 3 and one convolution operation for kernel size of 5 × 5. In the following, the design process of the proposed reconfigurable convolver is introduced for the case study.

First, according to the convolution structure shown in Fig. 1, the convolver structure with 7 × 7 kernel size is obtained (Fig. 6). Second, based on the commutative property of addition, the arrangement of adder blocks is changed in Fig. 6 to achieve a new convolver design. Figure 7 shows a new design of a 7 × 7 convolution after this change. With this new design, four 3 × 3 convolver sub-blocks are provided. These convolver sub-blocks are specified with different colors in Fig. 7 and can independently perform 3 × 3 convolution operations. This means that the BMS convolver can support performing of four 3 × 3 convolutions in parallel. In order to perform 5 × 5 convolution operation, the BMS convolver with Kmax = 7 is applied. As mentioned earlier, the remaining cells of the convolution coefficient matrix are filled by zero.

Fig. 6
figure 6
The structure of the BMS convolver with Kmax = 7

Full size image

Fig. 7
figure 7
A modified convolver design by adjusting arrangement of adder blocks in Fig. 6

Full size image

Finally, in order to control this reconfigurable convolver, six multiplexers are added to the design structure depicted in Fig. 8. This figure reveals the final reconfiguration convolver after adding multiplexers. The decision-making mechanism of the reconfigurable convolver is shown in Table 2. When multiplexer selector, S, is set to ‘0’, the BMS convolver works as a quadruple 3 × 3 convolver. When S is set to ‘1’, the BMS convolver can operate as 5 × 5 or 7 × 7 convolvers based on the convolution kernel coefficients matrix.

Fig. 8
figure 8
The final reconfigurable convolver design by adding multiplexers to the design in Fig. 7

Full size image

Table 2 The decision-making mechanism for the reconfigurable convolver of Fig. 8
Full size table

Performance analysis
In this section, the evaluation experiments are presented in detail.

Experimental setup
The proposed reconfigurable convolver design is coded in Verilog and implemented on the Xilinx Virtex-4 (XC4VLX25) FPGA platform [27] using XILINX Integrated Software Environment (ISE Design Suite14.7). Note that, in this work, the implementation refers to “Implementation Design” capability in ISE software on the Xilinx Virtex-4 (XC4VLX25) FPGA platform. In fact, our proposed work was not implemented on the real FPGA platform. Moreover, the experiments are conducted on Intel Core i5 CPU with is 2.2 GHz, and 8 GB of RAM. The results are generated as follows.

At first, the correctness of the functionality of the proposed design is verified for the convolution operation. To this end, the grayscale 8 bit-depth cameraman image with a size of 256 × 256 is convolved with the motion filter by using of ISE hardware simulation and the built-in convolution function in MATLAB software. The results indicate that the proposed design produces convolved image output equal to that achieved by MATLAB.

Then, the effectiveness of the proposed reconfigurable convolver is evaluated with a number of well-known reconfigurable convolvers in terms of different performance metrics. To this end, convolution operations are performed on 8 bit/pixel images by 3 × 3, 5 × 5, and 7 × 7 kernel sizes. All the convolution operations are performed in integer data. All data-width of registers, adders, multipliers, and outputs are 8-bit.

Resource utilization and performance (pixel/clock) parameters are considered for evaluation. Also, a normalized performance metric named Res_prf is introduced to provide a fair comparison among different convolvers. Resource utilization indicates the area occupancy of the FPGA platform which is conventionally measured in terms of the number of look up tables (LUTs), flip flops (FF), and digital signal processing (DSP) blocks. Performance (pixel/clock) represents the number of output pixels calculated in each clock by the convolver. Res_prf ratio is defined as follow and used to measure the amount of consumed on-chip resources per performance unit (pixel/clock).



Results and discussion
Table 3 presents the comparison of these metrics for our proposed reconfigurable convolver, BSM-Zero convolver with Kmax = 7, and the convolvers presented in [6, 7, 22, 23]. Note that, these convolvers are similar to the proposed design and are evaluated to provide fair comparison. As shown in Table 3, the proposed convolver significantly reduces area overhead compared to the reconfigurable convolvers in [6, 7]. This is due to the fact that the reconfigurability of the proposed design is obtained by adjusting the arrangement of adder blocks and only adding six multiplexers to the BSM convolver. As shown, the proposed design utilizes a very small number of FPGA resources. On this base, the Res_prf of the proposed reconfigurable convolver is also remarkably improved in comparison to the reconfigurable convolvers in [6, 7]. Moreover, note that, the proposed reconfigurable convolvers in [6, 7] do not support 7 × 7 and 3 × 3 convolution operations, respectively. From Table 3, the proposed reconfigurable convolver significantly improves the Res_prf compared to the BMS-Zero convolver, because the proposed reconfigurable convolver simultaneously performs more convolution operations in a cycle time.

Table 3 Comparison of resource utilization, performance (pixel/cycle), and Res_prf metrics for different reconfigurable convolvers
Full size table

Although, the reconfigurable convolver in [22] has a significant quantitative advantage in terms of logical resources, the Res_prf of this reconfigurable convolver is almost same as the proposed reconfigurable convolver. This is due to fact the number of output pixel per cycle of the reconfigurable convolvers in [22] is very low. As an example, for kernel size of 7 × 7, it takes 49 clock cycles to obtain one output pixel. Although the basic structure of the presented work in [23] is almost the same as our proposed reconfigurable convolver, the design in [23] does not provide reconfigurability. The proposed approach offers reconfigurability with a relatively higher MOPS for convolution operations than in [23] without significant increase in the resource utilization. Furthermore, when the kernel size increases, the resource usage in [23] will dramatically increase.

For evaluating the proposed design in more accurate manner, the performance of the considered reconfigurable convolvers is compared in terms of pixel access rate, operation clock frequency, and MOPS. Pixel access rate is the number of pixels that a convolver needs per cycle to perform the convolution operation. MOPS is the million outputs (pixels) per second of a given convolver. Comparison results are summarized in Table 4. To provide more clarification, the comparison of MOPS for different convolvers is shown in Fig. 9.

Table 4 Comparison of pixel access rate, MOPS, and clock frequency of different reconfigurable convolvers
Full size table

Fig. 9
figure 9
MOPS comparison for different convolvers

Full size image

The proposed reconfigurable convolver requires much less pixel access rate in comparison to the reconfigurable convolvers in [6, 7]. From the perspective of the memory subsystem for input and output image, the following points are discussed. In our case study with 5 × 5 and 7 × 7 kernel sizes, the memory access rate is one pixel-per-cycle for both input and output channels. For 3 × 3 kernel size, the memory access rate is four pixel-per-cycle for both input and output channels. This memory access rate can be handled with the propped memory access subsystem in [6]. This memory system is based on the fast FIFO memories considering the fact that the memory structure is fast enough to capture data. It is worth mentioning that input data are overlapped to perform a convolution operation of adjacent pixels. Hence, the input bandwidth is 6 and can be handled with an ordinary memory access subsystem for 3 × 3 kernel size. In fact, 4 times input bandwidth is the worst case scenario that can be occurred. However, the design of the memory subsystem can be different with respect to input kernel sizes list. This issue requires more investigation through the studies in future.

As it can be seen, our approach not only decreases area overhead compared to these reconfigurable convolvers, but also achieves higher MOPS with higher operating clock frequency than the reconfigurable convolvers in [6]. Note that, the reconfigurable convolver in [7] provides an appropriate MOPS, but it incurs higher runtime latency to reconfigure the convolver for a given kernel size. For instance, it takes about 1045 µs for reconfiguring of 7 × 7 convolution and imposes additional area overhead for runtime reconfigurability. Moreover, although the reconfigurable convolver in [22] provides higher working clock frequency, it has a very low MOPS in comparison to other reconfigurable convolvers. Furthermore, our design supports 7 × 7, 5 × 5 and 3 × 3 convolution operations simultaneously. The reconfigurable convolvers in [6] only support 3 × 3 and 5 × 5 kernel sizes and [7] only supports 5 × 5 and 7 × 7 kernel sizes, simultaneously. Although, the reconfigurable convolver in [22] can support the different kernel sizes, it has a very low MOPS in comparison to other reconfigurable convolvers as well as ours. However, if the kernel size increases, the required resources relationally increases to build convolvers in our proposed method as well as the other methods. Our proposed approach can improve MOPS in comparison to the other approaches because it can simultaneously perform convolution operations.

Finally, in order to provide more clarification, the computational time of the considered reconfigurable convolvers for performing convolution operations is compared. As shown in Table 5, the computational time of the proposed reconfigurable convolver is remarkably lower than the other designs. As discussed earlier, the proposed reconfigurable convolver provides a significant advantage in terms of MOPS and also it has no run-time reconfiguration latency. Together these findings verified the competitive potential of the proposed approach for design of an efficient reconfigurable convolver.

Table 5 Comparison of computational time of the different reconfigurable convolvers for performing convolution operations
Full size table

Conclusion
In this paper, a novel approach has been presented for design of an efficient FPGA-based reconfigurable convolver. This design approach offers a novel reconfigurable convolver for an arbitrary list of kernel sizes. In this regard, at first, the basic convolver is designed for the maximum kernel size of the list. Then, this convolver is divided into some sub-blocks to perform the convolution operations for all input kernel sizes. This division procedure is applicable through changing the arrangement of adder blocks in the basic convolver and also inserting some multiplexer blocks to the basic structure. This approach needs only a low number of multiplexers to be inserted in the BMS convolver, which results in a considerable reduction in resources consumption. The proposed approach offers concurrent convolution operations for each kernel size as much as possible. No run-time reconfiguration latency is incurred during the computation of convolutions in the proposed design.

The hardware realization using FPGA platform for the proposed reconfigurable convolver is explored in comparison to the well-known reconfigurable convolvers. Numerical results demonstrate that the proposed approach provides an efficient reconfigurable convolver with a reasonable resource consumption which makes it appropriate for cost-effective and high throughput image processing applications. In our design, the connectivity structure between adders can limit the clock speed. Consequently, increasing in the kernel size can increase critical path. As future work, the present work can be extended for addressing this issue. Moreover, the design of memory system can be different with respect to input kernel sizes list. This issue requires more investigation through the studies in future. Since the proposed approach performs convolution operations by filling zero in some kernel sizes, further research is required to extend the present work for enhancing the system performance in such kernel sizes.