Abstract
Recently, smart cities provide various services to citizens through the convergence of Information and Communications Technology and industries such as transportation, health care, and automobiles. Accordingly, the number of smart devices that use artificial intelligence technology to store the personal information of users to provide services efficiently is increasing. Smart devices can be used to acquire key evidence through digital forensics, which can also serve, as evidence in a court. In this study, we acquire and analyze user data stored in wearable devices by applying a data acquisition framework for smart devices. This study contributes to the acquisition of key evidence for investigations.

Introduction
Smart cities provide convenient services to citizens by combining Information and Communications Technology, such as big data and IoT (Internet of Things), with industries such as health care, automobiles, construction, and transportation. As such, various smart devices have been developed and released [1, 2]. In particular, smart devices such as home IoT devices (smart speaker, smart TV, etc.) and wearable IoT devices (smartwatches, smart glasses, etc.) have been in use. Smart devices are generally connected to smartphones to receive personal information from users and provide customized services. These devices store personal information, such as health care and net-browsing, that is used to provide convenient services on a device or the cloud [3]. For example, an AI ​​speaker provides functions such as weather, news, and Internet search through voice, as well as stores the user location, search history, and third-party application account information. In wearable devices, health-related functions such as heart rate and movement record are provided through a smartphone connection, whereas user location information, heart rate information, and connected smartphone information are stored. In addition, there is personal information used for device setting. The data stored to provide these services can be used as evidence in an investigation from a digital forensic perspective. For example, in 2016, a suspect was arrested in Arkansas by acquiring voice data recorded on an Amazon AI speaker [4]. In addition, data stored on a Fitbit, a smart band, were used as court evidence in a 2015 murder case in Connecticut, USA [5]. Thus, many types of personal information exist in smart devices, and data acquired through a data extraction and analysis of the device can be used as conclusive evidence in an investigation. Smart devices are very small and limited. In addition, since many manufacturers use different types of operating systems, it is difficult to apply traditional forensic techniques. Therefore, digital forensic studies focusing on smart devices are required. In this study, a data acquisition framework for smart devices was applied to wearable devices such that they can be used in the investigation process through data acquisition and analysis. This can enable the investigation of wearable devices at crime scenes. Section 2 introduces related studies on smart devices. In Sect. 3, a data acquisition framework that can be used for smart devices is described. In Sect. 4, data acquisition and analysis enabled by applying the framework to a wearable device are presented. The experiment is described in Sect. 5, and the conclusions are provided in Sect. 6.

Related work
As mentioned before, smart cities provide services by being connected to external networks through the convergence of industry and Information and Communications Technology. Connecting to external networks provides convenience while also increases cyber threats. In order to respond to smart city cyber incidents, many security-related studies have been conducted on infrastructure such as industry and health care [6,7,8,9,10,11,12,13]. Digital forensic studies on smart devices are also being conducted extensively, such as smart home, wearable devices, and ecosystem that can be easily accessed. [14,15,16,17]. In studies pertaining to the smart home environment, data acquisition and analysis have been performed by configuring various home IoT devices to analyze user behavior [18,19,20,21,22,23,24,25,26]. Kim et al. proposed a digital forensic framework, as well as data acquisition and analysis methods, for Nest Hub, Samsung SmartThings, and Kasa cam, which are smart home IoT devices [25]. Hutchinson et al. explained security threat scenarios for various home IoT devices and analyzed home IoT devices such as smart hubs and smart cameras [26]. In addition, digital forensics for AI speakers that control the smart home environment have been investigated [27,28,29,30,31,32]. Shin et al. collected and analyzed encrypted traffic between devices and the cloud that stores user data for AI speakers; they developed a tool to acquire artifacts stored in the cloud [32].

In the case of wearable devices, because users always wear them to obtain information pertaining to health and location, several studies on the data acquisition and analysis of wearable devices have been conducted [33,34,35,36,37]. MacDermott et al. acquired and analyzed important user data for Garmin, Fitbit, and HETP devices. They performed the imaging and analysis of Garmin instruments using several forensic tools to identify information including user data such as activity duration, GPS coordinates, user-defined settings, or activity logs stored in the devices. For Fitbit, they analyzed the Windows 10 application connected to the device and acquired user personal information from a database in a specific location on the PC. For HETP, they were unable to acquire user personal information from the device itself. Although they analyzed three wearable devices to acquire data that can be used as evidence, the target devices had been released a long time ago; therefore, their methods are restricted in terms of their application to the latest wearable devices [36]. Becirovic et al. proposed a data acquisition and analysis method for Gear S3 Frontier, which is a smartwatch manufactured by Samsung, and derived artifacts stored in the device. They connected the device to a PC through a Wi-Fi wireless connection and accessed the internals of the device using TizenOS via a smart development bridge. Subsequently, through device analysis, it was discovered that personal information such as linked smartphone information and phone number, as well as user artifacts such as GPS information, was stored in the smart device [37]. In addition, digital forensic investigations pertaining to smart devices have been conducted. However, owing to the characteristics of IoT devices, their internal structures differ by model and are miniaturized. Therefore, additional research must be conducted as the latest devices are being released.

Data acquisition framework for smart device forensics
Figure 1 shows the data acquisition framework used for performing experiments on smart devices in this study. The proposed framework uses software-based and hardware-based data acquisition methods for data extraction. Hardware-based data acquisition, such as JTAG and Chip-off, which should be preceded by PCB analysis, can cause permanent damage to the device. In the case of chip-off, physically separating NAND flash memory limits software-based data acquisition. Therefore, software-based data acquisition must be conducted before hardware-based data acquisition. For software-based data acquisition, the device must be connected to PC first. Several methods can be used to connect a device to a PC, e.g., via USB, Wi-Fi, and Bluetooth connections. Although no other physical ports are officially provided by manufacturers to users, hidden ports for developers may exist. It may be possible to connect a device to a PC through a pin map on PCB. When a connection to the PC is established, then the inside of the device can be accessed. Android-based devices can be accessed through an Android debug bridge (ADB). After accessing the inside of the device, the internal data can be acquired using the debug bridge, etc., in a non-rooting state. However, because of permission issues, only some data can be acquired, and in some cases, important data cannot be obtained.

Fig. 1
figure 1
Data acquisition framework for smart devices

Full size image

Alternatively, data can be obtained after administrator privileges are acquired through rooting. This rooting method is different for each operating system installed on a smart device, and rooting may be difficult for some operating systems. In addition, integrity may be violated during the rooting process. This rooting method presents several limitations; however, if administrator privileges are acquired, meaningful user data can be acquired.

In addition, data inside a device can be acquired using physical methods, including the joint test action group (JTAG) method. Flash memory can be imaged by connecting a pin corresponding to the JTAG port through PCB analysis. However, this is difficult to perform when the manufacturer removes the JTAG port or when the pin map is not known. Another method is the chip-off method, which physically separates the flash memory. In general, IoT devices use NAND flash memory. After separating the NAND flash memory in the device, it is mounted on a PC through a NAND flash reader to acquire data. However, expensive equipment is required to perform this chip-off process, which cannot be performed if the corresponding device does not use NAND flash memory. Therefore, in this study, we investigated whether the chip-off method is feasible. In addition, a few methods can be used to verify internal data through device manipulation, e.g., through manipulating displays and buttons, as well as to acquire data for connected smartphones. However, they are omitted in the framework proposed herein.

Data acquisition and analysis
In this study, data were acquired by applying the data acquisition framework to some wearable devices, and analysis was performed on the acquired data. Five wearable devices were used in the experiment, and the device information used in the experiment is listed in Table 1. These wearable devices were selected for study because they are the world’s best-selling products and have been released by major wearable device manufacturers. In some cases, the FTK Imager and ADB were used for data acquisition and analysis.

Table 1 Wearable device used for test
Full size table

A. Amazfit Stratos 3
The Amazfit Stratos 3 model can be connected to a PC using a rechargeable USB provided by the manufacturer. Since Amazfit OS is based on Android, it is compatible with the ADB. Therefore, the inside of the device can be accessed using the ADB, as shown in Fig. 2.

Fig. 2
figure 2
ADB access to Amazfit Stratos 3

Full size image

Moreover, the directory structure, file name, etc., can be obtained in the non-rooting state. However, as mentioned above, because a permission issue occurs (as shown in Fig. 3), data acquisition is restricted.

Fig. 3
figure 3
Permission issue in non-rooting state

Full size image

The Android-based Amazfit OS used by Stratos 3 can be rooted similarly as for an Android smartphone. The device rooting was performed by flashing the firmware with root privileges. After acquiring the root privilege, an image dump was performed, and the file system image was analyzed using FTK Imager, as shown in Fig. 4. Ext4 was used as the file system, implying that the deleted files can be recovered [38].

Fig. 4
figure 4
Internal data analysis using FTK Imager

Full size image

Table 2 shows the data acquired in Stratos 3. Forensic artifacts can be acquired from five files, and the data include those pertaining to the device settings, user data, and activities.

setting.db

setting.db file in the /data/com.android.providers.settings/databases/ path has seven tables and contains values for common device settings. Among the seven tables, the “global” and “secure” tables contain forensic artifacts. In “global” table, the smartwatch settings including the device name and last charging time are saved as shown in Fig. 5. As shown Fig. 5, the last charging time was 1,604,385,466,000. Through a Unix timestamp conversion, it can be seen that it was last charged at 6:37:46 (GMT + 0000) on November 3, 2020.

In “Secure” table, as shown in Fig. 6, it was confirmed that information related to the device communication has stored. Device_bound_time represents the estimated time when the smartphone was connected, and it was found to be connected on November 03, 2020, 04:55:43 in the same manner as described above. In addition, the Bluetooth name and Bluetooth address were stored.

external.db

external.db is located in /data/data/com.android.providers.media/databases and contains file information saved in the device through a PC connection. external.db has 12 tables, and forensic artifacts is stored in the “file” table. Except for the “file” table, no important data were found, and some tables had no values. In “file” table, as shown in Fig. 7, the name, size, type, and date of the saved media file are stored.

Box.xml

Smartwatch user information is stored in the Box.xml file in the /data/com.huami.watch.hmwatchmanager/shared_prefs/ path. As shown in Fig. 8, this file contains the birthday (month and year), height, gender (male: 1, female: 2), and wrist wearing smartwatch (left: 1, right: 2) information of the smartwatch user. In addition, user data such as weight and last charging time are stored. The last charging time of the Box.xml file has the same value as that of the setting.db file.

allday_heartrate.db

Information regarding the user’s heart rate is stored in the allday_heartrate.db file in the /data/com.huami.watch.health/databases/ path. allday_heartrate.db has two tables, and the “allday_heart_rate” table contains forensic artifacts. As shown in Fig. 9, the “allday_heart_rate” table stores the heart rate of the user measured through the heart rate measurement application. The data are stored in Unix day format, and as shown, the value of 18,569 corresponds to November 3, based on Unix day conversion.

sport_data.db

Table 2 Data acquired from Amazfit Stratos 3
Full size table

Fig. 5
figure 5
“Global” table data in “setting.db”

Full size image

Fig. 6
figure 6
“Secure” table data in “setting.db”

Full size image

Fig. 7
figure 7
“file” table data in “external.db”

Full size image

Fig. 8
figure 8
Data from “Box.xml”

Full size image

Fig. 9
figure 9
“allday_heart_rate” table in the ‘allday_heartrate.db’

Full size image

The sport_data.db file has 12 tables and stores sports data. There were no data in 11 tables except “heart_rate” table. As shown in Fig. 10, the “heart_rate” table saves the exercise start time, heart rate during exercise, and runtime. Therefore, fluctuations in heart rate over time can be measured.

Fig. 10
figure 10
“heart_rate” table in “sport_data.db”

Full size image

B. Huawei Watch GT 2
In the Huawei Watch GT 2, the charging dock and smartwatch connection are composed of two pins, i.e., ground and power pins, as shown in Fig. 11. As these pins cannot transmit data, the device cannot be connected to a PC using the charging dock.

Fig. 11
figure 11
Huawei Watch GT 2’s wired connection interface

Full size image

Huawei Watch GT 2 does not have an interface that can be connected to a PC, even in the PCB. Therefore, its internal data cannot be extracted by connecting it to a PC. In addition, the JTAG cannot be identified through PCB analysis; however, it contains Kington’s 4 GB flash memory, as shown in Fig. 12. One should be able to extract the memory data using a reader compatible with flash memory.

Fig. 12
figure 12
eMMC chip inside Huawei Watch GT 2

Full size image

C. LG W7
The LG W7 model can be connected to a PC through USB for charging, and because the Android-based WearOS is used, the inside of the device can be accessed through the ADB, as shown in Fig. 13. Similar to Xiaomi, the file name and directory structure of LG W7 can be determined in a non-rooting state; however, we did not find any meaningful data through ADB because the privilege is limited. WearOS should be able to perform rooting by applying a methodology similar to that used in existing Android-based devices. However, rooting is not possible because the device’s custom firmware does not exist. In addition, through PCB analysis, a chip presumed to be a flash memory was discovered, as shown in Fig. 14; as such, data acquisition through chip-off is likely to be possible.

Fig. 13
figure 13
LG W7 internal data accessed through “adb shell” command

Full size image

Fig. 14
figure 14
eMMC chip inside LG W7

Full size image

D. Fitbit Charge 4
Fitbit Charge 4 models contain Fitbit firmware. Fitbit Charge 4 cannot be connected to a PC using a charging USB; however, it can be connected through Bluetooth. However, if the Fitbit application for Windows is not installed, then the PC cannot recognize the Fitbit. Therefore, internal access to the shell is difficult. This device is a smart band that is smaller and lighter than other smartwatches and provides relatively limited functions. Therefore, the usage of the JTAG will be more restricted owing to the small-sized board used, as shown in Fig. 15; furthermore, a flash memory for chip-off could not be identified.

Fig. 15
figure 15
PCB Board of Fitbit Charge 4

Full size image

E. Xiaomi Mi Band 4
The Xiaomi Mi Band 4 model uses its own firmware and cannot be connected to a PC using a charging dock. Therefore, its internal data cannot be acquired using a PC connection. As Mi Band 4 is as small as Fitbit Charge 4, the JTAG is not expected to function. However, as shown in Fig. 16, if a chip presumed to be a flash memory and a compatible reader for the chip exist, then data can be acquired.

Fig. 16
figure 16
Xiaomi Mi Band 4 PCB Board

Full size image

Discussion
In this study, we proposed a framework for data acquisition of smart devices. To prove the proposed framework, an experiment was conducted on wearable devices. In the experiment, wearable devices from Xiaomi (Amazfit Stratos 3 and Mi Band 4), Huawei, LG, and Fitbit were used. For the devices other than Xiaomi’s Amazfit Stratos 3, significant artifacts could not be acquired from a digital forensic perspective. In the case of Xiaomi’s Amazfit Stratos 3, we use the charging dock to connect to the PC and use ADB to access the inside of the device. We were able to identify the file names and directory structures through ADB, but could not find any important data due to permission issues. Therefore, we tried to get the root privileges of Amazfit Stratos 3. We obtained root privileges through custom firmware and were able to extract forensic artifacts. Device information and user information could be obtained, and it is expected to be possible to identify the device user and prove an alibi based on heart rate and timestamp information. An overview of the information we have acquired is summarized in Table 2. In the case of the Huawei Watch GT 2, the charging dock provided by the manufacturer consists of two pins, so it can only charge the battery. We could not find hidden ports to connect to the PC, and we could not extract data through the PC connection. However, the eMMC chip was identified through PCB analysis and the possibility of data extraction through chip-off was confirmed. LG W7 was able to connect to a PC using the charging dock and access the inside of the device through ADB. However, we did not find any important data because of permission issues. We tried to get the root privileges of LG W7, but could not find a way to get root privileges. Afterward, the eMMC chip was identified through PCB analysis and the possibility of data extraction through chip-off was confirmed. Fitbit Charge 4 and Xiaomi Mi Band 4 were lighter than other smartwatches, so there were limitations in terms of data acquisition.

Overall, for software-based data acquisition of wearable devices, it must be connected to a PC. If the wearable device uses an Android-based operating system, it is possible to access the inside of the device through ADB. However, in the case of non-rooted devices, it was difficult to find meaningful forensic artifacts due to permission issues. If it is possible for a device to gain root privileges, it can acquire forensic artifacts. However, there is a limitation in that methods for acquiring root privileges are different for each operating system and there are few known methods. Therefore, it is necessary to study a method for obtaining an optimal root privileges for each wearable device. For hardware-based data acquisition of wearable devices, pcb must be analyzed first. If a JTAG port is found, the disk image can be extracted through JTAG. However, in this experiment, the JTAG port could not be found, so it could not be performed. Additionally, if the wearable device uses NAND flash memory, the chip-off technique can be used. In this experiment, we found NAND flash memory of LG W7 and Huawei Watch GT2, and it is presumed that data can be acquired if there is a compatible reader.

Conclusion
Smart cities are composed of smart devices that use the latest ICT technologies to efficiently manage cities and improve the quality of life. Smart devices store user information to provide convenient services, which can also be used as key evidence in actual investigations. Therefore, in this study, data acquisition and analysis were performed by applying the proposed smart device data acquisition framework to five wearable devices. In the Xiaomi device, device information such as device name, last charging/connecting time, and MAC address, as well as user input information such as heart rate and exercise time could be acquired. In the Huawei and LG devices, it was confirmed that although the inside of the device could be accessed using a PC, meaningful data could not be obtained, and that data could be obtained using chip-off technology. Smart bands such as Fitbit Charge 4 and Mi Band 4 are more compact than smartwatches and have fewer functions, rendering it difficult to apply a logical/physical forensic method on them.

In future studies, the acquisition of artifacts through a detailed analysis of operating systems in wearable devices such as Samsung’s TizenOS and Apple’s WatchOS, as well as WearOS and Amazfit OS, should be investigated. In addition, because smart devices generally use flash memory, further research regarding physical acquisition methods for smart devices such as chip-off and JTAG should be performed.