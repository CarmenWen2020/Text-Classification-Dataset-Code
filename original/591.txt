Abstract
To attract more customers, a cloud provider tends to give some discounts to a customer if he/she rents a plenty of resources. Under this situation, a group of customers who need homogeneous cloud instances with various deadlines are prone to purchasing resources in a collaborative manner, i.e., using a coalition game, to reduce purchase costs. It is essential to design a mechanism that enables all customers to voluntarily and happily collaborate while ensuring that each customer pays at the lowest cost possible. To address this issue, we propose a mechanism to show collaborative interactions between customers and determine the number of service programs purchased from each provider to charge each cloud customer a minimum cost. We establish a coalition game based on multi-customer resource procurement and prove that there exists a unique optimal solution in the coalition game, while satisfying individual stability and group stability. In addition, the optimal solution is a solution in which the selected service program of each coalition optimizes the cost per customer and maximizes resource utilization. We propose a heuristic Deadline-constrained Resource Coalition Allocation (DRCA) algorithm to calculate the near-optimal solution. A backtracking algorithm is proposed to calculate the pseudo maximum resource utilization of the provided programs by improving the rectangular packing. Extensive experiments are performed to verify the feasibility and effectiveness of the proposed algorithm.


Keywords
Cloud computing
Coalition game
Rectangular packing
Resource procurement

1. Introduction
1.1. Motivation
Benefiting from excellent computing power and elastic resource allocation, cloud computing is widely applied in a variety of applications, such as Amazon EC2, Microsoft Azure and Google AppEngine [6]. It offers an attractive paradigm of dynamic provisioning computing services in a pay-as-you-go manner [33]. In the real world, providers offer cloud service/computing resources to customers at various prices, depending on the amount of resources customers need and the length of the rental service. In general, the longer the cloud service time or the more cloud instances the customer rents, the lower the rental price per unit. Faced with a variety of service programs offered by providers at various prices, it is important to configure appropriate resource procurement strategies for multiple customers to minimize overall purchasing costs.

In cloud scenario, cloud customers submit the computing resource requests to the cloud providers, and cloud providers make resource allocation according to the resource requirements of multiple cloud customers. According to customers’ different types of task requirements, it is normal for each customer to have an expected completion time, i.e., deadline constrain. Many customers only need to rent resource services within a certain deadline, which is not less than the resource lease time. We can find that many researchers studied the issues related to cloud customers with different deadline constrains [11], [15], [26]. Besides, each customer wants to reduce costs while his requirements are met. Many customers reduce their costs through purchasing cloud resources provided by the brokers [5], [22], [40], comparing the prices of cloud resources provided by multiple providers, or purchasing cloud resources in combination [39].

Therefore, suppose a customer wants to rent a relatively short-term cloud service or a small amount of cloud instances before a specified deadline. In this scenario, if he rents cloud instances as an individual, the rental cost is high, and the customer is not entitled to preferential treatment. The customer also wants to pay a lower price as long as available service programs meet his demands. As a solution, several customers can purchase a low-cost service program in a cooperative way to reduce their individual costs. It is essential for each customer to choose the most appropriate customers to collaborate with and purchase service programs from appropriate providers to minimize the cost per customer.

In cloud computing, various mechanisms were have been proposed to optimize the cost or benefit of providers [12], [18], [31], [32], [36]. However, far fewer studies focus on the cost or benefits of the customers [17], [25]. Our work focuses on optimizing cost for customers using a coalition game. In Table 1, the comparison of the related cloud computing resource purchase models with some properties intuitively shows our motivation.


Table 1. Comparison of cloud-computing-resource purchase models.

Model	Object	Deadline	Incentive	Method
 [31]	MP	No	No	CF
 [37]	MC	No	No	CF
C-DSIC,C-BIC,C-OPT [25]	SCU	No	Yes	auction
 [17]	MC	No	No	NC
IEDA [36]	MP	No	Yes	auction
DRCA (our work)	MC	Yes	Yes	CF
MP: multi-provider, MC: multi-customer, SCU: single customer, CF: coalition formation, NC: non-cooperative.

1.2. Our contributions
In this paper, we focus on a multi-customer cooperative mechanism for leasing cloud resources and design a platform for customers to submit their resource purchase demands, including quantity, rental time, and deadline. Based on the information provided by the platform, customers can determine the number of service programs purchased from each provider and achieve the lowest cost. After formulating the proposed issue as a knapsack packing problem, we propose an incentive backtracking algorithm to show the cooperation configuration. Experiments are conducted to show the cost difference between the states of a single resource purchase and collaboration. Our main contributions are as follows.

•
We propose a cooperation between cloud customers on resource demands with different deadline constraints, and design an incentive cooperation platform.

•
We add a deadline constraint on the basis of the 2D rectangular packing problem [10] and propose a heuristicDeadline-constrained Resource Coalition Allocation (DRCA) algorithm to calculate the near-optimal solution. The farther the customer’s deadline, the higher the customer’s priority and the lower the price.

•
A backtracking algorithm based on the knapsack packing problem is proposed to configure the customer cooperation strategy, determine the number of service programs purchased from each provider, and calculate the resource price and the execution order of each customer to minimize the cost of all cloud customers.

•
Experiments are performed to evaluate the proposed algorithm in terms of cost analysis of customers, deadline analysis, and effectiveness evaluation.

The remainder of the paper is organized as follows: In Section 2, we introduce the related work. Section 3 describes the system model and the coalition formation game. In Section 4, we prove the existence of the optimal solution of the coalition game. In Section 5, a heuristic DRCA algorithm is proposed to calculate the near-optimal solution. In Section 6, extensive experimental results indicate the feasibility and effectiveness of our algorithm. We conclude the works of this paper in Section 7.

2. Related work
Cloud computing technology has been rapidly developed and widely used owing to its flexible resources and on-demand payment models, and has attracted academic and industrial attention. We present a review of the related work on cloud-computing resource procurement, coalition games, and 2D rectangle packing.

Resource procurement has been extensively studied in various areas, such as edge computing [23], smart grids [27], and cloud computing [4], [13], [16], [25], [31], [37]. In [25], Prasad et al. proposed mechanisms to help customers choose the appropriate providers and purchase resources at reasonable prices. In [4], Baranwal et al. proposed a multi-attribute combinatorial reverse auction for cloud resource procurement, which considers both price and non-price attributes. There are abundant studies on cloud computing resource procurement based on customer groups [31], [37]. In [31], economic encounters between consumers and cloud providers are modeled as a many-to-many negotiation. In addition, Sim et al. devised a novel interaction protocol and a novel negotiation strategy. In [37], Wang et al. designed an implementation scheme to support group-buying on the cloud market with the method of coalition formation game. Besides, numerous studies focused on the behavior of providers in the face of multi-customer resource procurement [7], [29], [36]. However, previous efforts did not consider multi-customer resource requirements under deadline constraints. Our work highlights the cooperative resource procurement among customers under deadline constraints to charge the lowest cost for each customer.

Game theory is an important mathematical method for studying conflicts and cooperation between intelligent rationaldecision-makers [2], [19], [28], [30]. Coalition games play an increasingly important role in computer science [20], [21], [24], [34], [35]. In [35], Tram et al. offered an optimal price policy for each provider to maximize final revenue from the perspective of competition and cooperation among providers. [20] proposed a game theory framework (termed Cooper) for task collocation, in which preserving performance was presented to find user collocation preferences and determine stable matches among them. In [21], Marinescu et al. formed dynamic rack-level coalitions of servers and created a package of these coalitions to address resource management issues for big data applications. In [24], Pillai proposed a resource allocation mechanism to minimize wastage and configure services before actual requests. In our work, we heuristically formulate a coalition mechanism based on established coalition rules to minimize the cost of each customer who purchases resources with his deadline constraints.

The 2D rectangle packing problem is a subset of the classical packing problem. Numerous algorithms, especially heuristic algorithms, have been proposed in previous years [1], [3], [8]. In [3], Baker et al. proposed the Bottom-Left (BL) heuristic algorithm that was improved to create a Bottom-Left-Fill (BLF) algorithm [8]. In [1], the Greedy Randomized Adaptive Search Procedure (GRASP) algorithm was proposed for the constrained 2D nonguillotine cutting problem to maximize the value of the cutting pieces. Huang et al. proposed a heuristic algorithm based on two important concepts: corner-occupying action and caving degree [10]. More algorithms for 2D rectangular packing can be found in [14], [38]. Heuristically, we approximately view the coalition system, where a coalition purchases a service resource program is seen as a 2D rectangular packing problem, and the optimal goal is to maximize the resource utilization of the program. The difference between our work and the existing works is that each customer needs to consider his position constraint, i.e., deadline.

3. System model and coalition formation game
3.1. Cloud instance providers
A set of cloud service providers is denoted as ,  and indexed by . Provider  supports 
 resource types which is indexed by . The th type of service resources provided by the provider  is represented as 
. There are 
 service programs of resource 
. The th service program is denoted as 
 
, where 
 are the number of resources 
, the available service time, and the price of the service program, respectively. Additionally, we suppose 
 as a standard service program with a standard price 
. For example, the configuration of an Elastic Compute Service (ECS) instance of Alibaba Cloud [9] and the corresponding service resource programs are shown in Table 2, Table 3, respectively. The unit prices of 
 and 
 are 37.544 and 31.233, respectively, while the on demand standard service price is 87.312. As the number of cloud instances or service time increases, the price concession for service programs increases.


Table 2. Configuration of an ECS instance of Alibaba Cloud [9].

District	I/O	CPU	Memory	System disk
NC1	ecs.g5.2xlarge	8cores	32G	ultrahigh.io200GB

Table 3. Resource service programs of the ECS instance.

 (day)	
Real unit price
1	1	87.312	87.312
1	30	1039	34.633
3	90	8433	31.233
5	180	26 580	29.533
3.2. Cloud customers
A set of cloud service customers is denoted as  and indexed by . These customers can either be a set of individuals or enterprises who have cloud resource demands with various deadline constraints and want to cooperate with others to minimize their costs. We assume that the customers are trustworthy and not malicious. The resource purchase demand 
 of customer  is defined as: 
, and 
, where 
 is the number of resources of 
 required by the customer , 
 is the rental time, and 
 is the corresponding deadline. In addition, we denote the set of customers that require 
 as 
. The collection of demands of customers in 
 is denoted as 
. As an example, if customer  needs 5 VMs of resource 
 for 6 h and his deadline is 10 h, and the resource configuration of this type is shown as Table 2. Therefore, his resource purchase demand can be represented as 
.

The objective of a customer is to purchase resources to meet his demand while minimizing the cost. Each customer can participate in multiple programs at the same time. Therefore, the individual optimal purchasing strategy of customer  can be formulated as an optimization problem: (1) 
 
 
 
 
 
 
 

 and 
  are the purchase profiles of customer  and represent the number of service programs 
 and 
, respectively. 
 is the number of resources and 
 is the time length that the customer  uses in the th service program 
 (
).  shows that the total number of resource purchased by customer  from 
 is equal to the resource requirement of customer .  guarantees that each service program selected by customer  meets the requirements of customer . Note 
.

3.3. An illustrating example for customers’ coalition
We give an example to illustrate customers’ coalition equilibrium state and their choice of programs. We denote the unit price of a service program as the symbol . In the provider profile (shown in Table 4(a)), the first column lists the service programs and the second column lists the corresponding service program prices. In particular, the third column lists the corresponding unit price . We consider three customers . As listed in Table 4(b), the requirements of customer  are ,  and , respectively.

All candidate coalitions formed by customers  are enumerated in the first column of Table 4(c). The second column shows the selected programs that achieve the total cost minimum. The third column shows each customer’s cost by calculating the proportion in the corresponding coalition. For example, the coalition  selects the program 5 × 8 at the price . Then the cost of customer  is equal to 
 
. The last column shows the total cost of all customers in the coalition. From Table 4(c), customers ,  and  prefer to cooperate together because it minimizes each customer’s cost as well as the overall cost of all customers in the coalitions. In the current situation, no customer wants to leave this coalition, and no other customers want to join so that it reaches a equilibrium situation.

As the number of customer increases, it is difficult for each customer to find an appropriate coalition to get a lower price. However, coalition game can solve this problem well, because it can formulate a series of rules to make the overall system reach equilibrium state, i.e., individual stability and group stability. In Sections 3.4 and 3.5, we introduce the cooperative purchase platform and the coalition formation game in detail.


Table 4. An illustrating example for customers’ coalition.

(a) provider profile
Program	price		Program	price	
1 × 1	
1	1 × 1	
1
5 × 5	
0.9	5 × 8	
0.8
8 × 8	
0.68	6 × 10	
0.7
10 × 10	
0.6	8 × 9	
0.65
(b) Customers’ requirement
Customer	1	2	3
Requirement			
(c) Coalitional customer strategies and costs
Formed coalitions	selected program	
{1}, {2}, {3}	
, 
, 
15, 8, 12	35
{1, 2}, {3}	
, 
14.67, 7.83, 12	34.5
{1, 3}, {2}	
, 
17.78, 8, 14.22	40
{1}, {2, 3}	
, 
15, 12.8, 19.2	47
{1, 2, 3}	
13.7, 7.3, 11.0	32
3.4. Cooperative Purchase Platform (CPP)
In real life, it is difficult for individual customers to find many collaborators. A Cooperative Purchase Platform (CPP) is devised to allow customers to submit their resource purchase demands. The main tasks of CPP include classifying customer purchase information and calculating customer cooperation solutions. The CPP holds the following characteristics:

(1) Time-window-based purchase demands collection. Considering that the purchase demands are arriving in a endless sequence from different customers, CPP provides a time-window-based purchase demand collection mechanism. Let  be the length of each time window. Customer purchase demands in the same time window will be involved in a coalition game.

(2) Profit-driven and social-driven operating patterns. CPP supports two operating patterns: benefit-driven pattern andsocial-driven pattern. Based on the benefit-driven pattern, CPP maximizes the customers’ initial fee by providing convenience to customers as a third-party agency. Based on the social-driven pattern, CPP can be seen as being provided by providers and free to customers in order to attract more customers to purchase their resources. We use the social-driven pattern in this paper.

(3) Group purchases in parallel by resource category. The CPP matches the customer’s purchase demands with the provider’s computing resource categories, such as CPU, memory, and data storage. Customers are divided into multiple groups according to their demands of computing resources, and each group can be operated in parallel.

Fig. 1 is the framework of cooperative purchase platform. The CPP is refreshed every  time. During this time, customers submit their requirements to CPP, which then sorts and classifies these requirements. Further, the platform will show collaborative interactions between customers by using the method of formulating coalition rules, modifying knapsack packing, and maximizing resource utilization to be introduced in the following section. At last, CPP informs customers of the result of the coalition.


Download : Download high-res image (187KB)
Download : Download full-size image
Fig. 1. Framework of cooperative purchase platform.

3.5. A cloud-customer coalition formation game
To provide a stable coalition structure and purchasing strategy for a group of selfish customers, cooperative game theory offers a useful set analysis tools and algorithms [2], [30]. The cloud resource purchasing problem in our work can be formulated as a nontransferable utility coalition formation game 
, where  is the collection of all customers, 
 is the total demand of customers in , and  is a cost function for each coalition.

We set 
, 
 and 
, where  is a set of customer coalitions, 
 is the purchase cost profile of , and  
. In addition, a collection is any family  of mutual coalitions, and  is a partition of . In addition, we also consider the set of customers who purchase standard service as a coalition and  
.

We take a set of customers who can jointly purchase a service program 
 as a coalition. If a customer set collaborates to purchase multiple programs, the set can further be split into two or more coalitions. We can know that a coalition either purchases a program ( 
 and 
) or standard service ( 
 and 
).

We establish a - plane coordinate system, where the -axis and -axis represent the number of services and service time, respectively. Supposing 
 and 
, the bottom left and top coordinates of the customer  are 
 and 
, respectively. We denote the position of customer  in the program 
 as 
, 
, where 
. In other words, the regional position of customer  can be simply denoted as 
 
. 
 and 
 are the number of resources in program 
 and 
 required by the customer  (
), respectively. For every customer , the sum of 
 and 
 should equal to his requirement 
, i.e., 
. In addition, customers in 
 must meet the following conditions of 
:

•
  
, 
, 
,

•
  
, 
.

Thus, the optimal purchase strategy for all customers can be characterized by the following integer programming (2)
 
We use  to represent the cost set for all customers.

We note that this integer programming problem generates a classic NP-hard problem: a rectangular packing problem with deadline constraints. To address this problem, each customer coalition has to apply certain problem solvers. We assume that the computing power of any coalition is the same, and they adopt the same problem solver: Pseudo Maximal Resource Utilization with Deadline (PMRUD). The output of PMRUD is not required to be perfectly optimal. In Section 5.1.2, we introduce a depth-first method (backtracking) for this solver. The outcome of the coalition game consists of the coalitions formed by all customers, their purchase strategies, and the corresponding costs.

Definition 1

The coalition formation game 
 is a tuple 
, where  is the set of all candidate coalitions of the customers, 
 is the purchase cost profile of  and 
, and  is the cost set for all customers.

4. Optimal solution of the coalition game
In this section, we establish three coalition rules for the customer coalition game and prove that there is a unique optimal solution satisfying both individual stability and group stability. In addition, the optimal solution is proved to be equivalent to the system, where each coalition’s selected program can optimize the cost for each customer and achieves maximum resource utilization.

4.1. Definitions
In a cooperative game, there are two conditions for the existence of a coalition game. For each coalition, the overall return of the coalition is higher than the sum of each member’s return. Within the coalition, each member obtains more revenue than he does not join the coalition. Besides, the equilibrium of a cooperative game is to make the game reach individual stable and group stable. For the convenience of the proof of the theorem in Section 4.2, we give the following definitions.

Definition 2

An outcome of the set of all candidate coalitions of customers  is individually rational (IR) if 
 for all .

IR means that each customer is at least as well as doing it alone.

Definition 3

An outcome of the set of all candidate coalitions of customers  is Contractually Group Stable (CGS) if there do not exist 
 and 
 such that 
 for all 
 with at least one inequality holding strictly for 
, and 
 for all 
.

If 
 is a singleton coalition formed by each customer in 
, then the outcome  is Contractually Individually Stable (CIS), i.e., CGS implies CIS.

Definition 4

The outcome  is 
-stable if 1) for any collection set () of coalitions (), 
 for at least a certain coalition , 2) for any coalition  and any partition 
 of set , 
 for all .

 is 
-stable if no group of customers is interested in leaving .

4.2. Rules of merge, split, and transfer
We first introduce a concept of the comparison relation . Comparison relation : Given two collections  and  that are partitions in the same set , such that ,  indicates that 
 for all customers in  and at least one inequality holds strictly. Then, given two joint coalitions  and , i.e., ,  means that 
 for all customers 
. We introduce three irreversible rules:

(1) Merge rule: If 
, then 
, 
.

(2) Split rule:

•
If 
, then 
, 
;

•
If , then .

(3) Transfer rule: Subset 
 in the coalition 
 can join into another disjoint coalition 
 or become a single coalition:

•
If 
, then 
;

•
If 
, then 
;

•
If 
, then 
.

Note that the customers are selfish in the above rules. According to the merge rule, only when the cost of each customer in the newly synthesized coalition is reduced are two customer sets merged. According to the split and transfer rules, once the customer set  forms a coalition or merges into other coalitions at a lower cost, the set  will leave the original coalition regardless of the cost changes that the remaining customers would face.

Theorem 1

For a set of customers who initially form singleton coalitions and iteratively apply the merge, split, and transfer rules, the coalition formation game 
 has an optimal solution 
 that satisfies IR, CGS and 
-stable simultaneously.

Proof

The cost for each customer involved in the coalition is lower than the cost if he were to purchase the resources by himself. Otherwise, the customers would prefer to purchase resources alone. Thus, the coalition formation game satisfies .

A set of customers initially forms singleton coalitions and obtains a coalition collection 
 by using the merge rule. Then, we apply the split and transfer rules after each step. As each customer is selfish, each operation reduces the cost for at least one customer but there is no guarantee that the cost of other customers will be reduced.

Assuming that there are two identical coalitions 
 and 
, there must exist a coalition  in 
 that performs one of the three rules and reforms the coalition  in 
 in the opposite direction. Since these rules are irreversible, it can be proven that the coalitions in sequence (
) are pairwise different. In addition, the total number of partitions for a finite customer set is finite. Thus, the customer coalition sequence formed by these rules must have a finite length. Therefore, we can say that the coalition game 
 has an optimal solution 
 by applying the merge, split, and transfer rules.

Given 
 and 
, if there exists a 
 such that 
 for all 
 and 
 for all 
, then 
 based on the transfer rule. Thus, 
 satisfies the definition of CGS.

Finally, no coalitions in 
 satisfy the conditions in the merge, split, and transfer rules, i.e., 
 coincides with the definition of 
-stable. □

Theorem 2

The optimal solution 
 obtained by applying the merge, split, and transfer rules is equivalent to the system, where the selected program 
 (
) of each coalition 
 can optimize the cost for each customer and maximize resource utilization.

Proof

According to Theorem 1, 
 satisfies CGS and is 
-stable. Assuming that 
 and there exists a customer set  in coalition 
 that can be merged with another coalition 
 to reduce the cost for each customer in , 
 for all  and 
 for all 
 according to the merge rule. However, this contradicts the fact that 
 satisfies CGS. Therefore, 
 makes the selected program 
 (
) of each coalition 
 optimize the cost for each customer in their own coalitions.

Assuming that there exists a program 
 selected by coalition 
 that does not reach the maximum resource utilization, at least one customer set  can be added to 
 according to the merge rule to increase the resource utilization of 
. However, this contradicts the fact that 
 satisfies CGS and is 
-stable. Therefore, (
, 
) makes the selected program 
 (
) for each coalition 
 maximize resource utilization.

In turn, a solution found as 
 is the optimal solution if the selected program 
 (
) has the lowest cost for each customer and the maximum resource utilization. □

4.3. Resource utilization
If 
, the resource utilization rate of service program 
 is the ratio between the sum of the resources actually required by all customers in the set 
 and the resource capacity of the provided service 
. We denote the resource utilization rate of coalition 
 in 
 as 
: (3)
 
Therefore, the real price of each customer in 
 is defined as: (4)
 

There are several choices for 
 to choose appropriate customers from the customer set 
. 
 composed of various customer sets will have different resource utilization rates. Obviously, the larger the resource utilization, the lower the real price for customer set 
. Therefore, it is vital for 
 to choose an appropriate customer set 
 to maximize the resource utilization 
. In addition, we denote the maximum resource utilization rate of 
 composed of 
 as 
.

Fig. 2 illustrates a framework in which multiple customers purchase various cloud instance service programs provided by multiple providers. Customers are grouped according to the type of resource service required, and the customers in each group cooperative with each other. The center part of Fig. 2 shows the formation of coalitions based on multiple programs provided by providers.


Download : Download high-res image (333KB)
Download : Download full-size image
Fig. 2. The framework for multi-customer cooperative in purchasing service.

5. A deadline-constrained resource coalition allocationmethod
In this section, we propose the maximal resource utilization model and the Pseudo Maximum Resource Utilization (PMRU) algorithm. Based on the Algorithm PMRU, we propose the heuristic Deadline-constrained Resource Coalition Allocation (DRCA) algorithm to calculate the near-optimal solution.

5.1. Modeling maximal resource utilization
Given a program 
, we should find coalition  (
) that maximizes the resource utilization of 
 to satisfy the deadline constraints of customers in coalition . The modeling for finding 
 to maximize the resource utilization of 
 is defined as: (5) 
 
 
 
 
 

Here,  represents that service program 
 meets the requirements of all customers in coalition .  guarantees that there are no overlapping positions between any two customers in coalition 
.

5.1.1. Fundamental conceptions and strategies
(1) Corner-Occupying Action (COA): Tuple (
, 
) represents a COA, where 
 is the demand of customer  related to the corresponding COA,  is one of the corner shapes {, }, and 
 is the coordinate of the top-left corner corresponding to shape  or the top-right corner corresponding to shape . Customer to be packed occupies a corner formed by those two previously packed customers or the sides of the service program. In addition, customer  to be packed should satisfy all the constraints in Eq. (5). Note that the top position of 
 is equal to 
. If  is , 
, and if  is , 
. In addition, 
 and (
, 
) are regarded as two COAs. An available COA means that at least one customer can be packed into the service program based on the corresponding corner position and . We denote a set of all available COAs as SC.

When the customer  is packed into the service program, the corners that are no longer available will be deleted and all new available corners formed by customer  and previous customers will be added.

As shown in Fig. 3, customers , , and 
 have been packed in 
. In the set of remaining customers, 
 can be placed in   with coordinates 
. COA: 
 is an available COA.


Download : Download high-res image (77KB)
Download : Download full-size image
Fig. 3. An example of the corner-occupying action.

(2) Distance between two customers. For two given customers 
 and 
, distance 
 between them is defined as: (6)
 
 
where 
 and 
 are the central coordinates of customers 
 and 
, respectively. As shown in Fig. 3, 
 
.

The upper and lower sides of a service program () can be viewed as customers packed into the program with resource request (), and the left and right sides of () can be considered customers with resource request (). For a given customer  and some customers packed in the service program 
, the distance between  and other customers is defined as 
, where 
, 
, and 
 are the minimum distance between customer  and the customer set on the left, upper, and right of customer , respectively. Moreover, at least one of 
 and 
 is .

As shown in Fig. 4, 
, 
, and 
. If COA is 
, 
 and 
.


Download : Download high-res image (77KB)
Download : Download full-size image
Fig. 4. Distance between one customer and neighbors.

(3) Caving degree of COA and the first strategy for the maximum caving degree. Customer  is packed into 
 based on a feasible COA and the distance 
. The caving degree 
 of the COA is defined as: (7)
 

According to Eq. (7), 
 and the closer 
 is , the closer customer  is located at his nearest customer or side (excluding the customers and sides that form the corner). During the packing process, we always select the COA with the largest caving degree and pack the corresponding customer into 
.

(4) Order section. During the packing process, if there are multiple COAs with the same maximum caving degree, we have the following selection order: Select the COA whose  coordinate is the optimal (
 is better than 
 
 if 
, or 
, 
). Select the COA with the lowest index of the corresponding customer.

(5) Split of customer demands. The demand of a customer can be split into multiple sub-demands to purchase as long as those service resources collectively meet the customer’s demand (i.e., same starting time, sufficient, deadline). Considering the continuity of service time and the complexity of task migration, customer’s demand is split according to the number of resources rather than service time. However, if the demand of each customer is split, the amount of calculations of the whole system will be huge. Thus, we split the following two situations.

Case 1: Before the cooperation, if any 
 cannot meet the demand 
 of customer , we split the customer’s demand. We find out the program with the maximal service time 
: (8)
 
Then, we find out the program 
 with the largest number of resources 
 that satisfies 
, where (9)
 
If 
, 
 is split into multiple demands 
. The splitting process is described in Algorithm 1.


Download : Download high-res image (113KB)
Download : Download full-size image
Considering that the splitting of customer’s demand does not affect the customer’s resource usage, we need to ensure that the service resources from different coalitions will be delivered to the customer  at the same time. Therefore, we add a start time constraint for each customer and the start time is initially set to . Once one of the split demands 
 of customer  is scheduled to a certain position, the start time of the remaining split demands of the customer  coincides with the start time of 
.

Case 2: In the case of cooperative resource procurement, there are still some available spaces in the program 
 after the current optimal program 
 and the corresponding coalition 
 are selected. In fact, the resource utilization of 
 reaches a pseudo optimal. As shown in Fig. 5, we first obtain the pseudo-optimal coalition strategy 
 without splitting the demands of customers, and 
. The selected programs of the coalition 
 with the lowest real price has some spaces available for other customers to place a part of their resource demands. For each space in 
, the position of the space can be represented as 
, where 
 and 
 are the coordinates of the lower-left corner and top-right corner of the space, respectively. If the customer  (
) wants to join 
 by splitting his resource demand, 
 and 
 should satisfy 
 and 
. 
 and 
. If 
, then the demand 
 is split to 
 and 
. 
 and 
 are updated, and 
 and 
. In the splitting process, if there are multiple customers competing for a space, we choose the customer with the largest ratio of 
 
. If no customer joins the coalition 
, the resource utilization of the program selected by the coalition 
 reaches the maximum value. Then, 
 and 
 are updated by removing the demands 
. The updated 
 and 
 participate in the next round of calculations until 
 and 
.

5.1.2. The PMRUD algorithm
First, we consider the situation where customers’ demands are not split in the process of multi-customer cooperation. We propose a greedy algorithm based on the above concepts and strategies. Packing the th demand with deadline  is denoted as PCD and  indicates that there are already  demands placed in 
.


Download : Download high-res image (237KB)
Download : Download full-size image
In Algorithm 2,  indicates that all  demands in 
 
 have been packed into the service program 
, and the current position status is represented by Configuration . The COAs with the largest caving degree are recorded in the set SC and the optimal COA is selected according to the selection order in Section 5.1.1. When there are no available COAs or all customers in 
 have been positioned into 
, the algorithm loop stops. Then, the resource utilization of 
 is calculated.

We know that the resource utilization obtained by Algorithm PCD is not globally optimal. Based on Algorithm PCD, we use the depth-first method (backtracking) to propose Algorithm 3-Pseudo Maximal Resource Utilization with a Deadline, which is denoted as PMRUD.


Download : Download high-res image (281KB)
Download : Download full-size image
Algorithm PMRUD ensures that in the process of selecting customers at each step, each selected customer obtained by the  loop is optimal in the current situation. As shown in Fig. 6, in each  loop, every available COA tries to be placed in 
, and Algorithm PCD(.) is called to calculate resource utilization 
. Subsequently, the selected COA is removed of the list. In addition, the algorithm selects the COA set with the highest resource utilization, then selects the optimal COA according to the selection order, and places the corresponding customer into 
. Finally, configuration
 and COA set SC are updated.


Download : Download high-res image (148KB)
Download : Download full-size image
Fig. 6. Illustration of Algorithm PMRUD.

5.2. The DRCA algorithm
In this section, we propose the heuristic Deadline-constrained Resource Coalition Allocation (DRCA) algorithm. The detailed steps of the DRCA algorithm are shown in Algorithm 4.


Download : Download high-res image (357KB)
Download : Download full-size image
First, 
 is updated by splitting the customer demands according to Case 1 in Section 5.1.1. The inner while loop from line 5 to line 21 obtains the pseudo-optimal coalitions for the current customer set 
 and the corresponding demands 
. In each update of the outer while loop, 
 is split again according to Case 2 in Section 5.1.1 in order to obtain the th optimal coalition 
 and the corresponding 
. If no customer in the current coalition can find another coalition to reduce costs, then this coalition is the best choice for all customers involved in the coalition. Additionally, the resource utilization of the service program is maximized, which means that no suitable customers can join the coalition. The remaining demand 
 of each customer  in 
 is updated, and the set 
 is denoted as a set of customers satisfying 
, from line 24 to 27. As mentioned above, the customers are selfish, so the coalition 
 will leave the customer set 
, and 
 will be updated to 
. 
 is also updated to 
. Algorithm DRCA repeats until 
 and 
 are empty sets.


Download : Download high-res image (407KB)
Download : Download full-size image
Fig. 7. Optimal customer cooperation configuration for given service programs.

We know that  and  are the number of customers and providers, respectively. We set 
 and 
. In Algorithm 1, we set 
, then the computational overhead of Algorithm 1 is 
 
 . In Algorithm 2,  customers have been scheduled, and there are 
 customers left to be scheduled. In each process of selecting an appropriate customer, the required update time is . Thus, the computational overheads of Algorithm 2 is 
. Since the out-of-loop consumption is the same in Algorithms 3 and 4, every while loop in Algorithm 3 (the PMRUD algorithm) except calling PCD(
) is represented as , and the for loop in Algorithm 4 (the DRCA algorithm) except calling PMRUD is . Then, the computation overheads of Algorithm 3 (PMRUD) in the worst case is 
 
. Furthermore, the time overheads of the inner while loop in Algorithm 4 is 
 
 and the computational overheads of Algorithm 4 is 
 
. At last, the overheads of the whole system is 
.

6. Experiments
6.1. Experiment setup
To validate the feasibility and effectiveness of our DRCA algorithm, we have performed extensive simulations and experiments. Our simulation environment is an Intel(R) core(TM) i5-6200U 2cores CPU@2.3 GHz 2.4 GHz with Windows version 10. The simulation program is written in Python supported by the Pycharm 2017.3.2 IDE. We consider the general-purposed computing service research ECS provided by the Alibaba company [9]. The product configuration of the service programs is listed in Table 2 in Section 3.1. The product has two types of payment prices, annual or monthly and on demand, as listed in Table 5(a). If a customer rents the service on a monthly basis for less than one year, the price of , , and  months are 1039, 937, and 886 per server per month, respectively. If the customer rents on an annual basis, the price is 824.25 for the first year, 661 for two years, and 494 for three years. However, if the customer rents the service for less than one month, the customer’s service price on demand is 2619.36 (87.312 per day). To highlight the applicability of our algorithm, we assume that more product service programs are based on Table 5(a). As given in Table 5(b), we have added preferential strategies for renting multiple cloud instance programs. The first column represents the number of cloud instances, and the first row indicates the renting time (unit of month). The number in row  and column  () represents the total cost of corresponding program with renting  instances and  months.

6.2. Customer cost analysis
We select  customers and randomly generate the demands for each customer, where the number of resources is gradually set from 1 to 10, the rental time is gradually set from 1 to 60, and the deadline ranges from the value of the corresponding rental time to 180.

Fig. 7 shows the selected service programs and the configuration of each customer. The blank area in a service program indicates that the server is idle. Table 6 lists the resource utilization of each selected service program and the real price of each customer in the selected service program. In addition, Fig. 8 shows a comparison of the cost of purchasing service resources individually and the cost each customer participates in a coalition to purchase them, the values of which are represented by the orange and blue marks, respectively. The cost of each customer is reduced and the reduction ratio can reach as much as 63.6%, which indicates the feasibility of the proposed mechanism.


Table 5. Resource dataset from Alibaba Cloud used in the experiments.

(a) The price of the service program, unit: per service per day
12 months	35 months	69 months
Annual or monthly	1039	937	886
On demand	2619.36	2619.36	2619.36
1 year	2 years	3 years
Annual or monthly	824.25	661	494
On demand	2619.36	2619.36	2619.36
(b) The prices of programs
MT (month)	1	2	3	6	12	
5	5195	10 390	14 055	26 580	49 455	
10	10 390	20 780	28 110	53 160	98 910	
15	15 585	31 170	42 165	79 740	148 365	
20	20 780	41 560	56 220	106 320	197 820	

Download : Download high-res image (222KB)
Download : Download full-size image
Fig. 8. Comparison of the cost of each customer. (For interpretation of the references to color in this figure legend, the reader is referred to the web version of this article.)


Table 6. Resource utilization of each selected service program.

Program	U	RP	Program	U	RP
(a) 20 × 120	0.98375	31.749	(e) 10 × 90	0.981	31.835
(b) 10 × 120	0.98	31.871	(f) 5 × 90	0.886	35.226
(c) 20 × 90	0.985	31.691	(g) 15 × 60	0.837	41.340
(d) 15 × 90	0.951	32.839	On demand	87.312
Program: , RP: per service per day.

6.3. Impact of deadline on procurement price
We validate the heuristic DRCA algorithm by analyzing the price for each customer affected by the deadline. We select four customers from  customers. They are customer , , , and . Each customer has a deadline from 50 to 180 with an increment of 10. In addition, when analyzing the impact of the deadline on a customer, the procurement demands and deadlines of other customers remain unchanged.

Fig. 9(a) shows the impact of the deadline constraints on the purchase price, and Fig. 9(b) shows the order of the corresponding customers are selected in the coalition game. As the deadline increases, the real price for each customer shows a downward trend. As shown in Fig. 9(b), the larger the customer’s deadline, the easier it is for the customer to associate with others. As a result, we can know that the customers with farther deadline are more likely arranged with high priority and lower price, but their start times of using resource are late, which also provides convenience for the customers with short deadline (urgent customers) to use resources as early as possible.


Download : Download high-res image (274KB)
Download : Download full-size image
Fig. 9. Impact of deadline on customer price.

6.4. Effectiveness and performance evaluation
6.4.1. Effectiveness evaluation
To illustrate how the scale of the customers and service programs affects the entire system, we analyze the time overheads and the percentage of total customer cooperative savings. The number of customers  increases from  to  in increments of , and the number of programs ranges from 10 to 450 with an increment of 10. The experiment results are presented in Fig. 10, Fig. 11.

Given  service programs, Fig. 10(a) shows the percentage curve of customer cooperative savings as the number of customers increases. Fig. 10(b) shows the effect of the number of programs on the savings for a given 1000 customers. As the number of customers increases, the trend of the line increases and reaches a value of 34%, and the curve in Fig. 10(b) increases to a relatively stable value of 42%. Fig. 10 shows the effectiveness and practicality of our algorithm to help customers reduce their costs. The more customers and programs, the higher the overall percentage of customer cooperative savings.


Download : Download high-res image (181KB)
Download : Download full-size image
Fig. 10. Effectiveness of the DRCA algorithm.

6.4.2. Performance evaluation
In the experiments, we adjust the number of customers and service programs and record the execution time of the entire system. Fig. 11(a) and (b) show the execution time curves of the system as the number of customers and programs increases, respectively.

In Fig. 11(a), as the scale of customers increases, the time curve increases in a polynomial. The blue dashed line is the trend line of the time curve, which is a fourth-order polynomial. The fitting degree of the trend line and the time curve is 0.9622. As shown in Fig. 11(b), the time curve of the entire system increases linearly. The dashed line is the trend line of the curve with a fitness of 0.9636. Fig. 11(a) and (b) verify the time overhead we evaluated in Section 5.2. The system can determine the time interval  based on the size of customers, providers, and programs.


Download : Download high-res image (237KB)
Download : Download full-size image
Fig. 11. Time overheads of customers and service programs.

7. Conclusions
Our study focused on the problem of using multi-customer collaboration strategies to configure appropriate resources to meet the needs of each customer, thereby minimizing customer costs. We established a coalition game system based on three coalition rules and proved that there is a unique and optimal solution in the coalition game that satisfies individual stability and group stability. The optimal solution proved to be equal to the system where the selected service program can reduce the costs of customers in their own coalitions and achieve maximum resource utilization. A heuristic DRCA algorithm was proposed to calculate the optimal solution. Extensive experiments were simulated to validate the feasibility and effectiveness of the proposed algorithm.