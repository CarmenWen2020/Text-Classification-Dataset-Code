Abstract
The technology-driven shift in distributed network systems, Internet technology and energy grid digitization have changed the traditional spoke-hub distribution models to the more flexible and giant network-to-networks paradigm known as Energy Cloud. This energy cloud paradigm has the ability to adapt to the large-scale distributed energy resources with dynamic demand–response associated with smart grid and smart homes applications, which allows customers/users to have connectivity of electrical devices with supply grid into one giant energy cloud network. If efficient policies are not adapted in the design and operations of such networks, sensor devices may sense and forward redundant data packets. Hence, valuable energy of the node will be depleted quickly and as a result; the network will be down before accomplishing its intended task. To address the issue of energy-efficiency in energy-cloud at embedded networks, this paper proposes a novel scheme, “Energy Efficient Adaptive Scheduling Scheme (EASS) for Mesh Grid Wireless Sensor Networks”. In EASS, a sensor node configures and schedules its functions/roles according to the contents of sensed data packets and frequency of generated traffic. Like energy cloud, tasks are uniformly distributed on all nodes in mesh-grid in four states – each state of a node is responsible for configuring its components on a specific energy level – which aims to avoid link disconnection and vanish redundant data packets generation. Simulation results show that EASS increases energy-efficiency by 50% due to the four-states model, 62.5% due to alive nodes, 92.60% due to minimized Cluster-Heads overhead and 38.11% due to the reduction in dead nodes ratio.

Previous
Next 
Keywords
Mesh grid

Energy-efficiency

Energy-cloud

Adaptive

Four-states

1. Introduction
The traditional Wireless Sensor Network (WSN) [12], [55] with newer technologies such as the Internet of Things (IoT) [28], [37], sensor clouds [32], [64] and cloud computing [38], [45] are the main building blocks of the energy cloud network to provide energy-related services to enhance operations of smart application energy management systems. In a nutshell, energy cloud is a paradigm of cloud computing with WSN for on-demand sensing applications. With Energy Cloud, every object is digitized and super-connected and they provide services according to context and user demand. These ubiquitous services are available everywhere, anytime and for everyone. The surface of integrated devices works in a lattice and creates a mesh grid of sensors. The grid of sensors senses a phenomenon and always works in collaboration to forward the sensed values. Low energy network [9], [30], is one example, where devices have very restricted options of energy and other resources. Nearly all devices are connected by low energy networks and most of the times WSN is the underlying network for communication. WSN is an ideal method for establishing low energy network, due to its availability and easy deployment and therefore, WSN covers major part in creating Internet of Things (IoTs) [31]. But WSN is a resource-restricted network where Sensor Nodes  works with limited communication range and very limited energy resources. These nodes are combined in a network for collecting data from environment and accordingly delivers services on demand. Actually, these nodes are combined in a cascading layer where each node communicates to others in surrounding for creating mesh grid [2], [41], [52]. These nodes collect data from physical world and convert it into digital format, suitable for computing to process further.

Mesh Grid and Energy Cloud: The mesh grid is essentially a layer of devices where every device is responsible for its service and status. Its status is quantified and arranged in a sheet of sensors for collaboration. The role of each  can be justified and can be managed according to its basic functions. In mesh grid, for each transaction, a certain amount of energy is consumed in sensing, processing and in communicating with other devices or with decision center (Base Station) [1], [10], [39]. Data produced by these devices is sometimes redundant and useless and is circulated in the network [11]. If a better strategy is not employed in processing the sensed data packets, network will be overwhelmed quickly. In a Mesh grid, all devices work in collaboration and distributed manner and provide services in a cloud form. If any resource of a device is not available or sensor is near to down due to its low energy, other device/sensor will take its responsibilities. The resources especially energy works like energy cloud. In energy cloud, devices share energy with each other to performed different tasks in uniform way. As energy is not transferable in these embedded and minute devices but the role and responsibilities (tasks) can switch from one device to other. For switching tasks between different nodes in mesh-grid,  share job-responsibilities to performed a task in uniform way. When a  in a mesh-grid feels job-overflow due to (a) performing a repetitive dedicated task like aggregation, (b) repeating sensing cycles for over-cost processing and (c) redundant sensing of same data, its energy-level exhaust. Other nodes in neighbor is more residual energy and can be use for same task. In mesh-grid,  performs task in collaboration and adjusts its role according to neighbor nodes. Tasks in mesh-grid are performed in collaborative in such a manner that one node’s job is now distributed on many nodes and performed in collaboration. Sharing of jobs on energy basis is actually energy cloud, where jobs are switched from nodes to nodes on energy basis. In mesh-grid One device/sensor can offer its resources to near device for reliable operations. A mesh grid of sensor is shown in Fig. 1.

Clustering — Clustering is one of the widely used approach in WSNs for energy-efficiency, where sensors are combined in different groups and each group has a master sensor known as Cluster Head (CH) [11], [36], [58], [60]. Generally, clustering is considered to be a better strategy because of easy management and fault tolerance. In fact, clustering greatly reduces energy consumption due to the aggregation of same data packets and direct communication of CH with central point (BS). In a target area,  are deployed in such a logical-way that they sense premises of each other as well as sense any physical phenomena.  captures any change in environment and converts these values into statistical values. All  send its values to CH. A CH aggregates data packets, appends their identities, applies security policy and sends to BS [11], [36]. Energy depletes in networks due the following: (1) Excessive sensing at sensor, over-costs processing at microprocessor and frequent communication on radio-link consumes a good amount of energy. (2) Redundant and useless sensed values are communicated to CH and BS; also waste a lot of energy. (3) After repeating sensing cycles for same values, energy of CH depletes quickly and then re-clustering is initiated, which also consumes a good amount of energy [61]. (4) Frequent re-clustering also affects the normal operation of the network. It creates extra overhead in calculating different parameters and broadcasting this information to other nodes for new CH [35]. Conversely, clustering and scheduling should be linear and meaningful such that important events are not missed during sensing of an event [19], [46]. Although Clustering is considered to be Convenient for network management and it improves energy efficiency at a great extent. But frequent Re-clustering and abrupt changes in network topology also degrade network performance and sometimes it drains the energy level of node sooner. Clustering is always deployed on upper layer and an improved cluster management is desired all time. Simple clustering it is not an optimum solution for energy efficiency. Some lower layer policies can also enhance energy efficiency of nodes although clustering is already there.


Download : Download high-res image (177KB)
Download : Download full-size image
Fig. 1. A mesh grid of sensor nodes.

Content-aware Sensing — To reduce energy consumption caused by network overhead (including redundant sensing, frequent communication, and re-clustering) produced due to excessive sensing and to avoid the bottleneck in the network, a content-aware sensing model is always desired. Content-aware model checks contents of sensed data packets and switches the role of  as required accordingly. For this purpose, here we have proposed an, “Energy-Efficient Adaptive Scheduling Scheme (EASS) for Mesh Grid Wireless Sensor Networks”. In EASS, nodes work in a collaboration in cascading mesh grid, where each node is responsible for performing different tasks. In mesh grid, if a node is functioning for long time, adjoining node should adapt the state and perform the same task. In EASS, state of a node is changed to reduce the redundant data packets in a mesh grid-based WSN. States are defined on the basis of activation and deactivation of the internal components of a node. When a node senses a packet, it is checked for traces and if similarities are found, a node changes its state. Each node can acquire four different states where changing of different states is based on contents of sensed data packets.

The main contributions of the paper can be summarized as follows:

•
To reduce energy consumption due to redundant sensing, a novel scheme called EASS has been proposed, which is a content-aware approach that reacts according to contents in sensed data. It is based on a four-state model for a node.

•
It aims to reduce energy consumption due to redundant sensing and to have the least disconnection in the network, unlike the existing schemes.

•
The article provides an evaluation of the proposed scheme as well as a comparative study with the existing state-of-the-art schemes. The simulation results have proved that overall energy consumption of network has reduced.

Clustering is a factual standard for energy-efficiency in WSNs. In EASS, clustering is already supposed to have been applied; since most of the, similar to EASS, benchmark schemes are deployed using clustering which will be helpful in comparing the efficiency of EASS with them due to similar environment. While content based policy, four state model and switching between different states are being applied using mesh grid. Mesh grid helps in energy cloud by adjusting roles of nodes to meet minimum energy requirements of network by changing the task performing by a certain node to another.

The rest of the paper is arranged as follows: Section 2 explains Literature Review; Section 3 provides a detailed study of the proposed scheme (EASS). In Section 4, algorithm of the EASS has been discussed. In Section 5, Module base event driven model and in Section 6, Contents of Data and Memory Requirement has been discussed. Section 7 explains simulation details, such as simulation parameters and network setup. While evaluation of the proposed scheme has been presented in Section 8. In Section 9, the efficiency of the proposed scheme has been compared with state-of-the-art schemes, Section 10 provides a discussion on the proposed schemes and how well it performs comparatively. The paper has been concluded in Section 11 with future work.

2. Literature review
The resource-constrained nature of WSNs creates many problems in traditional and passive sensing mechanisms.  first position itself after deployment, select CH based on some criteria, analyze scenarios and send data to BS [60]. Generally, clustering comparatively improves network efficiency and minimizes energy consumption. However, energy of these nodes is consumed earlier in network and they need to switch their responsibilities to other nodes. For this purpose, network topology should be restructured to uniformly consume the resources [36], [48]. Furthermore, calculations and communication for selecting a suitable CH, definite cluster size etc. are one of the main causes for energy consumption. Similarly, repeated sensing cycle for same packets and frequent re-clustering, are also more laborious tasks that consumes extra energy and creates extra overhead [20]. Re-clustering and redundant sensing not only effect network resources but also influences network throughput. Similar to clustering technique, wake-up and sleep techniques also have a greater impact on resources of WSNs [27]. All duty cycling schemes (Active/Sleep) are used in activating/de-activating different nodes on some conditions. Switching of nodes into different states not only decrease network overhead (minimized traffic) but also increase energy-efficiency [13], [23], [53].

This section explains various state-based approaches with merits and demerits.

PEAS:
Probing Environment and Adoptive Sleeping (PEAS) [3] is first state based scheme which control sensing at node level. In PEAS, node works in three operating states, Sleeping, Probing and Active mode. Initially, nodes in sleeping-mode and based on probability density function, fewer nodes are in active-mode. If no reply is found from neighbor, sleep nodes are converted into active nodes. Sleep mode will remain sleep if no reply catches from neighbors. This scheme is very useful in dense-WSNs. Main drawback in PEAS, if a node activates its active state, it will never change to sleep mode again.

PECAS:
Probing Environment and Collaborating Adaptive Sleeping (PECAS) [15] is an enhancement in PEAS. In PECAS, nodes are wake up for first time and start probing. If no communication is found, it adapts its state to active-state. However, in this scheme, active node acquires sleep-state after a specific period of time. Active node notifies its working period in reply message for other sleep or probing sensors. PECAS overcomes the drawbacks of PEAS of quick depletion of energy by removing the unbalance energy consumption. In both approaches, nodes are deployed in random manner using on ad-hoc routing. In PECAS, random deployment and ad-hoc routing causes frequent depletion of energy.

CLD:
Controlled Layer Deployment (CLD) [58] is another enhancement in PEAS where nodes are deployed in deterministic way. Positioning of nodes in deterministic manner minimizes cascading effects and reduces overlapping zones. In CLD, node near to BS, drain quickly because of huge and multi-time usage of these nodes. Active-node is surrounded by sleepy nodes at a specific distance. An additional node in sleepy states is further deployed to minimize the cascading effect. PEAS is still underlying protocol for activating sleepy nodes into activate state. This scheme is useful in those scenarios where location and deployment region is known in prior. But calculating this information also need extra hardware and more energy.

RBSP:
Another state-based approach is Random Back-off Sleep Protocol for Energy Efficient Coverage in Wireless Sensor Networks (RBSP) [34] is based on PEAS. In RBSP, information about active node are used for changing three states. Using residual energy of an active-node, a random value is selected. Sleepy nodes, near to active node, start probing. It activates sleepy node periodically if the residual energy is low while sleepy nodes will remain sleepy if residual energy is high. As residual energy of active nodes are directly related to state of neighboring nodes, (due to this factor sometimes) extra message overhead is created, especially, in low-energy active nodes.

DCBPS:
Discharge Curve Backoff Sleep protocol for energy efficient coverage in wireless sensor networks [34] is another state-based scheme, working on back-off sleep timing. If a reply is received, node will adjust itself to sleepy-state and if a reply is not received, then the floating-state is changed into active-state. The main drawback in DCBPS, it only activates sleepy nodes in those conditions when an active-node is near to drain completely.

CESS:
Coverage and Energy Strategy Scheme (CESS) [25] is a state-based scheme, works in two stages and each node can adapt four conditions. In first stage, all nodes are in a working-state and interchange their location information to other neighboring nodes in the surrounding. Distance tests, perimeter and center are used for full-time coverage and minimizing cascading effect. Main drawback in CESS, active-nodes provide coverage and connectivity, these nodes may die more frequently as compared to other nodes.

OGDC:
Optimal Geographical Density Control (OGDC) [62] is another variation in state-based schemes with overlapping zones. In OGDC, a node adapts three states; sleep, active and listen-state. It uses circular topology and location awareness for acquiring a state. Nodes change their states from active to sleep based on periodic broadcast, overlap checking and energy consumption. The main drawback in OGDC, that only fewer nodes are in active-state and these few active-nodes may not have covered all area.

ECCP:
Enhanced Coverage Control Protocol (ECCP) [63] has proposed to overcome the drawbacks in OGDC. ECCP covers all area in a specific region and provides a balance zone-based active sensing mechanism. More active-nodes are deployed for covering the boundaries of overlap areas. Although ECCP removes the drawback of full coverage but additional active-nodes are required as compared to OGDC for same topological space.

CCP:
Integrated Coverage and Connectivity Configuration for Energy Conservation in Sensor Networks (CCP) [62] is another scheme for full coverage and with minimum number of active-nodes. Nodes in this scheme are synchronized and have location-aware. In CCP, the coverage area is twice of the sensing areas. It runs in rounds and configure node in any of the three-states; On-, Off-, and Undecided-state. However, changing state after each round is time consuming and as a result, frequent state-changing creates more overhead.

PDC:
Energy-Efficient Protocol for Deterministic and Probabilistic Coverage in Sensor Networks (PDC) [17] is state-based protocol. Nodes are activated by the activator node in probabilistic as well as deterministic ways. Many nodes work as an activator on the hexagonal structure. These activator activates other nodes in Active and Sleep modes. In each round, based on remaining energy of any node, random time slots are assigned. However, more energy is consumed for developing and maintaining the hexagonal architecture.

PCPP:
Probabilistic Coverage Preserving Protocol with Energy Efficiency in Wireless Sensor Networks (PCPP) [40] is another state-based scheme. In which BS transmits a message for each node randomly for activating a node or to make a node sleep. Depends upon the pre-conditions, those nodes are selected as candidates, where remaining energy is better. If all three conditions are stratified by more than one node, the one having the smallest ID will be selected as an active-node. However, it is a centralized approach, all drawbacks of centralized approach are applied here.

BECG:
Balanced Energy and Coverage Guaranteed Protocol for Wireless Sensor Networks (BECG) [26] is a three-states protocols. Node can acquire sleeping-, checking-, and working-state. Nodes in sleeping-state, first wake-up and senses Check-Messages for identifying other working nodes in its surrounding. Working-state will be changed to a sleeping-state if it discovers checking-nodes in its surrounding. As checking-message is periodically exchanged and there is a possibility of uncovered areas as coverage redundancy.

CPLC:
Connectivity Preserving Localized Coverage Algorithm (CPLC) [33] is used for area monitoring in WSNs. The main calculation in CPLC is determining Area of Interest (AoI). Overlapped covered areas are calculated by using Euclidian algorithm. Nodes receive ‘Hello’ messages and respond to CH. In reply, these nodes send their location and IDs. CH maintains a database of this information and updates from time to time. CH maintains network structure by activating and sleeping nodes based on time. However, no alternative is available if a CH is down which may result in partitioning of network.

SSP:
Sleep scheduling protocol for k-coverage of three- dimensional heterogeneous WSNs (SSP) [16] is another approach using heterogeneous 3D algorithm. In SSP, sensing sphere of each sensor is detected and redundant points are calculated using k-coverage algorithm. Different nodes are detected for heterogeneous data and redundant nodes are instructed to go into a sleep-state. However, neighbor and redundancy tables are maintained for knowing the node locations.

CEE:
Connectivity and Energy-Efficiency (CEE) protocol [51] is used for full connectivity and efficient used of energy resource. Using probability theory, a relationship is obtained between sensor connectivity and communication radius. Different nodes attained wake-up and sleep based on connectivity probability. Residual energy and distance are two parameters used for energy efficiency.

ECMM:
An Energy Consumption Model for Multimodal Wireless Sensor Networks based on Wake-up Radio Receivers [7], [8] are used for increasing lifetime in terms of reducing idle listening and overhearing issues. Radio wakeup (WuRx) and Low Duty Cycling (LDC) with addressing mechanism is used in estimating the energy model. The performance is checked with addressing WuRx and without addressing. For decreasing listening at radio component, the radio is on periodic on receiving messages. It uses M2WSNs and multi-hop communications for analyzing the behavior and performance of wake-up protocol.

MSADP:
Mixed Synchronous and Asynchronous Duty-cycling Protocol in sensor networks [21] is hybrid protocol. Four states are used: Idle-state, Sleep-state, Transmission-state and Receive-state. The neighboring and parent node are determined using network layering. Four step algorithm is used for switching between these states. The cycling in MSADP is more efficient and behave more scalable. Qualities of both synchronous and asynchronous are applied in this scheme.

CDCS:
Collaborative duty cycling strategies in energy harvesting sensor networks [29] is centralized management system for energy in WSNs. The reinforcement learning (RL) agent is used to managed connectivity and spatially varying energy harvesting capabilities. The RL agent is get intelligence for selecting optimal nodes. The duty cycling is controlled by RL agent using in 16 nodes in 2D lattice structure. There are options for day time, rainy day and night time scheduling.

EEDC:
Towards Energy Efficient Duty Cycling in underwater wireless sensor networks (EEDC) [56] is MAC layered protocol. EDCC is the combination of two methods for prolonging network life-time. Two factors are Residual Energy (RidE) and Sleep-Wake up (NeWT) technique. Duty cycling has discussed with many parameters including data size, network size, energy consumption, packet delivery ratio and number of active nodes. RidE is supposed to be used for urgent and priority based data while NeWT is suggested for Increasing life time of network.

PDLB:
Proportion to Duty cycle Length based Broadcast (PDLB) [42] is another state based scheduling scheme used for fast and efficient use of spreading code in duty cycles. In PDLB, nodes receive codes from BS and counting priorities. According to duty cycle, higher priority node broadcast for neighbors. Those nodes which not received codes, request again for code actively. Large number of slots and small count threshold rate, results high coverage ratio. For reducing transmission delay, the lesser should be the broadcast time and smaller duty cycle.

DCCOR:
Duty Cycle Control–Based Opportunistic Routing (DCCOR) [54] is routing energy-efficient routing scheme. In DCCOR, first forward nodes are discovered to established path for sender as active nodes. All nodes in wake-up states are calculated and are checked with threshold, if greater, data transmission started and if lesser then wait for wake-up states. For reducing delay, nodes near to sink are enforced to wake-up quickly. Dynamic duty cycling reducing message overhead and also reduces energy consumption. Statistics clear that DCCOR is better in duty cycle scheme for opportunistic routing.

ACMC:
Adaptive Collection Scheme-based Matrix Completion (ACMC) [47] its duty cycling scheme. In which some part of data is collected and rest of other sensing data is recovered by matrix. Matrix completion technology is used in no-losing packets. As number of messages are reduced, energy consumption is reduced. ACMC dynamically changes states and adjusts data collection. If more energy is available or in day-time when solar energy boosts sensors, it collects sufficient data while in low energy or night-time (no sunlight), it collects limited data. ACMC improved data cycling by reduces network delay and increase network lifetime.

APC:
Adaptive Power Control (APC) [43] has proposed for increasing energy efficiency in WBAN for wearable devices as these devices are restricted energy sources. It regulates power at sensor node by sending commands from BS. Body positions in a walking are experimented with “‘chest to right hip” and “right wrist to right hip”. It is concluded that due to rapid varying values in channel, usual TPC (transmission power control) and continuous TP (transmission power) is not recommended for WBAN. APC saves energy by adapting different energy levels and lower complexity in implementation. It manages PLR (packet loss ratio) to adequate level and also succeeded in link reliability. The system is analyzed on theoretical model as well as in simulation and it proves that APC performed better than other schemes and recommended for WBAN.

GASPQ:
An improved genetic algorithm for task scheduling in the cloud (GASPQ) [22] is a hybrid and improved form of genetic algorithm (GA). Heuristic based advance GA is used for correctness and due to its lower complexity. Model checking has used to verify its correctness and reliability. Model checking has achieved using LTL (Linear Temporal Logic) and LTS (Labeled Transition System) techniques. The model is also verified on NuSMV and PAT model checkers. Analysis have proved that it performed better in three famous heuristics and its execution time is optimized than any meta heuristic algorithms.

TDCRA:
Two level distributed clustering routing algorithm (TDCRA) [5] has proposed for increasing network life-time in IoT based architecture. To decrease CH selection overhead, primary and secondary CH technique has used. Different criteria/conditions are used for changing between primary and secondary CH. For efficient resource management, a node near to secondary CH, connects to it instead of primary CH. Different routes between nodes, CH and BS are defined in which those routes are used which have an optimum energy consumption. Analysis proves that TDCRA performs better than other bench-mark schemes and recommended for large scale dynamic network topology.

SRIC:
A systematic review of IoT communication strategies for an efficient smart environment (SRIC) [44] is a review of all IoT based communication techniques related to smart devices. SLR method is used for analysis of already deployed techniques. It provides a comprehensive study of all communication approaches, their analysis, recommendation and uses. It advocates different techniques for obtaining efficiency and productivity in IoT related technologies. It also discussed enhancement and future direction of such strategies.

EBC:
Edge Based Centroid (EBC) [4] removes problem of redundant covered areas by using the mobility of the nodes. A sensor network is divided into many polygons using a Voronoi diagram. From all polygons, uncovered holes have identified and sensor node with new location and IDs are identified for removing these holes. Main drawback of EBC, as its new Active-nodes are required and maintaining the polygon is also tedious task.

ESSM:
Energy-Efficient Sleep Scheduling Mechanism With A Similarity Measure For Wireless Sensor Networks (ESSM) [49] is a state-based scheme. ESSM uses fuzzy matrix to determine similarities and nodes can be categorized based on correlation function. Redundant nodes deployment areas are useful for dense network. This algorithm is mainly focused on condensed sensor deployment. However, in dispersed topology, correlation of data will be lower and network comparatively consume more energy. Random changes in states are not recommended for prior designs and there are limited options for changing state.

ESACC:
An Effective Scheduling Algorithm for Coverage Control in Underwater Acoustic Sensor Network (ESACC) [50] is a state-based approach for underwater acoustic sensor networks. Based on ESACC active-sleep strategy is deployed with redundant nodes in two portions. The memetic procedure is used for activating sleep-state, while some nodes will be in active-state for sensing. However, for every node, energy calculation is a time-consuming process and this leads sleepy-nodes to replace dying nodes frequently.

ESMA:
Enhanced Multi-model Switching Mechanisms for Node Scheduling and Data Gathering in Wireless Sensor Networks (ESMA) [6] has proposed for real-time interaction. Node states are changed between two modes; time- and event-driven. Time-driven is useful where constant supervision is required while event-driven is used for detection of specific events. Two switching mechanisms are implemented, “Enhanced hybrid node scheduling (eHNS)” and “Enhanced hybrid data gathering (eHDG)”, based on state machine states. In eHNS, nodes are deployed in an event-driven manner. Changing of state is based on outcomes of PED (Parameter Based Event Detection) and PAD (Parameter-Based Area Detection) algorithms. ESMA is becoming more complex due to switching between states and too many algorithms create extra overhead.

Motivation - All the above schemes mainly focuses on energy conservation by using clustering, MAC level sensing and state-based duty cycling techniques. Main criteria for changing states in above schemes are; i. Periodic checking, ii. Broadcasting in the network all time, iii. Location-based Hello messages, iv. Sensing RSSI in premises for active neighbors, v. Residual Energy, vi. Active probe messages and many other algorithms that have already been discussed. In Table 1, all schemes with concerned parameters have been shown. However, all these mechanisms are proactive nature and change node-state in passive methods, which are the drawbacks of these schemes. Pro-active sensing advocates that node configures itself according to a predefined criteria and specific measures. To fulfill and to meet specific criteria, needs a lot of calculations and comparisons. Broadcasting control messages about changes in topology also creates extra overhead. While passive sensing means that network adjusts changes based on certain conditions. These conditions enforce changes in network and sometime causes abnormal operations. Frequent changes not only disturb normal operations but also leads depletion of energy at node-level. In all these proactive and passive approaches, definite criteria have been defined for altering states of nodes but they have no concern with contents of sensed data packets. Most of the time, sensing cycles are repeated for redundant and useless data. Given the motivation, to prolong network lifetime using real-time interaction, a reactive technique is needed where states of a node is changed according to the contents, frequency or pattern of the traffic. In the next section, we will discuss a novel approach for Mesh Grid Wireless Sensor Networks that changes state of nodes according to the patterns in the sensed data.


Table 1. A comparison of the state-based schemes.

Scheme	Periodic checking	Broadcast messages	Location-based (Hello)	RSSI-based	Residual energy-based	Active probe random	More parameters
PEAS 2002	x	✓	✓	x	x	x	Probability density function
PECAS 2004	✓	x	✓	x	x	x	PEAS, Random deployment
CCP 2005	x	x	✓	✓	x	x	Connectivity Configuration
OGDC 2005	✓	✓	✓	x	✓	x	Geographic density
CLD, 2007	x	✓	x	x	x	✓	PEAS, overlapping zone
PCPP 2007	x	x	x	x	✓	✓	Centralized Algorithm
ECCP 2009	✓	✓	✓	x	✓	x	Overlapping zones
PDC 2010	x	✓	x	x	✓	x	Deterministic, Probabilistic
CPLC 2011	✓	x	✓	x	x	x	Euclidean Algorithm
RBSP, 2014	X	x	x	✓	x	✓	PEAS
BECG 2014	x	x	x	✓	x	x	No other Parameter
DCBPS 2015	✓	✓	x	x	x	x	Battery discharge curve
CESS 2015	✓	x	✓	x	X	x	Distance tests, perimeter and center
EECGS 2015	x	x	x	x	✓	x	No parameters
SSP 2015	x	✓	x	x	x	x	k-coverage algorithm
EBC 2016	x	x	x	✓	x	x	Voronoi Algorithm
APC 2016	x	x	x	✓	x	x	TPC, TP, PLR
ESMA 2017	x	x	x	✓	x	✓	eHNS, eHDG
GASPQ 2017	x	x	x	x	x	✓	LTL, LTS, NuSMV, PAT
ESSM 2018	✓	✓	x	x	x	x	Fuzzy Matrix
UASNs 2018	x	x	x	x	✓	x	Mimetic Algorithm
ECMM 2018	✓	x	✓	x	x	x	M2WSNs
CEE 2019	x	x	✓	x	✓	x	Probability theory
TDCRA 2019	✓	x	x	✓	x	x	Primary & Secondary CH
SRIC 2019	x	x	x	x	x	x	SLR
MSADP 2019	✓	✓	x	x	x	x	Synchronous, Asynchronous
CDCS 2019	x	x	x	x	✓	x	Reinforcement Learning (RL)
EEDC 2019	x	x	x	x	✓	x	RieD, NeWT
PDLB 2019	x	✓	x	x	x	✓	High coverage ratio
DCCOR 2019	x	x	x	x	✓	x	Opportunistic routing
ACMC 2019	x	x	x	x	✓	x	Matrix completion
3. An Energy-Efficient Adaptive Scheduling Scheme (EASS) for mesh grid wireless sensor networks
EASS focuses on reducing sensing data packets while defining a four-state model. To prolong network lifetime, it avoids excessive-sensing, reduces over-cost processing and minimizes frequent communication. It reduces control messages for re-configuring network topology. Contents of sensed data packets are checked at each node. If contents/frequency/pattern of these packets remain same and have no changes in successive input, then nodes avoid forwarding these redundant packets to BS. Repeating sensing cycles for same data have high impact on energy-resource of the network. In proposed scheme, different states of the nodes have defined to avoid sensing cycle for redundant values and as a result, it increases lifetime and throughput of the network.

Working procedure of EASS is as follows:

1.
A node senses values for the first time, stores one copy in its buffer and transmits one copy to BS.

2.
In second time sensing, sensed values are checked/compared in buffered with stored values, if contents are same, save one copy and transmit another for BS.

3.
Repeating the same procedure, values are sensed, checked in the buffer and are transmitted for BS.

4.
After each sensing cycle, node checks its buffer for traces and if similarities are found in three consecutive cycles, state of a node is changed.

5.
If traces are not found in buffer, then a copy is stored and another is transmitted to BS.

6.
The node remains in same state until a value other than stored values is sensed.

State of node is changed when same values are observed in three consecutive sensing cycles. If different packets are sensed each time, then a pattern is determined that how to repeat same pattern in sensing data packets. In mesh grid, to change state of node means to change role of a node. If a node in mesh grid performed same task repeatedly, the role of node can change and same responsibility can transfer to nearby nodes. In EASS, a hierarchical topology has implemented where sensing-node are near to sensing phenomena in mesh grid from. There is three-level hierarchy in implementation of network. At third-level (sensing-level), actual sensing nodes are deployed in mesh grid form. These are leaf nodes, working in mesh grid to form a uniform layer of sensors. Second-level (aggregation-level) is primary CH nodes level. Primary CHs collect data from their successor nodes, aggregate it and send to master CH. First-Level is Master CH, directly connected to BS. All primary CH collect data from their respective clusters and send to Master CH. Node in third-level are in mesh-grid while each primary-CH is sink for some node in underlying mesh-grid structure. Clusters in EASS are dynamic and active for longer period due to minimizing overall network traffic. EASS is an adaptive approach because nodes adapt different states on contents of data. Different nodes maintain different states while overall structure remains the same with minimum changes in the network topology. Since less redundant data has to travel through CH, as a result, a cluster lasts longer. In Fig. 2 hierarchy of nodes has shown.

3.1. Network model
Consider a WSN of sensor nodes, let  be limited number of nodes, equally distributed in square area . These sensors are distributed in such a way that one  can easily detect another sensor premise. Each  have its own identity, denoted by . Range of coverage of a sensors is 
, range of total network is 
, where 
. The distances of each sensor in square network is shown in its  position as 
, as shown by Euclidean distance formula in Eq. (1). (1)
where 
 and distance is calculated point to point, i.e. direct from  to , where they are located with one hop count and calculated as 
, and if it is located on 2nd hop count then these  do not sense each other directly but share a common , which can be represented as 
. We know from the above that 
 U 
. The sensing can be calculated as 
; where  means sensing,  belongs to union U, 
 is neighbors and  represents the sensed values for a particular event.

 first, broadcasts Hello packets (M Hello) to configure its position and receives Hello packets from its neighbors  to establish a connected network. Each  sends its identity with hop count in same packet as it is received from other nodes . It means, 
 at a particular time 
. After that, every  at least know the 1-hop and 2-hop counts from their current position. These messages will broadcast until they reach to BS. Now on ,  and  broadcast messages (Hello) are received at Time . After implementing CH selection algorithm, each  knows its position and how to send their data to CH. This data is onward communicated to BS for further analysis. If a specific  have maximum number of M Hello, then, this  will be CH for that particular area, i.e. 
. If  then select  as a CH.

3.2. State of a node
In proposed four-state model,  is capable of maintaining different states. Depends upon the contents, each node avail different roles in sensing cycle. These four states are derived on the basis of internal components of . Typical components of any  are Sensing , Micro-Controller , and Radio-Link 
. All states have shown in Table 2. However, energy consumed per component, as mentioned in the table, has been chosen from literature [14].

Each state is responsible to keep a node in Active, Sleep, Listen or Probe state and energy is consuming according to the state of that component. These are explained as under:


Table 2. States based on internal components (milli Ampere) m A.

 states	Energy at sensing  (m A)	Energy at micro-controller,  (m A)	Energy at radio link, 
, (m A)	Total energy at  per operation (m A)
Active	0.5	10	30	40.50
Listen	0.5	10	0.05	10.55
Probe	0.5	0.65	30	31.15
Sleep	0.5	0.65	0.05	1.20
3.2.1. Active state
In Active state of , all components are Active 
 with maximum utilization of energy 40.50 (m A). The active state is initial state of a node where a sensor is in active state with all active internal components. Micro-controller consumes 10 (m A), Sensing consumes 0.5 (m A) and Communication link consumes 30 (m A) of energy per transaction.

3.2.2. Listen state
In Listen state, two components, Micro-controller and Sensing , are active whereas Communication 
 is in sleep state. In Listen, the sensor only listens to sensed contents. In this state, micro-controller consumes 10 (m A), sensing consumes 0.5 (m A) and communication link consumes only 0.05 (m A) of energy per transaction. Total energy consumption in this state is 10.55 (m A).

3.2.3. Probe state
In Probe state, Sensing and Communication 
 are active and Micro-controller  is in sleep state, with total energy consumption of 31.15 (m A). This state is used for routing nodes. Probing state is necessary for path establishing nodes and these nodes will never go into sleep state. In this state, Micro-controller consumes 0.65 (m A), Sensing consumes 0.5 (m A) and Communication link consumes 30 (m A) of energy per transaction.

3.2.4. Sleep state
In Sleep state, only Sensing  is active, other two i.e. Micro-controller and Communication-link 
 are in sleep, with total energy utilization of 1.20 (m A). This state is a hibernating state where all components are in sleep state. Micro-controller consumes 0.65 (m A), Sensing consumes 0.5 (m A) and Communication link consumes only 0.05 (m A) of energy per transaction.

3.3. EASS working procedure
Initially, all nodes are in active state. After a number of transactions, if same values are sensed time and again, active-state changes to Listen-state. In Listen-state, a node is only listening to sensed values and micro-controller makes necessary comparisons to check similarities between sensed values. Based on these values, node state changes to Sleep-state if remain persistent for the last three consecutive sensing cycles. Sleep-state consumes minimum energy among all states. Probe-state is rare time state, which is used for communication and is useful only for routing nodes. Routing nodes are path establishing nodes that take part in communication only but have no concern with assessment of values.

All other schemes have also defined different states as discussed in the literature Section 2, However, in EASS, states of a node are defined on the basis of actual amount of energy consumed by each unit. Other schemes passively sense phenomena and they do not apply any comparisons between data. Whereas, in EASS sensed data packets are compared and state of nodes are changed according to contents of data. Table 3, identifies the actual position of each state with parameters. Here, sensor nodes sense some data and if contents of data remains same for three consecutive cycles, state of a node is changed from Active to Listen. If these values are not same, state remains active or change from Listen to Active. After state in Listen, if still data are sensed in same in contents or pattern, state is changed from Listen to Sleep. Now timer decides the next state on the periodic slot [15], [57]. As no communication has founded in Sleep state, a timer is set to 0.5 s and after that, node will change into Listen state. Now same strategy will be applying for Listen state. Sleep state may also changed into Active if the timer is set to 1.0 s. If a node is a routing node, it is activated after 1.5 s as timer descried. And node will in Probe state after every 0.5 s. In Table 3, changing strategy of states based on contents of data packets and timer has shown.


Table 3. Changing state strategy in EASS.

Traces of data	Current state	New state	Timer (nano s)

Active	Listen	—
Listen	Active	—
Listen	Sleep	500 000 000
—	Sleep	Listen	500 000 000
—	Sleep	Active	1 000 000 000
S (i)  Rout (i)	Sleep	Probe	500 000 000
—	Probe	Active	1 500 000 000
3.4. Sensing in EASS
Each  senses phenomena and sends the sensed data packets to concerned CH. A node acquires different states and each state is liable for consumption of a certain level of energy. This section explains that how nodes compare values to realize/check the redundancy in data and change their states accordingly.

3.4.1. Sensing in active state
Initially, each  is in active state and collects sensed data packets from surrounding. It sends these packets to concerned CH. If  node , sensed packet is  at time slot , then data send to CH is expressed as: (2)
where  notation represents sending of data to a CH. The  also retains one copy in buffer of  for future references. If same value is sensed again, i.e.  (3)
 Then, state of node is changed from Active to Listen state, i.e.  Active  Listen where the “” means changing state.

3.4.2. Sensing in listen state
Comparison is validated in three phases and sensed packet  is compared with last sensed value. If traces are found (data packets have same contents), state of node change automatically. One copy is always retained in  buffer for comparison. However, if no traces are found, i.e. , then sensed data  will sent to CH and state will remain the same. In same way, if consecutive  values are same and node is in Listen-state then  adapts Sleep-state, i.e. (4)

3.4.3. Sensing in sleep state
Each time sensing cycle is repeated for collection of data and forwarding those packets to BS. Every time  checks the contents of sensed data packets, which either remain the same or changes. So, if  is constant, i.e. , then, Listen-state is changed to Sleep-state. After availing Sleep-state, nodes now switched to another state depend upon timer values. There are three timers  and 
 0.5 s, 
 1.0 s and 
 1.5 s. Each timer decided next state for a node in Sleep-state. i.e.

If Timer , then  Sleep  Live where  s at 
 at 1st sleep time.

If Timer 
 then  Sleep  Probe where 
 s at 
 sleep time.

If Timer 
 then  Sleep  Active where 
 s.

3.4.4. Sensing in probe state
Probe is a rare case for obtaining . If a node is meeting the conditions for routing node in multiple hop scenarios, then these nodes need to be in such state where data can be receive and forward to the next hops. Probe state is a state in which data is received and forwarded to next hop until reached to BS. The probe is actually a state for routing nodes. A node cannot avail Sleep state if it is a routing node.

If  then  Sleep where  is any Routing node.

If Timer 
, then  Sleep  Active where 
 1.5 s

All these states have drawn in Four State Model as in Fig. 3, where change in states as per the above discussion has been illustrated. This is graphical presentation of four state model. Vertexes are states and weighted-edges are contents of data or timer for changing states. In this diagram, four states have defined inside . Four components have shown as Active or Sleep and have marked as true and false. Each state is logically connected to another state on weighted values in graph. In Active and Listen state, data contents are important for adapting new state, while in Sleep and Probe state, timer is important. In each vertex, internal components of  in Active or Sleep position has shown. combination of three components decided node-state. Adapting new state is based on contents of data packets or timer.

We have sketched the abstract transition model of EASS for chronological flow of states, as shown in Fig. 4. Transitions are based on sense data packet  and time period (Tn). The figure depicts that a node will remain in same state if rapid changes in sensed data. For a specific period (Round T1), the sensing schedule (i.e., forwarding) is only in operation when the state is Active/Probe. Other states are not in communication due to Sleep-state of the communication module. A node will always transmit sensed values if it is in the active-state. When sensed values are the same , state of a node is altered to Listen with no message transmission. If sensed packets remain the same , the state will be transformed from Listen to Sleep. The probe state is acquired for rare cases and almost used for routing nodes. A node in Probe is automatically switched to Active after specific times (Tn”’). A sleepy node can also switch to Active after a number of transactions because sleeping for a long time may result in missing certain events. The chronological diagram, in Fig. 3, depicts that:

•
Nodes are in active state at , after comparison of consecutive three packets, if contents of data packets are same  node is switched to Listen-state.

•
If a node in Active-state and contents are different each time , node remains in same state (Active).

•
At , if node is in Listen-state and contents are still same , node is switched to Sleep-stat (Active).

•
While at same time , if contents of sensed values are different, then Listen-state is switched to Active state again.

•
If any node is a path-establishing node then these nodes are responsible for receiving and forwarding sensed data packets only. Probe-state is a state that is responsible for forwarding data packets only and these nodes will never get Sleep-state. Because, acquiring Sleep-state for routing nodes may result in disconnections and partitioning in network.

•
If a node is in Sleep-state at , it remains in Sleep-state or switches to another state depending upon the conditions, i.e. 

–
If a node is in Sleep-state and it gets timer , the node is switched to Listen-state.

–
If a node gets timer 
, it adapts Active-state

–
The allocation of timers  for any node is random. Sleep node can get timer either  0.5 s, 
 1.0 s, or 
 1.5 s as mentioned in Table 2. 
 is used for changing state from Probe-state to Active-state.

Different states of  is the combinations of internal components of a node. Each  can adapt either one state from these four states but one state is mandatory. In EASS, 25% of each state is maintained i.e. Active  25%, Listen  25%, Probe  25% and Sleep  25%. We have sketched these changing states with optional and mandatory substitution in feature diagram in Fig. 5. Different configuration of  in form of four states have been shown and each state is further operating on some compulsory and optional parts. In Active state, all components i.e. micro-processor, radio-link and sensing are active and mandatory. In Listen state, micro-processor and sensing are mandatory while radio-link is an optional. In Probe state, radio-link and sensing are mandatory and Processor is optional. In Sleep state, only sensing is mandatory while micro-processor and radio-link is an optional. Mandatory components mean that this component is active in a specific state and Optional component means that this component is in hibernate state. When a  is active then all components are mandatory and no optional component. However, if  changes its configuration, for example, deactivate its radio component, a new state is adapted i.e. Listen state. If it deactivates microprocessor and activates other components the new state will be Probe state. In Sleep state, only sensing is active, other components are inactive as shown in Fig. 5.

Comparing/storing values in three consecutive sensing cycles is on logical basis. Repeating particular packets in succeeding cycles means that same packets are being sensed in three successive periods. Repeated detection of same event advocates that there is no change in the target scenario. It can be more than three, like four or five, but we believe that three comparisons are significant for data-traces in sensed data packets. Because storing or comparing of more than three values may affect system efficiency. As too many comparisons may create latency in overall communication and consume extra energy in processing. On the other hand, storing or comparing less than three times may also be not enough for making decision and may result in changing states frequently which can have an effect on system efficiency. Therefore, the assumed three values have been considered an optimum value. However, it can further be investigated, in future, to find a more optimum value.


Download : Download high-res image (242KB)
Download : Download full-size image
Fig. 5. Feature diagram of EASS.

4. Algorithm: EASS (energy-efficient scheduling scheme for mesh grid in WSN)
Consider that  are sensors nodes with Identities . CH collects data from surrounding node and all CH send collected data to BS, i.e.


4.1. Phase-I; Establishing topology phase
Step-1: Deployed Sensor Nodes S(i)  S1, S2, S3  S(i  j)

Step-2: Calculate distances and neighbor Nodes S(i) 

Step-3: For all Nodes and full coverage 

Step-4: If  then select  as a CH

Step-5: As Rs .

4.2. Phase-II; Sensing phase
Step-1: IF any CHi receives data  from surrounding nodes THEN

CH 

Step-2: CHi collects sensed data packets, aggregates them, appends identities and sends these data packets to BS.

BS 

Step-3:  retains one copy of last data packets for comparison. When new values have sensed, it compared it with saved values in buffer.


Step-4: IF contents of sensed data packets are same, THEN change the state of the Node


Step-5: Change the state of a node

IF S(i) Active 

Step-6: Else IF

  

GoTo S(i) Listen  S (i) Sleep  

Else GoTo S(i) Active

Step-7: Else Tn  Ts

  

Goto S(i) Active  S (i) Listen  

Else Goto S(i) Active

4.3. Phase-III; Termination phase
Step-1: Check the Energy level of each CHi  


Step-2: Select E(CHn)  E(CHn+1)

Step-3: State is finalized and re-initiate from the First Phase.

The implementation of EASS, for the above algorithm in Three-Phase Diagram, is depicted in Fig. 6, where three-phases are shown in an abstract form. In phase-1, topology is established, in which  broadcast their discovery messages and . The neighbors are discovered and on the basis of these hello messages, CH is selected. Phase-2 is main phase in which sensing of data packets is controlled. In this phase  checks the contents and changes states accordingly. If contents remain persistent, state is changed to another otherwise remains the same. Phase-3 is terminating phase, where normal operation for re-clustering has initiated. After checking energy level, if needed for re-clustering, the process is started and new CH is selected. The responsibilities of CH are transferred to new CH and first CH node loses its position. The whole process is shown is in a cyclic form. When there is a change in network structure, process is initiated for another implementation of proposed scheme. Abstract feature diagram 6 is actual implementation of the overall network. In the first phase, all nodes communicate to join clusters and transmit data to a specific CH. In the second phase, the proposed four states model is implemented. In the last phase, re-clustering is performed whenever needed.

5. Module-based event-driven model of EASS
In EASS, each node works in different operating states based on activating different modules inside . Sensing module senses an event and convert analog data into digitized form. Micro-controller does the necessary processing over data and forward that information to communication link. Communication-link transmits that data to CH and CH further sends to BS. In Fig. 7, a sensor node has shown with all possible states. Each module has shown its operating states, depending upon state of a node these modules can transit from one to another. Sensing module has two operating states [Active/Idle], Micro-controller has three operating states [Idle/Active/Sleep], and Communication module has also three operating states [Active/Idle/Sleep]. These components are actually utilizing a certain amount of energy when performing their tasks. Active-state always consumes more energy while Idle-state have moderate consumption of energy and Sleep-state has minimum level of energy consumption. In EASS, these components are changed from one to another i.e.  and these are autonomous state at different energy levels. Different states of a node are derived by combining different modules. In Table 4 module-based activities have shown in detail. Where each state is derived on activating or de-activating different components inside .

In EASS, a chronological methodology has applied on changing states and on storing further values in a buffer. In Fig. 4, all possible state positions and switching from one state to another at different values have been shown. Where data matching effects node status. In three consecutive cycles if data are same , then node state is switched from Active to Listen state. Now in Listen state, if sensing values are different , then node state switches from Listen to Active. While after sending one copy to BS, these nodes senses new values and packed their buffers with new values. In Active state, nodes resume all their initial circumstances. In another case, if a node is in Listen-state and new values are same as previous three values, its state is switched Listen to Sleep-state. This procedure is applied for checking contents only. For pattern matching, more values need to save and for this more memory is needed. For now, here EASS has implemented on content based only. Frequency matching also needs more values and required more memory than content-checking or pattern matching.


Download : Download high-res image (292KB)
Download : Download full-size image
Fig. 7. Overall Sensor Model for activating different components.


Table 4. Component based sensing states.

State of node	Sensing 	Microcontroller 	Radio link 
Active	Active	Active	Active
Listen	Active	Active	Sleep
Probe	Active	Sleep	Active
Sleep	Sleep	Sleep	Sleep
6. Contents of data and memory requirement
In EASS, contents of sensed data packets are not only important for adjusting state of a node but also for controlling its sensing capabilities. To understand the memory requirement and how the comparison of values is carried out by the proposed scheme, a simple 4-bits data set has been used in the example scenario given below:

6.1. Content checking
Consider the following sensing scenarios:

•
If  at 
 at node 
, buffered value is  and state is Active, then the state will change to Listen-state. i.e.  State  Active Then Active-state  Listen-state. ::  means Changing state

•
If  at 
 at node 
, buffered value is  and state is Listen, then the state will change to Sleep-state. i.e.  State  Listen Then Listen-state  Sleep-state.

•
If  at 
 at node 
, buffered value is  and state is Active, then this state will not change and remain Active-state. i.e.  State  Active Then state will remain Active-state

•
If  at 
 at node 
, buffered value is  and state is Listen, then Listen will change to Active-state. i.e.  State  Listen Then Listen-state  Active-state.

•
If 
 at 
 at node 
, where 
 Routing-node, buffered value is  and state is Active/Listen, then Active/Listen will never change to Sleep-state. i.e. 
 State  Active/Listen Then Active/Listen-state  Probe-state.

•
If State  Sleep & Timer  n, Then Sleep  Listen where n  0.5 s.

•
If State  Sleep & Timer 
, Then Sleep  Probe where n  0.5 s.

•
If State  Sleep & Timer 
, Then Sleep  Active where n  1.0 s.

•
If State  Probe & Timer 
 Then Probe  Active where n  1.5 s.

6.2. Pattern matching
Sometimes content checking is not useful and may create extra overhead in comparison. Then find out different patterns in those packets are more useful for deciding node states. Patterns matching in sensed data packets, data-set may be varying and checking is on bits-configuration based. Consider the following data packets;

If 
 at 
 at node 
,

If 
 at 
 at node 
,

If 
 at 
 at node 
,

It means that pattern is matching and repeating at intervals. The state-based policy is applied on pattern now. In this case the node will switch from Active to Listen. According to pattern, state of a node will change as discussed above for content checking.

6.3. Frequency distribution
For frequency-distribution in sensed data packets, required larger data set for comparison and it requires more buffer. Here data distribution at different intervals are captured and different grouping are detected. Consider the following example;

If 
 at 
 at node 
,

If 
 at 
 at node 
,

If 
 at 
 at node 
,

If 
 at 
 at node 
,

If 
 at 
 at node 
,

If 
 at 
 at node 
,

In the above data-set, in each three sensing cycles, second slot keeps repeating in each cycle, while third slot is repeating after every second cycle.

The proposed state based approach can also be implement in finding frequency of same contents after a time interval. For time being, EASS is just implemented on contents based with only checking the contents.

EASS is implemented in MATLAB, explained in detail in the next section, using off-shelf product CC2420 [18]. Including many other features, the buffer size is defined for receiving data and sending data at sensor. Buffer at receiving side 128 Bytes FIFO and at sending side 128 Bytes FIFO as mentioned in simulation Table 5. While packet size of WSNs vary from application to application. Different packets sizes (frames) are 24, 28, 30, 40, 60, 64, 90, 120, 128, 256, 512 Bytes [24], [59]. For 128-Bytes memory in receiving FIFO can store 24 packets size as 6 times, 30 packets size as 4 times, 40 packets size as 3 times, 64 packets size as 2 times and 128 packets size as one time. In the same way, sending buffer FIFO can store these values. If both queues are combined, size will double 256 Bytes and it can store and compare more data packets. EASS mainly focuses on contents of packets and compares these values at bit-level. Therefore, in experiments, packets size is limited to 64 Bytes  512 bits. Lengthier packets size effects the system efficiency and decreases system throughput. In EASS, packet size is 64 Bytes (512-bits) while memory at both side is 256 Bytes (2048-bits). For current version of EASS, no extra memory is needed.

7. EASS simulation setup
EASS has been implemented in MATLAB (V.R 2018a) using parameters of CC2420. Network topology has been established with 100–200 nodes with area of 200 × 200, and energy of 0.5 Joules for each node. Broadcast packet (C Message) size is 16 bits while actual data packet is 512 bits. After applying different operations, energy consumption is calculated at each point. Different number of rounds with various parameters have been applied. System behavior has been observed using different metric values and demonstrated using graphs. Contents of sensed packets have been compared and on the basis of contents, functionalities of nodes are regulated. Different parameters, symbolic presentations and concerned values are shown in Table 5.


Table 5. Simulation parameters.

Simulation parameters	Variable used	Metric values
Frequency	Frq	2.4 GHz IEEE 802.15.2
Data Rate	Drate	250
Area of simulation	A x A	200 x 200 m
Number of nodes	N	100–200
Initial Energy	Eo	0.5 J
Cluster Heads	CHs	10–20
Number of Rounds	Rmax	1000
Transmitter energy per transaction	ETX	19.7 m A
Receiving energy per transaction	ERX	17.4 m A
Buffering at transmission + Receiving	BTX	256 Bytes
Data Packets	Dp	512 bits (64 Bytes)
Energy utilization at Micro-controller at Active/Listen	-Active/-Listen	10 nJ
Energy utilization at Microcontroller at Sleep/Prob	-Sleep/-Prob	0.65 nJ
Energy utilization at Radio link at Active	
-Active	30 nJ
Energy utilization at Radio link at Listen/Prob	
-Listen/
-Prob	0.05 nJ
Energy utilization at Radio link at Sleep	
-Sleep	30 nJ
8. EASS evaluation
EASS has implemented in four state model, however many other states can be derived from Fig. 7. The proposed states are optimized and useful states where these states save energy and also ensures less disconnection in network. The proposed scheme can be implemented in further states, however, these four states fulfill EASS network’s requirements. EASS ensures full coverage, drops redundant data values and advocates that even a single event is not missed. Combination of internal components in different states ensures four useful states in terms of energy. On the other hand, conversion between too many states consume more energy and frequent state changing strategy also effect normal network operations. All possible states and energy consumption related to each state are shown in Table 6, and these combinations are also visualized in Fig. 8.

For evaluation, EASS has implemented in simulations in four different states and its behavior is graphed in a number of rounds. First EASS performance is checked with defining a none-state condition, in which, 100 nodes died in 900 rounds. In this scenario, data is sensed and forwarded to BS without any checking or analysis. When EASS is implemented in two-state (Active/Sleep only), only 8 nodes were alive and rest of other nodes are down in 1000 rounds. When EASS was checked with three states (Active/Sleep/Listen only), in 1000 Rounds only 20 nodes remained alive with active sensing. When EASS is tested in recommended four states, 50% nodes remained alive in 1000 rounds. Four state model utilized minimum energy compared to other states as in Fig. 9.


Table 6. All possible charge position of three modules of a Node.

Round number	S	P	C	t/R	Round number	s	p	c	t/R
1	0.50	10	30	41.50	9	0.50	0.65	0.05	1.20
2	0.50	10	28	38.50	10	0.00	10.0	30.0	40.00
3	0.50	10	0.05	10.55	11	0.00	10.0	28.0	38.00
4	0.50	9.5	30	40.0	12	0.00	10.0	0.05	10.05
5	0.50	9.5	28	38.0	13	0.00	9.5	30.0	39.50
6	0.50	9.5	0.05	10.05	14	0.00	9.5	28.0	37.55
7	0.50	0.65	30	31.15	15	0.00	9.5	0.05	9.55
8	0.50	0.65	28	29.15	16	0.00	0.65	30.0	30.65

Download : Download high-res image (143KB)
Download : Download full-size image
Fig. 8. Maximum charge is consumed in communication.

9. Comparison of EASS with existing schemes
The performance of EASS is compared with other recent and benchmark schemes including UASNs (An Effective Scheduling Algorithm for Coverage Control in Underwater Acoustic Sensor Network) [50], ESMA (Enhanced multimodal Switching Mechanisms for node scheduling and data gathering in wireless sensor networks) [6], and with EBC (Edge based Centroid/Coverage Enhancement Algorithms for Distributed Mobile Sensors Deployment in Wireless Sensor Networks) [4]. All these schemes are working on state-based mechanism and are used optimized models for energy consumption. The main difference is in sensing activities whereas these schemes are sensing in a proactive and passive manner. They change state of a node based on periodic checking, location-based Hello messages, sensing RSSI, and on residual energy. In EASS, state of a node is changed by checking contents of sensed values. These schemes (UASNs, ESMA, EBC) also consume more energy in self-organization process, while EASS minimizes control messages for re-clustering and re-configuration, which ultimately decreases traffic overhead and increase energy-efficiency.

9.1. Experiment 1: EASS alive node comparison
In this evaluation experiment, stability of EASS is determined in terms of Live Node versus Number of Rounds. After applying an equal number of rounds, i.e., 1000 with an equivalent number of 200 nodes, performance of EASS is found better. EASS has more alive nodes as compared to UASNs, ESMA, and EBC. Initially, simulations start with 200 live nodes. After 300 rounds, nearly all nodes in EBC has died, while UASNs and ESMA completely drained at 650 and 850 rounds, respectively. Whereas EASS completed 1000 rounds with still 75 alive nodes, which clearly shows that 37.5% nodes are still alive as shown in Fig. 10. Energy efficiency of network is significantly increased by EASS due to its content based checking. Table 7 shows the percent increase of energy efficiency with other schemes.

9.2. Experiment 2: Number of cluster heads (CHs) in EASS
Since, re-clustering in network depends upon the remaining energy of a CH, therefore, if re-clustering is frequently performed in a scheme, its energy drains more quickly. For CH selection process, a scenario of 100 nodes and 1000 rounds has tested. In this experiment, each of scheme (UASNs, ESMA, EBC, and EASS) have been checked and analyzed for a number of CH. EASS selected 360 CHs in 1000 rounds while EBC selected 545 CHs, UASNs selected 720 CHs, and ESMA selected 1000 CHs respectively. EASS has dynamic and long-live clusters and CH selection does not perform frequently. Furthermore, due to controlling of sensing, traffic in network is minimized and energy consumption is reduced that ultimately extended cluster life. As seen in graph below in Fig. 11, EBC consumed more energy per transaction and selected CHs more frequently, as a result energy is depleted more quickly. The reason being that such frequent changes in topology need to broadcast control messages more frequently in network. Hence, more energy consumes and therefore, EBC consumed more energy and selects more CHs. ESMA and UASNs also consume more energy in operations and need to re-cluster more quickly. EASS consumes very little energy in sensing, processing and communication, as a result more stable and long-live clusters. There are 92.6% increase is calculated in energy-efficiency due to CH selection process as shown in Table 8.


Table 8. Improvement in energy-efficiency due to CH selection process.

Rounds	Number of CH between EASS, EBC, ESMA, UASNs (1000 Nodes)
Scheme-I	Scheme-II	Scheme-II	Average	EASS	Percent increase (%)
EBC	ESMA	UASNs			
0	10	10	10	10.00	10	0
200	180	60	50	96.66	40	141.65
400	290	200	130	206.66	130	58.992
600	500	350	250	366.66	170	115.686
800	790	540	400	576.66	260	121.792
1000	1090	720	540	783.33	360	117.591
Percent, increase in energy-efficiency due to Cluster Head selection process	92.60%
9.3. Experiment 3: EASS dead node comparison
Due to controlling redundancy and minimizing sensing cycles, energy consumption per node decreases in EASS. Four state model enforces to dynamically change states within active topology. All these measures prolong node-life and live longer in EASS as compared UASNs, ESMA, and EBC. Consequently, ratio of dead nodes is very low. In Fig. 12, in 1000 rounds, EBC, UASNs and ESMA drained total 100 nodes while in EASS only 45 nodes are dead. Compared to other scheme, EASS increases in energy-efficiency 38.11%, this clearly showing the effectiveness of proposed scheme. In Table 9, indicates dead nodes after number of rounds and percent change in these values. This comparison clarifies that EASS used minimum energy due to its internal states while other schemes performed overcast calculations and consumed more energy that led to more dead nodes.


Table 9. Percent increase in energy in terms of Dead Nodes.

Rounds	Dead nodes ratio between EASS, EBC, ESMA, UASNs (100 Nodes)
Scheme-I	Scheme-II	Scheme-III	Average	EASS	Percent increase (%)
EBC	ESMA	UASNs			
0	100	100	100	100	100	0.000
200	93	90	87	90.00	84	7.142
400	87	80	77	81.33	70	16.189
600	77	60	55	64.00	50	28.000
800	63	40	30	44.33	25	77.333
1000	45	0	0	15.00	0	100
Percent increase in energy-efficiency due to Dead node ratio	38.11%

Download : Download high-res image (554KB)
Download : Download full-size image
Fig. 12. Dead Node comparison.

10. Discussion
Redundant data collection and forwarding to BS not only waste useful sensing cycles but also have greater impact on resources of WSNs. EASS applies watchful observation of data and checks contents of sensed data packets. If same values are repeated at each sensing cycle, state of a node is changed. This process has improved throughput in terms of energy-efficiency.

EASS has been compared with other benchmark schemes and it is experimented that due to its four state model, it performs better than the mentioned existing state based scheme. Other schemes work in passive and proactive manner while proposed scheme works in a reactive manner. Other schemes change states based on certain parameters including residual energy, periodic message, sensing RSSI, Active probe messages and many other algorithms. But in EASS, contents/frequency/pattern of sensed data packets are observed and checked. Nodes are adjusted in different states based on the observed contents/frequency/pattern.

EASS has been evaluated using four conditions i.e. no-state, two-states, three-states and four-states conditions. In 1000 Rounds, each state is showing different effects on energy consumption. In no-state condition, all nodes are down in 900 rounds. In two-state condition, 92 nodes are down and 8 nodes are still live and sensing. EASS in three-state condition, 80 nodes are dead and 20 nodes are still in sensing. But when EASS has implemented in four-state condition, 50 nodes out of 100 are dead while 50 are still in sensing. It is proves that four state model is an optimized form of EASS. Implementing it in more than four states (Like five-state and so on), it may create extra overhead in changing states and adjusting all these states in WSNs. Too many states may also lessen the effectiveness of proposed scheme. EASS has been compared with other schemes using different metric values i.e. Live Nodes, Number of CH selection and Dead Node. The results confirmed that EASS performed better in all cases. In Alive-Node experiment, energy of the three schemes i.e. EBC, ESMA and UASNs deplete more quickly due to its sub-massive and unintelligent sensing strategies. While by adapting a real time and reactive sensing procedure by the proposed scheme, the network lifetime has improved.

11. Conclusion and future work
The demand for renewable energy resources and seamless relationship between utilities customers and grid, the newly emerged Energy Cloud paradigm allows the traditional utility model for energy provision using a wide range of strategic, operational, and technological techniques. In this new paradigm, a higher and lower level efficient-energy management is always required because better and improved strategies can save energy consumption in situation where poser options are limited, such as embedded and sensor devices in WSNs. In most of scenarios, WSNs work in a passive manner in a mesh grid where data is only sensed and forwarded. The excessive sensing of redundant message creates congestion and consumes more energy. Sending bulky and redundant data packets to Base Station, not only drains energy level of a node but also threatens the lifespan of low-energy networks. We proposed a new scheme called “Energy Efficient Adaptive Scheduling Scheme (EASS) for Mesh Grid Wireless Sensor Networks”. Based on the internal components of sensor node, four states (Active/Listen/Sleep/Probe) have defined. The four-state model is configured according to the contents of sensed data packets. If contents of sensed data packets remain the same for three consecutive inputs, state of node is changed. Switching between these four states depends upon the contents/pattern of sensed data packets. State-based sensing reduces energy consumption and it improves energy-efficiency. EASS ensures full coverage and lengthens network lifetime. Evaluation of the proposed scheme confirms that due to the content-based four-states model, the energy-efficiency of the network was increased by 50%. Furthermore, compared to other state-of-art schemes, EASS increased energy-efficiency to 62.5% due to alive nodes, 92.60% due to the reduction in CHs overhead and 38.11% due to the dead nodes ratio. These statistics clearly show the effectiveness of the proposed scheme in terms of energy-efficiency.

Clustering improves energy efficiency by managing network structure and hence minimizing energy consumption. Content-aware approaches minimize excessive and unnecessary sensing which affects to reduce extra processing and communication at a node level. This will also reduce a CH traffic which will last longer and therefore reduce re-clustering in network. The EASS has been deployed on a cluster-based network, where clustering will manage efficient network structure and content awareness will avoid unnecessary messages forwarding. Collectively, they improve network throughput and increase network life time. However, EASS does not depend on cluster-based networks and can be applied in other network structures. In future, we intend to explore the efficiency of EASS using network structures other than using cluster-based networks as underlying network structure.