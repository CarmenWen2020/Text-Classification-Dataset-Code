Abstract
Along with the rapid growth of the size and complexity of Internet of Things (IoT), the security of terminal devices has increasingly become a focus. In order to ensure the security of terminals, the trusted network connect (TNC) could realize not only the user authentication but also the platform attestation during the network access process. However, the existing TNC infrastructure is based on a centralized architecture, which is not suitable for distributed services. To address this problem, we present a blockchain-based TNC protocol named BTNC to ensure the reliability of terminals in IoT. Due to the decentralization, trustlessness, trackability, and immutability features of blockchain, BTNC is able to verify the security of terminal devices in IoT networks. First, we come up with some threats, including unauthorized user, illegal platform and platform replacement attack, then correspondingly define the security goals of our scheme. Second, combining key exchange protocol based on blockchain and D–H PN protocol included in TNC specification, we propose a blockchain-based trusted network connection protocol, which realizes mutual user authentication, platform attestation and trust network access by cryptography among terminals in IoT. Third, we make a security analysis in the PCL mode and conclude that our protocol can resist the attacks above. Finally, the performance overheads caused by our scheme are evaluated and the experiments show that it is efficient and feasible for different kinds of terminals in IoT.


Keywords
Blockchain
IoT
Key exchange
Platform measurement
Trusted network connection

1. Introduction
With the rapid development of the Internet of Things (IoT) technology [6], we have witnessed the wide adoption of IoT applications across varieties of industry sectors, including home automation, transportation, medicine and manufacturing [4], [39]. However, some security issues of IoT are still unsolved and some typical attacks still threaten applications in IoT [13]. There has been an increasing awareness of the necessary to insure the security of terminal devices in the large-scale distributed deployment [18]. In other words, in order to guarantee the security of the IoT environment, not only the users of the device but also the integrity of the platform is required to be verified.

Nowadays, TCG (Trusted Computing Group) [20], [34] has extended its efforts in trusted computing to the development and promotion of the TNC specification [40], [41]. Therefore we adopt TNC architecture to verify the legitimacy of the users’ identities and the integrity of devices in IoT system. However, tradition TNC architecture based on client/server(C/S) structure is centralized to manage terminals, which is not adaptable to the IoT system due to its decentralization. Meanwhile, some existing management schemes [19], [25] based on centralization mode are not able to provide distributed architecture to realize verification among terminals without trusted third parties.

To address these problems, the emerging blockchain technology can serve as a promising candidate to provide verifiable services [14], [35]. Blockchain is an intelligent peer-to-peer network [38] that uses distributed ledger to identify, disseminate and record information, which is based on cryptography principles to implement distributed data storage. Because of its decentralization, trustlessness, traceability, and immutability features, blockchain has the potential to achieve the management and verification among terminals without centralized architecture [45].

Nowadays, there have been several ways [22], [37], [43] to implement terminals access control based on blockchain. However, scheme ChainAnchor [22] essentially adopts the centralized management model, i.e. its security needs to rely on trust authority. Scheme RSU [43] just guarantees the security of the devices through the pattern of trust management, i.e. it evaluates the security of a device by assessing its trust threshold. Scheme TM-coin [37] realizes the verification process of terminals based on trusted computing theory without TNC framework, i.e it utilizes remote attestation mechanism to verify the integrity of devices.

In conclusion, the related schemes have following drawbacks: (1) some schemes [22], [44] could not provide a distributed network access control architecture without trust authority; (2) some schemes [5], [43] do not attest the integrity of the device platform; (3) the others [1], [37] do not realize the trusted network connect among terminals in the distributed environment.

Therefore, we are supposed to consider following challenges:

(1) Realize distributed integrity measurement storage and platform attestation.

Due to the decentralized characteristic of blockchain, it is difficulty to verify the integrity of the terminals without a trusted party. We should design a blockchain based protocol to realize integrity measurement storage and platform attestation without trust authority.

(2) Achieve user authentication and key agreement protocol based on blockchain.

Because the key exchange process in D–H PN protocol of TNC is based on C/S mode, we are supposed to extend and modify the key agreement protocol based on blockchain so as to achieve user authentication among users in IoT environment.

(3) Design a secure blockchain-based trusted network connect protocol to resist platform replacement attack.

Because the TNC framework cannot resist the platform replacement attack, we are supposed to design a secure blockchain-based trusted network connect protocol. Not only does it realize user authentication and platform attestation among terminals in the distributed environment, but also it can resist platform replacement attack based on security analysis.

Facing these challenges above, the research on the implementation of point-to-point mutual verification between terminals based on blockchain appears to be particularly important.

Our contributions. In this study, we propose a blockchain-based scheme BTNC, which combines the blockchain technology and TNC framework. Not only does this scheme suit decentralized network, but also it realizes user authentication and platform attestation among terminal devices in IoT environment. We put forward some threats caused by TNC in the distributed environment without trusted third party and propose a PCL-secure scheme based on blockchain, which ensures terminal devices to access network credibly. Then we analyze the security of the proposed protocol in PCL mode and evaluate the performance of scheme through simulations.

Our contributions in this paper are threefold.

1.
Decentralized integrity measurement. We propose a novel blockchain-based network connection scheme in the distributed environment. The platform measurements could be stored and included in the blockchain in a decentralized mode and the verifiers are able to obtain these information by querying and downloading the blockchain so as to realize the platform attestation.

2.
Authenticated key exchange based on blockchain. Our scheme combines Diffie–Hellman over bitcoin with TNC framework, which conducts key agreement protocol based on blockchain among users so as to achieve the user authentication in the distributed environment.

3.
Security in protocol composition logic. We theoretically analyze the security of our scheme by protocol composition logic (PCL) method and further prove that BTNC could resist platform replacement attack.

Organization. The remainder of this paper is organized as follows: Section 2 presents the related work of our protocol while Section 3 presents some preliminary backgrounds, including trusted network connect, blockchain, Diffie–Hellman over Bitcoin and platform replacement attack. Section 4 presents system model, threat models and design goals. Section 5 presents the detailed description of the proposed scheme. In Section 6, we make a security analysis of our scheme and the performance analysis of the proposed scheme is presented in Section 7. At last, we conclude this paper in Section 8.

2. Related work
In 2003, the emergence of TCG marked the further maturity of trusted computing technology along with a series of technical specifications including TNC framework [40], [41]. Under the guidance of these specifications, many network enterprises utilized TNC architecture to support and manage their products, which had been applied in practice. Cisco NAC utilized TNC infrastructure to perform security policy and check whether the illegal terminal device attempted to access network so as to prevent adversaries such as viruses, worms and spyware [23]. Microsoft NAP leveraged the client application named Quarantine Agent to transmit system information to Network Policy Server which cooperated with trusted third party to ensure that all equipment can be verified before accessing the network [2]. At the same time, some protocols based on TNC framework were also proposed gradually. Zhang et al. [44] made a comprehensive and reasonable analysis on TNC and proposed a new protocol Twin-DH to resist platform replacement attack and realize trust network connection. However, the system architecture proposed above are all based on C/S structure, which is not suitable for decentralized and distributed environments.

From the perspective of the distributed environment,M. Dorodchi et al. [9] proposed a scheme to manage devices in IoT system securely by combining a trust policy and a trust framework. F. Bao et al. [5] analyzed whether the equipment in IoT system was credible by utilizing the technical approach of trust management to guarantee the security of the whole system. Gao et al. [19] came up with a secure logistics information scheme to provide privacy protection of both personal information and logistics information in IoT environment. Rwan et al. [32] described the challenges and solutions of current IoT security. Ma et al. [31] propose a privacy-preserving mechanism with differential privacy for vehicle networks. Gai et al. propose a tensor-based fully homomorphic encryption [12] and establish a dynamic privacy protection model [10] for IoT. At the same time, some biometric security solutions are also proposed based on feature recognition [27]. Ma et al. investigate voice recognition [28], face recognition [29] and eye-movement recognition [30] which can be used to realize biometric authentication. However, the researches direction mentioned above do not involve trusted computing, which lacks the evaluation of platform integrity of terminal devices in IoT environment.

As for blockchain system, S. Nakamoto [35] proposed Bitcoin as a cryptocurrency and worldwide payment system in 2008. After Bitcoin, lots of systems [36] based on blockchain had being increasingly developed and widely used to realize secure management in IoT [15], [17]. Ji et al. [24] investigated the location sharing based on blockchains, which realized privacy-preserving location sharing for telecare medical information systems. Gai et al. propose a conceptual model for fusing blockchains and cloud computing [11], and propose a model permissioned blockchain edge model for smart grid network satisfying privacy protections and energy security [16]. Siamak et al. [33] proposed an authenticated key exchange (AKE) protocol over Bitcoin, which realized end-to-end secure communication among Bitcoin users in a post-transaction scenario without requiring any trusted third party. However, these papers do not deal with trusted computing and therefore the platform of terminal devices in distributed environment cannot be verified. Jaemin et al. [37] combined blockchain and trusted computing in a distributed system to achieve remote attestation. However, the assumptions of the protocol are unreasonable and they do not consider the verification of terminal devices in distributed systems from the perspective of TNC.

3. Preliminaries
3.1. Trusted network connect
TNC architecture. The architecture consists of three entities: the access requester (AR), the policy enforcement point (PEP) and the policy decision point (PDP). Briefly, AR collects the information of platform and sends the message to PDP in order to apply for connection. When receiving AR’s access request, PDP compares the AR’s credentials based on local security policy and makes a decision whether the access request should be granted. PEP controls access to protect network and performs the decisions made by PDP.

AR consists of three modules: network access requestor (NAR), TNC client (TNCC) and integrity measurement collector (IMC)while PDP consists of network access authority (NAA), trusted network connection server (TNCS) and integrity measurement verifier (IMV).

Moreover, there are multiple interfaces in this architecture, including IF-T, IF-TNCCS, IF-IMC, IF-IMV, IF-M and so on. Among them, IF-T maintains the transportation of messages between NAR and NAA. IF-TNCCS relates to interaction between the TNCC and the TNCS as it pertains to the exchange of integrity measurement data. IF-M defines the protocol for messaging between IMC and IMV [40], [41].

IF-T: Protocol bindings for tunneled extensible authentication protocol (EAP) methods. NAR and NAA communicate with each other via four protocol layers including EAP-TNC, Tunnel EAP, EAP and access protocol, which are combined to form the IF-T protocol binding for tunneled EAP methods [42]. EAP-TNC is designed to encapsulate IF-TNCCS messages in a very simple EAP method, which can be carried over tunneled EAP methods using standard attribute value pairs. This allows IF-TNCCS messages to be carried within tunneled EAP methods while the method creates a cryptographically protected tunnel over EAP.

3.2. Blockchain
The blockchain is a growing list of records, called blocks, which are linked using cryptography. By design, blockchain is a public ledger of all transactions that have ever been executed. It is constantly growing as miners add new blocks to it to record the most recent transactions. Once recorded, the data in any given block cannot be altered retroactively without alteration of all subsequent blocks. Each node in blockchain has a copy of recorded transactions, which is downloaded automatically when the miner joins the network. The blockchain has complete information about addresses and balances from the genesis block to the most recently completed block. As a public ledger, it is convenient to query any block for transactions associated with a particular address with help of public-key cryptography.

The blockchain is seen as the main technology innovation of Bitcoin because it stands as a “trustless” proof mechanism of all the transactions on the network. Users can trust the system of the public ledger stored on many decentralized nodes, as opposed to having to maintain trust with a third party. It allows the disintermediation and decentralization of all transactions of any type between all parties on a global basis [35].

The blockchain is like another application layer to run on the existing stack of Internet protocols, adding an entire new tier to the Internet to enable economic transactions, both immediate digital currency payments and more complicated financial contracts. Further, the blockchain may be used not just for transactions, but also as a inventory system for the recording, tracking, monitoring of all assets [36].

3.3. Diffie–Hellman over Bitcoin
Due to the utilization of blockchain to achieve desirable decentralization, we need to extend the content of D–H PN protocol of TNC specification based on distributed environment. In order to guarantee the privacy and integrity of key exchange process, we include the Diffie–Hellman over Bitcoin (DHOB) scheme, proposed by Siamak F. Shahandashti into our protocol [33], which combines the blockchain and key agreement protocol based on elliptic curve digital signature algorithm (ECDSA) and elliptic curve Diffie–Hellman (ECDH) [23], [26], aiming to achieve transaction-level authentication by taking advantage of a secret that only exists due to the creation of transactions that are stored in the blockchain. This kind of key agreement protocol establishes a secure end-to-end communication channel between users, which takes advantage of leveraging the transaction-specific secrets in the confirmed transactions published in the blockchain. The domain parameters of the DHOB can be found in [36].

3.4. Platform replacement attack
In TNC’s specification, D–H PN is used as an EAP-TNC protocol and the established key should be exported and mixed into the tunneled EAP method’s session keys. However, the D–H exchange in protocol D–H PN could not provide a strong cryptographic binding between the authenticating user and the TPM-based Integrity Report making D–H PN could not resist platform replacement attack, which will compromise the security of terminals in IoT environment. Against this kind of attack, Zhang et al. make a comprehensive and reasonable analysis on TNC and the platform replacement attack is described in detail in [44] including threat models and adversary description.

4. Problem formulations
4.1. System model
Our scheme is designed under the IF-T interface in TNC architecture and we assume that each terminal device is initially equipped with a trusted platform module (TPM). TPM is a trust root of a trusted computing platform, which has the ability of cryptographic operation and storage. The integrity information of the entire platform can be obtained within the TPM by invoking relevant interfaces.

Here, we let terminal  and terminal  respectively represent a requester and a responder in IoT environment. The system model is shown in Fig. 1, which consists of three entities: terminal (TD
), terminal (TD
) and blockchain. Regularly, TD
 includes user (User
) and device (Device
) while TD
 includes user (User
) and device (Device
). Note that, user and device are integrated into one entity named terminal. Here, TD
 and TD
 respectively measure their platform integrity and register themselves in the initialization phase. Then, during the trusted network connect phase, User
 and Device
 perform mutual verification with User
 and Device
 in order to guarantee the security and credibility of the distributed network. Moreover, blockchain is responsible for maintaining and updating the transactions which it receives during the whole process.

Terminal . As a responder, TD
 can establish connection with TD
 when receiving a request from TD
. Then TD
 is able to compare TD
’s platform integrity with its latest transaction included in the blockchain and verify whether the other party is compromised. Here, User
 and Device
 are responsible for performing mutual verification with User
 and Device
 in the trusted network connect phase.

Blockchain. Blockchain is used to store and update transactions when receiving transactions from the miners.

4.2. Threat model
As a member of the distributed network, the terminals may have the following dishonest behaviors:

Unauthorized user. As a user of the terminal, if the user is unauthorized that he does not perform the registration process with the trusted third party in the initialization phase, he may engage in the following aggressive behaviors. For example, (1) he may make connection with other authorized users and therefore steal their private data; (2) he may access the network without initialization phase. As a result, unauthorized users may invade and attack the protected distributed network.

Illegal platform. As a platform of the terminal device, if the platform is illegal that its integrity could not satisfy the network access policy, it may have the following dishonest behaviors. For example, (1) it may transmit fake platform measurements to other trusted devices during mutual verification; (2) it may forge a transaction to deceive other trusted terminals. As a result, illegal platform may be considered as a trusted terminal device so as to access the protected network.

Platform replacement attack. If a certificated terminal device is illegal, the adversary could instruct any other unauthorized device to impersonate the legal device. As a result, it may have the following aggressive behaviors. For example, (1) the adversary could be considered as a trusted terminal and therefore access the network; (2) the trusted terminal devices’ private information could be obtained by the adversary.

4.3. Design goals
Our proposed scheme is supposed to satisfy the following requirements:

1.
User authentication. Our scheme is able to verify the authorization of the users’ identities and discern the unauthorized users.

2.
Platform attestation. Our scheme has ability to detect the integrity of terminal platforms and prevent illegal devices from accessing protected network.

3.
Resist platform replacement attack. Our scheme is capable of resisting the platform replacement attack.

5. The proposed scheme
Overview of scheme BTNC. As shown in Fig. 2, BTNC consists of two phases including initialization phase and trusted network connect phase. With the help of TPM chip, the platform measurements of a terminal can be obtained by invoking TPM_Quote() function [3]. In our scheme, base and update transactions generated by terminals are uniformly considered as extra information which are embedded in the final transaction records and therefore be included in the blockchain.

In the initialization phase, a terminal in IoT will generate a final registration message including its identity, measurement report and ECDSA signature. Then, the trusted third party will verify the validity of its platform measurement and the correctness of relevant signatures. Subsequently, the trusted third party will sign the final registration information if the platform measurements comply with the local network access policy. As a result, a base transaction will be generated by the terminal and eventually be included in the blockchain.


Download : Download high-res image (189KB)
Download : Download full-size image
Fig. 3. Initialization phase.

In the trusted network connect phase, the terminals in IoT will perform mutual user authentication and platform attestation based on blockchain with each other. As a result, each of them is able to verify the security of others. Then, the update transactions will be generated and eventually be included in the blockchain.

5.1. Initialization phase
The domain parameters is public, which includes group order , generator , prime number  and curve . Each terminal must be registered so as to have certified public/private key pair () before initialization phase. In this section, we let terminal  (TD
) represent any of terminals in IoT. The process of the initialization phase is shown in Fig. 3.

(1) First of all, TD
 is supposed to measure its platform resource when launching system with the help of TPM chip. The measurements of platform are presented by a hash value stored in the platform configuration registers (PCR). Then, through the iterative calculation and hash chain technology, the integrity measurements 
 of TD
 are generated [3], where 
. Here,  denotes a variable number of octets of each measurement that to be hashed and  represents a collision-resistant hash function which is used to provide integrity checking and authentication as well as one-way functions. New 
 values are derived from old 
 values in every measurement while .

(2) In order to complete the registration of identity and platform information, TD
 will select a random number  [1,n-1] and establish a secure connection with a trusted third party  using EAP method named EAP-Request to encapsulate its final registration message (
) where 
  (
,TPM_QUOTE_INFO, 
, 
). Here, TPM_QUOTE_INFO (
), including (
), is a measurement report which can be used to determine the integrity of the terminal platform.

In our protocol, 
 is defined to sign the message using the private attestation identity key (AIK) inside the TPM chip. Note that, the private  is used specifically for signing platform measurements due to the security concerns. Next, we make a brief introduction about the final registration message 
 which includes 
, 
, 
, 
, 
 and 
. 
 denotes the device identification number, 
 denotes the initial platform measurement, 
 denotes the platform measurement value of terminal  each time and 
 denotes a counter which is set to 0 in the initialization phase. (
) is derived by 
 and registration information 
, where 
,    (
), 
 mod , 
 (
)  
  
). 
 is derived by TPM_QUOTE_INFO, where 
(TPM_QUOTE_INFO). EAP method is used to provide a cryptographically protected tunnel between TD
 and .

(3) When  receives the EAP-Request message from TD
, it utilizes TD
’s public  to verify the signature. Then,  will validate whether the 
 value complies with the requirements of the network policy.

(4) If the 
 value satisfies the policy,  will send verification message 
 to TD
, which is encapsulated by EAP method named EAP-Response. Here, 
 and 
, in which 
 is defined to sign the message using the private key of . On the contrary, if the 
 value does not meet the requirements of the policy,  will interrupt the connection immediately.

(5) When receiving the EAP-Response message from , TD
 will generate a base transaction message (
) and broadcast it to the network. When a valid block, including the base transaction of TD
, is generated and uploaded in the blockchain, the initialization phase is over.

Next, we introduce the structure of the base transaction which is used to register the platform measurement.

Base transaction. This transaction consists of transaction , device ,  measurement, counter value, ECDSA signature ,  and ’s signature. More specifically, the transaction  is the hashed value of initial public key of the sender and the device  is a unique identification of the terminal device which is verified. ECDSA signature  is used for key agreement process. The counter value is used to solve the synchronization problem while the  measurement and  are used to attest platform. Then,  signs digitally over the aforementioned data using private key. Moreover, miners are able to verify the correctness of base transactions by following conditions: (1) the integrity of the data; (2) the correctness of the signature signed digitally by .

5.2. Trusted network connect phase
In this phase, the platform measurements of terminal devices can be detected and verified without the trusted third party  and the process of trusted network connect phase is shown in Fig. 4. Here, we let terminal  (TD
) and terminal  (TD
) represent a requester and a responder, respectively.

(2) When TD
 receives the EAP-Request message, it will generate an EAP-Response message, including (
), to indicate the continuation of the session and therefore send EAP-Response message to TD
. 
 denotes a random number that TD
 chooses.

(3-a) Then, TD
 will derive a transaction-specific private key 
 from its own signature pair (
) and transaction  (
), where 
. Here, 
 denotes TD
’s latest transaction included in the blockchain.

(3-b) When receiving the EAP-Response message, TD
 will also derive a transaction-specific private key 
 as TD
 in “(3-a)”.

(4-a) TD
 will query the blockchain, extract TD
’s ECDSA signature pair (
) from its transaction and attempt to derive TD
’s transaction-specific public key, where 
.  represents a point on the elliptic curve.

(4-b) TD
 will also derive TD
’s transaction-specific public key 
  (
) by extracting TD
’s ECDSA signature pair (
) from its transaction as well. Here  is defined to derive transaction-specific private keys and transaction-specific public keys in a trusted network connect phase.

(5-a) Following the Elliptic Curve Diffie–Hellman (ECDH) approach [21], TD
 is able to calculate the shared secret (
), where 
. Then, the 
 coordinate will be used to derive the shared secret key 
 refer to  function, where 
. Here,  is defined as a kind of key derivation function which is used to create secure session key [33]. In order to achieve platform attestation, we utilize one byproduct Unique-Value-1 () of the secret key and both random numbers 
, 
 as the ExternalData  parameter to the subsequent TPM_Quote operation which is used to invoke  values and produce 
. Then, TD
 will compute the , where 
. Moreover, we utilize another byproduct Unique-Value-2 () to encrypt following messages transmitting between TD
 and TD
, where 
.

This cryptographically binds the  values quoted to the session key 
 during the verification, which effectively combines user authentication with platform attestation.

(5-b) TD
 will calculate 
, Unique-Value-1 and Unique-Value-2 in a same way as TD
 in “(5-a)”.

(6) TD
 sends an EAP-TNC Request message to TD
 including 
, which indicates a willingness to verify TD
’s platform measurements.

(7) When TD
 receives the EAP-TNC Request message and is asked to produce an integrity report, UV-1 is passed to the TPM_Quote operation along with the desired 
 set so that the resulting 
 signed TPM_INTEG_INFO (
) contains a binding of the system state to the session state. Note that 
  (
, ). As a result, TD
 sends EAP-TNC Response message to TD
 which includes 
,TPM_INTEG_IN-FO, 
. Here, we let 
  1 when the 
 is measured once.

(8) Then, TD
 will compute  iteratively, where 
EAP-TNC Response. Here, we utilize  to be the secret session key of the subsequent sessions.

(9) When receiving the EAP-TNC Response message, TD
 will decrypt the message with the help of . If it recovers the plaintext, TD
 is responsible to do the following steps. First, TD
 will verify the authenticity of the signature signed by TD
 using 
. Then, it verifies the consistency of , which means whether the value of  is as same as the value it computes. Next, TD
 will verify the value of 
 by obtaining the  value 
 of the TD
’s latest transaction from the blockchain, where 
 and 
. Then, TD
 will compute  as TD
 in “(8)”. Here, 
 is defined to verify the  values based on the blockchain.

(11) TD
 sends an EAP-TNC Response message to TD
, including TPM_INTEG_INFO, 
, 
, and 
, where EAP-TNC Response  (TPM_INTEG_INFO, 
, 
, 
)
.

(12) When receiving EAP-TNC Response message, TD
 will decrypt the message by secret key  and verify following data. First, TD
 will verify the signature signed by using 
. Then TD
 will verify the consistency of  and the correctness of 
 as TD
 does in “(9)”.

(13-a) If validation passes above, TD
 will sign the EAP-TNC Response message sent from TD
 and generate a new update transaction 
 of TD
, where 
, TPM_QUOTE_INFO). Then, TD
 broadcast it to the network. After the miners generate a valid block including the update transaction of TD
, the trusted network connect phase is over.

(13-b) TD
 will conduct the same process as TD
 in “(13-a)”.

Next, we will introduce the structure of the update transactions which are leveraged to update the platform measurements and the process of the generation of the transactions will be depicted in Fig. 5.

Update transaction. This transaction consists of transaction , device ,  measurement, counter value,  value, ECDSA ,  signature and other terminal device’s signature. Here,  signature and other terminal device’s signature are used to guarantee the validity of the update transactions. Moreover, miners are able to verify the correctness of update transactions by following conditions: (1) messages’ integrity; (2) signed digitally by private key ; (3) signed digitally by the other terminal’s private key, which means that each terminal could not publish their own update transactions to the miners; (4) counter value is not repetitive compared with the previous transactions, which means that a terminal could not simultaneously perform trusted network connect phase with any other two terminals so as to solve the problem of synchronization.

Here we adopt blockchain to store the platform measurement information of each terminal in the distributed network, which greatly eliminates the risk of being managed centrally with the help of the trusted third party. Every terminal in the distributed system can directly establish connection with other terminals and request their  values in order to verify the integrity of their platforms based on blockchain without trusted third party. Through the technology of the blockchain, terminals’ base and update transactions can be stored integrally so that our scheme can achieve the property of decentralization.

6. Analysis of scheme BTNC
In this section, we use PCL to prove the correctness of the proposed protocol, including authentication and secrecy properties, and the detailed information on the PCL proof system can be found in [7], [8]. In general, we will conduct the PCL proof method to analyze the proposed scheme BTNC, which includes the initialization phase (Ini) and the trusted network connect phase (Tnc). Particularly, we will describe the DHOB axioms based on the PCL grammar firstly. Then we will give the precondition of the sub-protocol BTNC.Ini and sub-protocol BTNC.Tnc, as well as their security properties, invariants and security proof. Next, we will use the proved theorems and the sequential composition theorem to further analyze the security of the proposed goals. Here, precondition, security properties, invariants and sequential composition are the related syntax and semantics of PCL proof system. PCL defines sequential and parallel composition of protocols as syntactic operations on cord and present associated methods for proving protocol properties compositionally.

6.1. DHOB axioms
Since the key agreement process of the Diffie–Hellman over bitcoin (DHOB) protocol is used in the trusted network connect phase, we are able to extend protocol composition logic content and describe the DHOB axioms based on the PCL grammar.

DHOB1: 

DHOB2: 

DHOB3: 

DHOB4: 

DHOB5: 

Particularly, DHOB1 states that if terminal  can compute the session key, it also owns the session key; DHOB2 states that if terminal  has a session key, it also has a specific transaction key pair for that session key; DHOB3 indicates that terminal , which has a specific transaction key pair, can obtain the secret material used to calculate the specific transaction key pair from an entity; DHOB4 states that there is an entity  who can send the relevant material information to terminal  before terminal  receives the secret material used to calculate a specific transaction key pair; DHOB5 indicates that terminal  can calculate the relevant specific transaction key pair with its own private key, transaction number and ECDSA signature information.

6.2. BTNC.Ini sub-protocol
Since each terminal in the distributed environment is embedded with TPM trusted platform modules with different identities in order to measure and report platform status before the initialization phase. Each terminal has its own attestation identity key , trusted counter and configuration register. Before each terminal sends registration information to a trusted third party, it will conduct a process of platform measurement and storage of its own, so the corresponding  value,  value and counter value will be generated. Here, we let terminal  (TD
), TPM chip , trusted third party  and blockchain  be the roles to execute the BTNC.Ini sub-protocol.

PRECONDITION: BTNC.Ini starts from a state in which the precondition 
 holds, where

.

Here, the precondition of the BTNC.Ini is that any TPM chip of a terminal could generate a measurement report 
 which includes PCR value , measurement value  and counter value . As a result, the terminal could have final registration message 
 which consists of ECDSA signature  and the measurement report 
. At the same time, each terminal has their own private key while the trusted third party has its own private key 
.

AUTHENTICATION: BTNC.Ini is said to provide authentication if 
 holds, where


,

,

,

,

,

,

,

.

Here, the authentication property of the BTNC.Ini is that any measurement report 
 received by the TD
 is sent by the TPM chip  and any final registration message received by the trusted third party  is sent by the TD
. Moreover, any message including 
 received by the TD
 is sent by the trusted third party  and any base transaction received by the blockchain is sent by the TD
. At the same time, both TD
 and  could confirm the existence of their own secret keys 
 and 
, respectively.

Theorem 1

If 
 is true, BTNC.Ini will guarantee the authentication property, where

BTNC.Ini
.

INVARIANTS: In the case of BTNC.Ini, the expected behaviors of three honest principals are captured by 
, where

≔
 
.

≔
 
 
.

≔
 ( 
.

.

Invariants 
, 
 and 
 are generallyproved by induction over programs using the Honesty Rule. The proof of the theory 1 is described formally using the programming language, which appears in Appendix A.

Here, with the combination of Theorem 1, DHOB axioms and proof process in Appendix A, we further analyze the user authentication of the BTNC. We denote an adversary  who is an unauthorized user aiming to pass user authentication. When the adversary  could access network, there are two possible cases.

Case 1: Adversary  could utilize an unregistered terminal TD
 to access the protected network.

Case 2: Adversary  could utilize a registered terminal TD
 to access the protected network.

Case 1. Formulas (1)–(4) in Appendix A assert that before  send 
, it must have received a final registration message from TD
, where ActionsInOrder (
, 
. Due to the Honesty rule, the trusted  could not conduct its action sequences and so as not to send message 
 signed by private key 
 if TD
 does not send 
 to . At the same time, due to the unforgeable of the signature 
, adversary  could not forge ’s signature.

Formulas (12)–(13) in Appendix A assert that beforeblockchain  generates the base transaction 
 of TD
, it must have received the message 
, including 
 and 
, from TD
 where ActionsInOrder 
.

According to the formula (14), before TD
 generates and sends the base transaction to the blockchain , it must have received the message 
 from , where ActionsInOrder 
. Because TD
 is an unregistered terminal, adversary  could not receive the message 
 including 
 from honest .

Due to the Honesty rule, the blockchain  could not generate a block including TD
’s base transaction 
. As a result, adversary  could not pass the user authentication.

Note that, ActionsInOrder is a kind of rule for temporal ordering, where ActionsInOrder(a
a
)  After(a
,a
) After(a
,a
).

Case 2. According to the DHOB5 axiom, the specific transaction private key 
 is derived by the private key 
. Therefore, although adversary  could utilize a registered terminal TD
 whose base transaction has been included in the blockchain, it is impossible for  to forge the private key of the TD
, which leads to the difficulty in calculating elliptic discrete logarithms. As a result, adversary  could not derive the secret session key in terms of DHOB2 axiom and therefore could not pass the user authentication.

6.3. BTNC.Tnc sub-protocol
Here, we let terminal  (TD
), terminal  (TD
) and blockchain  be the roles to execute the BTNC.Tnc sub-protocol.

PREDICTION: BTNC.Tnc starts from a state in which the precondition 
 holds, where

.

Here, the precondition of BTNC.Tnc is that the TD
 and the TD
 have their own measurement reports 
, private keys and attestation identity keys 
 because of being embedded the TPM chips. Moreover, the latest transactions of the TD
 and the TD
 have been included in the blockchain . As a result, the blockchain  has their last integrity report including 
 and 
.

SECRECY: BTNC.Tnc is said to provide secrecy if 
 holds, where

.

Here, the secrecy property of BTNC.Tnc is that both TD
 and TD
 should confirm the existence of the secret key including 
, , and the fresh secret keys should not be known to any other principal other than two participants. Moreover, both TD
 and TD
 should confirm the existence of their private .

Theorem 2

If 
 is true, BTNC.Tnc will guarantee the secrecy property, where

BTNC.Tnc
.

INVARIANTS: In the case of BTNC.Tnc, the expected behaviors of two honest principals are captured by 
, where

≔
 ( 
.

≔
 ( 
.


The proof of the theory 2 is described formally using the programming language, which appears in Appendix B. Here, with the combination of Theorem 2 and proof process in Appendix B, we further analyze the platform attestation of the BTNC. We denote a compromised terminal D(TD
) which is authorized but has illegal platform and attempts to access the distributed network. Under this circumstance, there are two possible cases.

Case 1: Adversary TD
 could forge Unique-Value-1(or Unique-Value-2) and therefore conduct the man-in-the-middle attack between trusted terminal A and terminal B in practice.

Case 2: Adversary TD
 could generate and transmit a fake measurement report 
 signed by private key 
 to other trusted terminals.

Case 1. Formulas (16)–(17) in Appendix B assert that only TD
 and TD
 could confirm the existence of the secret key 
, ; The fresh secret keys , 
 could not be known to any other principal other than TD
 and TD
. At the same time,  and  are pseudorandom numbers, the probability that adversary TD
 could forge (or ) is the probability of breaking the computational Diffie–Hellman (CDH) assumption. In other words, assuming the probability that case 1 happens is negligible. As a result, adversary TD
 is unable to forge  and  in practice.

Case 2. Formula (22)–(24) in Appendix B assert that the adversary TD
 needs to send integrity report 
 signed by the private key 
 in order to pass platform attestation. Due to the Honesty rule of TPM chip  in Appendix A, only honest  could possess the private key 
 and generate the signature 
 of the integrity report 
. At the same time, non-TPM data could not be signed by , which prevents TD
 from fabricating illegal  values to be signed. As a result, the adversary TD
 could not generate and transmit a fake measurement report 
 signed by private key 
 to other trusted terminals and therefore pass platform attestation.

6.4. The compositional proof of BTNC
As illustrated above, the BTNC protocol is constructed by a sequential composition of BTNC.Ini and BTNC.Tnc. Here, we prove the authentication and secrecy properties of BTNC with the help of sequential composition proof method.

Theorem 3

According to the process of trusted network connection, the security properties of protocol BTNC can be guaranteed by combining BTNC.Ini and BTNC.Tnc, where




Proof

(1) According to the proof of these two sub-protocols, BTNC.Ini and BTNC.Tnc can satisfy the security properties.



(2) Under the weaker prediction, the security properties of protocol BTNC can still be guaranteed.


(3) Since the postcondition of 
 satisfies the precondition of 
, where 

(4) Invariant 
 satisfies both BTNC.Ini and BTNC.Tnc.




(5) The steps above indicate that the security of BTNC.Ini and BTNC.Tnc can still be guaranteed after sequential combination, where


Therefore, the protocol is secure under the sequential composition. From the proof of Theorem 3, we conclude that the protocol is proved to be secure. Here, we further analyze the security attribute of resisting platform replacement attack. We consider an attack (platform replacement attack) that terminal  (TD
) is an authorized device with illegal platform and terminal  (TD
) is an unauthorized device with trusted platform. Then, TD
 instruct invalid TD
 to impersonate a trusted terminal, which forms a kind of collusion relationship. Then TD
 starts performing mutual authentication with a trusted terminal  (TD
) and thereby leaking their session key,  and  to TD
. As a result, the validity of mutual verification could not be guaranteed and terminal TD
 will be considered as an authorized user with trusted platform.

Since the postcondition of 
 satisfies the precondition of 
, where 
 and 
, the security of BTNC.Ini and BTNC.Tnc can still be guaranteed after sequential combination. As a result, TD
 and TD
 could not obtain the private key 
 and due to the unforgeable of the signature 
 and the randomness of the value , TD
 could not impersonate a trusted terminal and therefore transmit legal platform measurement. At the same time, TD
 could not attain the private key 
 of the TD
 and therefore derive secret keys including 
,  and . In the end, the platform replacement attack has no influence on the security of the scheme BTNC.

7. Performance evaluation
7.1. Comparison
We compare our scheme with D–H PN [41] and Twin D–H [44]. Table 1 shows the comparison results, where “” means satisfied and “” means dissatisfied.

From Table 1, it is obvious that D–H PN protocol and Twin D–H protocol cannot provide distributed network access framework and D–H PN protocol is unable to resist platform replacement attack. Our scheme BTNC, which satisfies all the required properties, can be applied to provide user authentication, platform attestation and resist platform replacement attack in the distributed environment.


Table 1. Comparison with related works.

Schemes	D–H PN [41]	Twin D–H [44]	BTNC
Decentralization	×	×	
User authentication			
Platform attestation			
Resist platform replacement attack	×		
7.2. Evaluation
In this section, we mainly focus on the evaluation of computation overheads of our proposed scheme. The performance evaluation consists of two parts including the initialization phase and the trusted network connect phase. The experiments are implemented on a PC(CPU:Intel(R)Core(TM) i5-5300U CPU @ 2.30 GHz 2.30 GHz, RAM:8G, OS:Windows 7) using Java SE 9 and Ubuntu 18.04.

Initialization phase. In the initialization phase of our scheme, a trusted terminal who wants to access network must make connection with the trusted third party to register itself in the blockchain. In this process, the trusted terminal should generate the key pair, the final registration message and encrypt the messages. In Fig. 6, we adopt different encryption algorithms to evaluate the performance overhead of one terminal during the registration process. Because the current TPM uses 1024-bit RSA, 2048-bit RSA or 256-bit ECC to achieve encryption and signature, here we simulate encryption overhead under three different encryption algorithms. In our parameter settings, the key length is respectively 128 bytes in RSA-1024, 256 bytes in RSA-2048 and 256 bits in ECC-256. The exponent value  of public key in RSA is 0x10001. Moreover, For reference, , , , ,  and  are defined below:

•
  secp256k1 elliptic curve

•
  (0x79BE 667EF9 DCBBAC 55A062 95CE87 0B07029BFCDB 2DCE28 D959F2 815B16 F81798, 0x483a da7726 a3c465 5da4fb fc0e11 08a8fd 17b448 a68554 199c47 d08ffb 10d4b8)

•
  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000

•
  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000007

•
  FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F

•
  FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE BAAEDCE6AF48A03B BFD25E8C D0364141

In our experiment, OpenSSL 1.0.1i is ported to perform the cryptographic operations such as encryption and signature based on the elliptic curve, secp256k1. From the result, we find that the elapsed time of the registration process using RSA-1024 and ECC-256 encryption algorithms are obviously less than that using RSA-2048 encryption algorithm, but the difference between RSA-1024 and ECC-256 encryption algorithms is inconspicuous. In order to select a more efficient encryption algorithm based on IoT system, we decide to increase terminals to simulate the registration process of multi-devices under the IoT scenario.

From Fig. 7, with the increase of terminal devices in IoT, ECC-256 algorithm is more efficient, which takes less time compared with RSA-1048 algorithm. As a result, ECC-256 is selected as the encryption algorithm for the initialization phase under IoT environment.

As for ECDSA, the secp256k1 curve is used and all domain parameters over the finite field including group order , generator  and modulus  can be found above. The elapsed time is measured by utilizing the  function of Java. Fig. 8 shows the performance overhead caused by the key pair generation and the final registration message generation. The average elapsed time of key pair generation is 6.26 ms while the final registration message generation is 11.37 ms.


Download : Download high-res image (172KB)
Download : Download full-size image
Fig. 7. Computation overhead of multi-devices in different encryption algorithms.


Download : Download high-res image (167KB)
Download : Download full-size image
Fig. 8. Performance overhead caused by the initialization phase.

Trusted network connect phase. In the trusted network connect phase, preliminary steps of BTNC involve obtaining the transactions from the blockchain 0.04 ms and retrieving the ECDSA signatures  stored in the transaction 0.08 ms. Overall, these steps on average require 0.12 ms, which can be negligible for the entire verification process. Then we evaluate the performance overhead of the functions in the trusted network connect phase including , , 
 and 
, which are based on SHA256 hash function, secp256k1 curve and ECC-256 encryption algorithm.

Here, function 
, function 
, function 
 and function 
.

Particularly, we take terminal  as an example to introduce the parameters of each function. As for  function, the input parameters are private key 
, transaction ID number 
, terminal ’s ECDSA signature 
, Then  function outputs transaction-specific private key 
 and transaction-specific public key 
. As for  function, it inputs the abscissa 
 of a point on an elliptic curve, which is generated by ECDH process. And then it outputs the session key 
 which is used to encrypt messages. The input parameters of 
 are terminal ’s last  value 
, terminal ’s current  value 
 and its platform measurement value 
 while the output is a boolean variable which is used to verify the integrity of the terminal ’s platform. As for 
 function, the input parameters are private attestation identity key 
 and measurement report 
, then it outputs a signature 
 signed by 
.

Fig. 9 shows the performance overhead caused by the functions above. The generation of session key  is non-interactive as participants are not required to exchange information before deriving the shared secret, which takes a little time to perform  and . The average elapsed time of , , 
 and 
 respectively are 1.26 ms, 3.47 ms, 28.36 ms and 17.64 ms. Here, because TPM_QUOTE_INFO that contains platform measurement can only be signed inside the TPM by , which takes much more time to invoke TPM_Quote() compared with other functions. Aside from the security considerations of TPM by utilizing , our protocol is relatively efficient.

Regarding the relevant operation of blockchain in practical application, we utilize the Ethereum official client software Geth to operate a private network. Particularly, we calculate the computational overhead of the upload and download processes of the base transaction and the update transaction. When we conducted the experiment on January 4th 2019, 1 ether  134.33 USD and the gasPrice was set to 1 Gwei. In the practical application scenario, not only the verification time of the block is critical, but also the minimum gas value cost is reasonable. Here, the size of the base transaction is 238 bytes while the size of the update transaction is 494 bytes. Fig. 10 shows the performance overhead caused by the upload and download processes of the base/update transaction.


Download : Download high-res image (182KB)
Download : Download full-size image
Fig. 9. Performance overhead caused by functions in our scheme.


Download : Download high-res image (213KB)
Download : Download full-size image
Fig. 10. Performance overhead caused by the upload and download processes of the base/update transaction.


Download : Download high-res image (136KB)
Download : Download full-size image
Fig. 11. Comparison between D–H PN and BTNC under authentication delay.


Table A.1. .

AA1, ARP, AA4	
(1)
VER	
(2)
, (2)	
(3)
HON, (3)	
 
(4)
, (4)	
,	
(5)
AA1, APR	
(6)
 
(7)
, (7)	
(8)
, (8)	
(9)
, (9)	
(10)
(5), (10), ARP	
(11)
AA1, ARP	
(12)
HON, (12)	
(13)
, (13)	
(14)
(11), (14)	
(15)
(11), (13), (14), (15)	
(	
,	
,	
,	
,	
,	
,	
,	
).	
From Fig. 10, the average upload and download overhead cost of a base transaction are 0.05337 s and 0.00725 s respectively. The average upload and download overhead cost of a update transaction is 0.05641 s and 0.01324 s respectively. The average gas consumption value of the base transaction and the update transaction are 137132.8 Gwei and 154453.76 Gwei respectively. The results show that the upload and download processes of transactions are efficient and the actual cost is acceptable in practice, which has little influence on the process of BTNC.


Table B.1. .

DHOB1, DHOB2		
(16)
, (16)	
(17)
REC, ARP, DHOB3	
(18)
REC, ARP	
(19)
ORIG, AA1	
(20)
DHOB4, (18), (19), (20)	
(21)
ARP, AA2	
 
 
(22)
DHOB5, (22)	
(23)
, (23)	
(24)
DHOB5, (23), (24)	
(25)
(17), (20), (25)	
For further analysis of the performance, Fig. 11 shows a comparison of verification time between D–H PN and BTNC while the frequency of CPU is 2.30 GHz. In our evaluation, we instantiate the D–H PN protocol and execute the experiment multiple times. The result shows that the average delay of D–H PN is about 59.86 ms while the BTNC is about 94.19 ms. The overhead of BTNC is slightly inferior to that of D–H PN protocol. It is widely accepted that security improvement comes with efficiency loss. Our scheme seems somehow less efficient than D–H PN, but only our scheme achieves a much stronger requirement of decentralization, which is fundamental for the verification of terminals in IoT. All these experiments imply that our scheme is efficient and can be used for real-world user authentication and platform attestation in IoT environment.

8. Conclusion
In this paper, we have proposed BTNC, a novel trusted network connection protocol based on blockchain in IoT. In our scheme, the terminals in the distributed system can complete mutual verification in user authentication and platform attestation without trusted third party. Additionally, we have analyzed the security of our scheme based on PCL proof method and further analyzed three kinds of threat models, including unauthorized user, illegal platform and platform replacement attack. The results of analysis indicate that our scheme could discern unauthorized users, detect illegal platforms and resist platform replacement attack. Moreover, we have evaluated the performance of our scheme, which is efficient and feasible in practice. Different from existing schemes, our scheme enhances security and feasibility of trusted network connection based on the blockchain in the distributed environment.