Abstract
More and more cloud data centers are turning to leverage on-site renewable energy to reduce power cost for sustainable development. But how to effectively coordinate the intermittent renewable energy with workload remains to be a great challenge. This paper investigates the problem of workload scheduling for power cost minimization under the constraints of different Service Level Agreements (SLAs) of delay tolerant workload and delay sensitive workload for green data centers in a smart grid. Different from the existing studies, we take into consideration of the impact of zero price in the smart grid and the cost of on-site renewable energy. To handle the randomness of workload, electricity price and renewable energy availability, we first formulate the problem as a constrained stochastic problem. Then we propose an efficient online control algorithm named ODGWS (Online Delay-Guaranteed Workload Scheduling) which makes online scheduling decisions achieve a bounded guarantee from the worst scheduling delay for delay tolerant workload. Compared with the existing solutions, our ODGWS decomposes the problem into that of solving a simple optimization problem within each time slot in  time without needing any future information. The rigorous theoretical analysis demonstrates that our algorithm achieves a  cost-delay tradeoff, where V is a balance parameter between the cost optimality and service quality. Extensive simulations based on real-world traces are done to evaluate the performance of our algorithm. The results show that ODGWS saves about 5% average power cost compared with the baseline algorithms.

Previous
Next 
Keywords
Cloud data center

Delay tolerant scheduling

Smart grid

Renewable energy

Lyapunov optimization

1. Introduction
With the proliferation of demand for cloud computing service and IT application, the skyrocketing power consumption has become a major bottleneck factor for sustainable development of cloud data centers. According to the recent reports [19], [21], [39], [40], [47], the power capacity of a large scale cloud data center is approximate to 100 MW and the corresponding electricity bill exceeds $30 million dollars per year (e.g., Microsoft and Google). Meanwhile, the carbon emission from data centers has brought negative impact to the global environment. As a result, some companies (like APPLE [29] and McGraw-Hill [10]) have built their own on-site renewable energy plants to power data centers. However, the intermittent and unpredictable availability of renewable energy (solar and wind energy) brings great challenge to incorporate them with the dynamic workload.

Cloud data centers provide various types of computing services, which can be generally divided into two main categories: delay sensitive workload and delay tolerant workload [27], [45], [56]. Delay sensitive workload which needs to be processed immediately [41], such as web search, instant messaging and online game etc. Delay tolerant workload can be postponed to schedule for a period time and finish before deadline. Example of delay tolerant workload includes map-reduce task, animation processing and scientific simulation etc. Therefore, the flexibility of delay tolerant workload provides an opportunity to cooperate with renewable energy, by opportunistically scheduling the delay tolerant request when renewable energy is available or electricity price is low.

Moreover, the Cloud Service Providers (CSPs) need to guarantee Service Level Agreement (SLA) for both types of workload to provide a good Quality of Experience (QoE). In the existing studies, most researchers only consider SLA of single type workload (delay sensitive workload [28], [49], [51], [52] or delay tolerant workload [25], [56]). In [16], [24], the authors proposed some algorithms for optimal scheduling of both type of workload, but they only considered the average queueing delay of tolerant workload, which makes some workload's delay possible very large and can not provide the worst-case delay guarantee. In reality, an impatient customer of such workload may leave the queue. In [9], the authors proposed a scheduling algorithm for heterogeneous delay tolerant task with the use of renewable energy, but they needed the future information of workload and electricity price, that is maybe hard to obtain in reality. Moreover, due to the volatile environment of cloud data center, the workload may be bursty, such that it is difficult to acquire a priori knowledge about the dynamic factors, such as statistics-based or prediction-based information. Therefore, we aim to develop a new schedule scheme that makes online decisions only relied on the current system state, and is able to handle both type of workload and guaranteeing the worst-case delay of tolerant request.

Integrating renewable energy generating device (wind turbines and solar panels) in a data center is the most common way to use on-site green energy, which has drawn lots of attentions in the past decade [13], [22], [32], [37] [3], [4]. Some previous works [34], [38], [50] proposed algorithms to improve the utilization of on-site renewable energy by cooperating delay tolerant workload. But all of them assumed that the perfect knowledge of workload or supply of renewable energy is known in advance. Existing studies [37], [41], [45] assumed that the price of on-site renewable energy is nil and it is preferable to be used when available. However, in the wholesale market under a smart grid environment, sometimes the electricity price can reach zero or become negative in order to balance the power supply and demand for maintaining the stability of smart grid the so-called zero price (electricity cost) property. Under such a situation, it is obvious that the preference of using renewable energy may not achieve the optimal power cost. Thus, we need to design an efficient scheduling algorithm which takes into consideration the cost of renewable energy and cooperates with the random pattern of renewable energy source availability.

The goal of this paper is to address the problem of online workload scheduling for both delay sensitive workload and delay tolerant workload by developing an efficient online algorithm with guaranteed SLAs of different workloads. Furthermore, we also consider the cost of on-site green energy and time-varying electricity price in wholesale electricity market. Our algorithm exploits the opportunity to reduce power cost under the zero price property in the smart grid environment, i.e., the electricity price goes zero or negative for the stability of power supply and demand in a grid. First, we formulate the long-term power cost minimization problem as a constrained stochastic problem. Then, to provide the worst scheduling delay guarantee, we propose an online algorithm based on Lyapunov optimization theory. We also provide rigorous mathematical analysis to show that our algorithm can achieve a  trade-off between the worst-case delay and power cost. Finally, extensive numerical simulations based on the real world trace are conducted to show that our algorithm achieves better performance than baseline algorithms.

To the best of our knowledge, this is the first efficient online algorithm for scheduling both types of delay sensitive and delay tolerant workloads while satisfying multiple SLAs and guaranteeing the maximum delay for tolerant workload in a smart grid. The key contributions of this paper are summarized as follows:

1) Model: We extend the model in [16], [45] to handle different SLAs of workloads and guarantee the worst-case scheduling delay of delay tolerant workload. Meanwhile, in our fine-grained model, we consider the on-site renewable power cost and the impact of zero price in smart grid, that helps to further reduce power cost of green data centers.

2) Algorithm: We design a low-complexity online control algorithm, called ODGWS, while providing rigorous theoretical analysis to illustrate its performance. We convert the long-term optimization problem into a simple linear programming problem at each slot and propose an efficient algorithm to solve it with  time complexity.

3) Experiment: We conduct plenty of data-traced simulations to evaluate the effectiveness and practicability of our algorithm. We analyze the impact of control parameter V on power cost and scheduling delay. The results show that our algorithm can save about 5% power cost compared with the existing algorithms. Moreover, our algorithm can achieve an explicit  cost-delay tradeoff by tuning the control knob.

The rest of our paper is organized as following. We present a summary of the related research in Section 2. We describe the system model and formulate the optimization problem in Section 3. An online control algorithm is designed and its performance analysis is given in Section 4. Section 5 presents simulation results and evaluation of our algorithm in practice. The summary of our work and future research directions are presented in Section 6. Partial results have been reported in a brief version [27].

Compared with our previous work [27], we improve the system model to be more reasonable and provide more details of the derivation process. We extend the original model which needs i.i.d. assumptions to non-i.i.d. models and propose a T-steps lookahead offline algorithm as benchmark in Section 5. Moreover, we conduct more extensive simulations to evaluate our proposed algorithm. For example, we provide the analysis of impact of control parameter Ïµ, the observed worst-case delay in reality, the comparison against the T-steps lookahead offline algorithm, and the impact of the scale of green power.

2. Related work
Extensive studies on workload scheduling have been done in recent years for data centers deploying renewable energy, particularly for large-scale data centers operating in cloud environments, as detailed in the surveys [30], [32], [48], [54].

2.1. Renewable energy deployment
It is a significant challenge that utilizing effectively intermittent renewable energy and balance the trade-off between carbon footprint and power cost [13], [23], [27], [47], [57]. Zhang et al. considered different off-site renewable energy sources and designed the GreenWare framework to maximize the green energy utilization in [60], but it needs statistical knowledge of system and does not consider the long term carbon budget. In [51], Ren et al. proposed a distributed online algorithm named COCA to minimize power cost with achieving carbon neutrality for a single data center, but they only considered the delay sensitive workload. In [34], the authors designed a Green Hadoop framework which postpones the batch job to execute to cope with the intermittent solar energy. But they needed perfect prediction of the bursty workload arrivals and the supply of renewable energy. In [12], Deng et al. proposed a two-time scale online control algorithm called MultiGreen which leveraged real-time and long-term electricity market to minimize the cost of a data center, but they did not consider the SLA of delay tolerant workload and the cost of green energy. Pierson et al. proposed DATAZERO framework to achieve the best trade-off between IT and electrical sides by a negotiation process in [47]. Hasan et al. introduced the concept of virtualization of renewable energy and proposed a scheduling strategy based on green SLA in [26]. Deng et al. [14] proposed an online algorithm named EcoPower for geo-distributed data centers deploying both on-site and off-site power supply. Our work differs from [14] their work in both problem specification and solution. We consider both delay sensitive and delay tolerant workloads and propose a solution that guarantees the maximum scheduling delay for delay tolerant workload while satisfying multiple SLAs for both types whereas they considered only delay sensitive workload (all must be completed in their time slots) and their solution does not satisfy the same SLAs as ours.

2.2. Delay tolerant task scheduling
There are a number of studies on optimal scheduling for delay tolerant tasks. Several workload scheduling algorithms were proposed to coordinate with green energy by postponing task execution [11], [34], [35], but they all require prediction of future renewable energy and workload, which is difficult to obtain in reality. In [33], Koutsopoulos et al. proposed some algorithms for both online version and off-line version of task scheduling problem with delay constraint and proved that the finite-horizon problem is NP-hard. In [45], the authors explored the delay tolerant scheduling problem for data centers with renewable energy, and proposed an online control algorithm based on Lyapunov optimization theory with a guarantee on the worst-case delay. But they did not take into consideration delay sensitive workload and the cost of on-site renewable energy, such that the renewable energy is always preferable to be used when available. In [46], the authors designed a workload scheduling scheme based on dynamic programming technique to minimize the time average cost subject to delay constraint, but they needed to know the probability knowledge of power demand. Moreover, the computation of dynamic programming may suffer a curse of dimensionality when the state space becomes large. In [59], the authors proposed a profit maximization algorithm (PMA) for hybrid cloud with guaranteed service delay of delay tolerant tasks. But they do not take into consideration of using renewable energy. Similar to our work, in [16], the authors have proposed an online workload algorithm for a data center with taking into consideration both type of workload and on-site wind power cost. However, they did not provide the guarantee of worst-case delay, that will impose more challenge because it needs to cooperate with the intermittent renewable energy.

Different with the aforementioned works, we first address the workload online scheduling problem for data centers while satisfying multiple SLA requirements of both types of workload with a guarantee on the worst-case delay of tolerant workload. The challenge of our problem lies in two aspects: (1) First, CSP needs to purchase enough power to guarantee the task execution before their deadline, but it is difficult to design an online algorithm to minimize power cost without future information due to the dynamic fluctuation of electricity price; (2) Second, it is challenging to make energy usage decisions among different energy sources because that green energy is intermittent and hard to predict precisely.

3. Problem formulation
Key notations of our model are listed in Table 1.


Table 1. List of key notations.

Notation	Description
Delay tolerant workload arrival at time t
Delay sensitive workload arrival at t
Scheduling time of 
Scheduling time of 
The upper bound of 
The upper bound of 
Dmax	The maximum delay scheduling of tolerant workload
Psolar	Power output of a PV panel
Pwind	Power output of a wind turbine
Total power consumption of the data center at t
Power usage of wind energy at t
Power usage of solar energy at t
Power usage of power grid at t
The maximum power drawn from power grid
Power supply of solar energy at t
Power supply of wind energy at t
Total power cost of the data center in t
Price of power grid at t
Cs	Amortized price of solar energy
Cw	Amortized price of wind energy
Backlog of tolerant workload queue Q at t
Backlog of virtual queue U at t
Ïµ	Knob to control scheduling delays in queue U
Quadratic Lyapunov function
one-slot conditional Lyapunov drift
one-slot drift-plus-penalty expression
3.1. Workload model
We suppose that task arrival is an arbitrary process over time and consists of both delay sensitive stream and delay tolerant stream. In time slot t, the delay sensitive workload is denoted as 
, and the delay tolerant workload is denoted as 
, that can be acquired at the beginning of slot t. In our problem formulation, we assume that all servers in the data center are homogeneous in power consumption and task processing. Moreover, we assume that both tolerant task and sensitive task can be processed in each slot and the power need to process a task is fixed. Thus, the total power consumption needed to process the workload in slot t is linear with the workload 
, 
, where 
 and 
 are the power demands respectively for delay tolerant and sensitive workloads generated in slot t as used in [14], [58]. Also, there is an upper bound of the total power demand at t, denoted as 
, which is reasonable in the reality. So we have the following constraint for all slot t: 
 and 
. We assume that there exists an upper bound of the total workload in any slot t, such that we have 
.

For a delay sensitive task, we should schedule it immediately when it arrives at system. And for a delay tolerant task, we can opportunistically schedule it to cooperate with the fluctuating electricity price and the intermittent renewables. So we can buffer the delay tolerant workload and postpone to execute until that electricity price is low or green energy is available. A queue Q is maintained to buffer the delay tolerant task and serve them in FCFS (First Come First Served) manner. For simplicity in expression, we assume that all delay tolerant tasks have the same maximum delay, but our model can easily extend to handle different types of scheduling delay by maintaining multiple queues. With initializing  and denoting the total power consumption in slot t as , thus, the length of queue Q dynamically evolves as follows:(1)
 where  is length of queue Q. Here  represents the unscheduled delay tolerant workload in slot t.

Our goal is to find the optimal power usage  in each slot to minimize the power cost while satisfying both SLAs of the delay sensitive workload and delay tolerant workload. Denoting 
 
 
 
 
 as the time-average value of , so we have constraint 
 
 for the stability of queue Q. Let 
 denote the maximum scheduling delay of each delay tolerant task, which means each delay tolerant task arrived at t should be scheduled before 
 ends, e.g., the scheduling time of 
 is in the range 
, and finish before 
. Letting 
 denote the scheduling time of 
 and 
 denote the scheduling time of 
, we define the following requirement of SLAs of cloud service:

(1) SLA of delay sensitive workload 
: delay sensitive tasks 
 should be scheduled in slot t, e.g. 
.

(2) SLA of delay tolerant workload 
: delay tolerant tasks 
 should be scheduled before time slot 
 ends, e.g. 
.

For example, if a delay sensitive task 
 and a delay tolerant task 
 arrive in the same slot , the scheduling time of 
 is 
, which means the task should be processed when it arrives. If the maximum delay of 
 is set to be 
, the scheduling time of 
 is 
, which mean 
 can be postponed to process before the  slot.

3.2. Power supply model
Data centers are integrated with renewable energy equipment (wind turbines and solar panels) to supply green power. The renewable energy seriously depends on the regional climate condition, such like wind speed and solar irradiance. To simulate the power generating process of wind energy and solar energy, we adopt the models in [31] and [20], which are described as follows:

(1) Solar power model. Solar farm has installed a large amount of photovoltaic (PV) panels to convert sunlight directly into electric power. The power generation of solar in a region is mainly affected by irradiance, which depends on climate and varies through the whole day [1]. Similar to [14], the power output of a PV panel in slot t 
 is defined as follows.(2)
 where Î± is the conversion efficiency of solar-to-electricity, A is the active irradiation area of a PV panel, and  is the solar irradiation in slot t.

(2) Wind power model. Wind plants employ wind turbines to generate wind energy. We adopt the wind energy model in [20], [60] to calculate wind energy supply. By denoting the power generation of a wind turbine as 
 under actual wind speed  in slot t, we have(3)
 
  where 
 is the output power of wind turbine. 
 is the rated wind speed at which the turbine is able to generate its maximum electricity, which is typically in the range of 25 to 35 mph [2]. 
 represents cut-in wind speed which is the minimum wind speed for the blade of wind turbines starting to turn and produce electricity power, and it is usually 7 to 9 mph [2]. 
 is cut-out wind speed at which the wind turbine will stop working to avoid the damage to the turbine, it is generally around 55 mph [2].

The total power consumption  in slot t contains wind power, solar power and grid power, which are denoted as 
, 
, 
 respectively, so we have(4)

Since the delay sensitive workload 
 should be processed in slot t, so we have:(5)

We denote the maximum power of the cloud data center drawn from power grid as 
, that is determined by the grid supply facility. Thus, we have constraint 
. Moreover, we assume that the maximum power consumption is sufficient to handle the peak load for each slot t, such that it is always to keep the stability of the queue . So, we have(6)

Since the power supply of wind energy and solar energy is limited by meteorological factors, we denote the maximum supply of wind energy and solar energy in time slot t as 
 and 
 respectively, which are directly proportional to 
 and 
. Thus, we have(7)
(8)

Here we assume that the upper bound of  is 
, so we have 
, where according to real situations, 
 is assumed to be a constant equal to 
. We will give the explanation in the following section.

3.3. Power cost optimization problem
Our aim is to design an online workload scheduling algorithm to minimize the time-average power cost for green data centers, which makes the energy usage decisions (
) at each slot t. We assume that electricity price of grid power 
 fluctuates dynamically in time horizon and keeps stable in a slot. The upper bound of 
 is denoted as 
, such that we have 
. We use amortized price to model the price of wind energy and solar energy, which are denoted as 
 and 
 respectively. Note that 
 and 
 are related to the initial cost of building renewable power plant, daily maintenance cost and power capacity. Thus, the total power cost of the data center in slot t is expressed as

Therefore, the long-term power cost minimization problem of green data centers can be formulated as a constrained stochastic problem as follows:(9) 
 
 
 
 
 
(10)
(11)
(12)
(13)
 
(14)
(15)

Constraints (10) ~ (12) define the upper bounds and the lower bounds of the decision variables respectively. Constraint (13) is used to maintain the stability of system. Constraints (14) ~ (15) are used to satisfy the SLAs requirement of delay sensitive workload 
 and delay tolerant workload 
. Note that if we remove constraint (15) and neglect the cost of solar energy, we will get a problem as in [16]. But constraint (15) imposes more challenge to problem P1 due to the following reason: CSP needs to purchase enough energy for delay tolerant workload execution before their deadline, but electricity price is time-varying and unpredictable, which brings difficulty to make online decision to minimize the average power cost. Note that the tolerant workload scheduling that guarantees a maximum delay is NP-Hard even without using green energy, and intermittent renewable energy will bring more challenge. If we do not consider the renewable energy cost and neglect the delay sensitive workload, the problem P1 will be similar to the problem in [45]. But P1 can not be solved by the original algorithm or simply extending it. This is because that there is an added dimension of renewable energy cost in the objective function, which has random pattern and unpredictable. So we need to design a new algorithm which makes online decision based on the current system state.

4. Online solution design
If we know the all future slot information of system state such as workload arrivals, electricity price and supply of renewable energy, problem P1 can be solved by dynamic programming technique as in [33]. But these environment factors are highly dynamic varying and difficult to predict precisely in reality. Moreover, with the system state enlarging, the solution of dynamic programming is likely to suffer âcurse of dimensionalityâ. Thus, we design an online algorithm to solve it, which can work without any future system information.

First, we leverage the âÎµ-persistentâ service queue technique [45] to guarantee the worst-case delay of the delay tolerant workload. Defining a virtual queue  with initializing  and  updates as follows:(16)
 where  is the length of queue U in slot t, and function 
 used to ensure the queue length be non-negative. 
 is a parameter use to control workload scheduling delay. The indicator function 
 is defined as follows:(17)
  The introduction of virtual queue  can be explained intuitively as follows: If the backlog of  is non-empty in time slot t, then queue  will increase with the length of Ïµ, such that the length of  will always increase if there is workload in  (e.g. ). On the contrary, while the service rate of  is the same as the service rate of , if there is no workload in queue  (e.g. ), the backlog of  will also decrease. Therefore, by appropriately deciding variable  to keep the virtual queue  stable, the tasks are expediently dispatched from the queue  in a limited delay. In the following section, by controlling the upper bound of queues  and , we can ensure that all tolerant tasks are scheduled before the worst-case delay of 
 (we will explain how to obtain 
 later).

Following the Lyapunov optimization framework, we define a combined queue vector  and the quadratic Lyapunov function [44] as:(18)
 

Then, we obtain the one-period conditional Lyapunov drift [44] as follows:(19)

Note that  represents the congestion of all queues  and . According to the Lyapunov optimization theory [44], one slot drift-plus-penalty expression is given as:(20)
 where control parameter V is a positive constant, which is used to balance the trade-off between power cost and scheduling delay. Actually, V acts as a weighting factor of the cost optimality in the drift-plus-penalty expression. Increasing the value of V implies algorithm pay more attention to the power cost, that also means resulting in a larger worst delay of the tolerant workload. According to the following Lemma, we derive an upper bound of 
.

Lemma 1

For any control strategy 
 at each time slot t, the one slot Lyapunov drift-plus-penalty 
 is bounded by the following inequality:(21)
 where B is a constant defined as 
 
.

Proof

See Appendix A.1. â¡

According to the drift-plus-penalty technique in Lyapunov optimization theory [44], we seek to greedily minimize the upper bound of 
 at each time slot t, then we can obtain a close-to-optimal solution of problem P1. Therefore, we transform problem P1 to a minimization problem of the RHS (right hand side) of (21). Note that we can observe the value of 
, 
,  and  at the beginning of each slot t, so we only need to solve the following problem, named P2 at each slot t. 
 
Although P2 is a linear programming problem, which can be solved directly by the matured algorithms such as Simplex Method [17], or interior point method [43]. But here by carefully analyzing the inner structure of P2, we provide a novel efficient algorithm only with  time complexity, which also help to analyze its performance bound.

First, by replacing the decision variable 
 with 
, we convert P2 to the following problem P3:(22) 
 
(23)
(24)
(25)
(26)
 where 
, 
, 
 and 
, which all are constants.

In reality, the maximum power consumption of a data center is determined in the planning stage, which is usually fixed in the first phase of data center design. In Eq. (26), the value 
 is varying with the intermittent renewable energy supply 
 and 
 across time slots, thus, we assume 
 for realistic consideration. Note that the assumption is reasonable since the value 
 is generally much larger than the value of 
 and 
. So, we use 
 as the upper bound of  such that formula (25) can be rewritten as 
, and formula (26) can be rewritten as 
. Moreover, we find that the upper bound and lower bound of all decision variables in P3 are defined constants and the objective function is linear. Therefore we can design an efficient algorithm based on threshold rules to solve it only by judging the coefficients in (22). We first calculate the total energy consumption  in slot t based on the following threshold rule, and then we further determine 
 and 
.(27) 
 

Insight: If the coefficient a in the objective function (22) is greater or equal to zero, then the optimal  should equal its low bound 
, that means the total energy purchased at t is only enough to process the current delay sensitive loads. Otherwise we determine  one the following two cases: (1) If the maximum power 
 is larger than the sum of power demand of the residing tolerant workloads in  and the power demand of delay sensitive workload of slot t, e.g. 
, then we choose 
 for avoiding buying redundant energy. (2) Otherwise if 
, then the optimal  equals its upper bound of the feasible domain, so we have 
. Note that if we choose 
, which implies that the total purchase energy  can't handle all residing delay tolerant workloads in the queue , such that . And in another case when we choose 
, which presents that all the residing tolerant workload is served, such that  in slot t. The above discussions will help to analyze the performance of our proposed algorithm.

Then we further calculate the decision variables 
 and 
. To simplify the analysis of P3, here we make an assumption that wind energy is cheaper than solar energy (e.g. 
) as in [60]. This assumption is reasonable in reality because solar energy need relatively higher capital expenses than wind energy [60]. Note that even if 
, our algorithm also works only by exchanging the calculation order of two decision variables (
, 
). Following our assumption, we have  in (22). Therefore, according to the threshold rule (27), we can easily calculate 
 and 
 only by judging the coefficients b and c. If b or c is less than zero, then the corresponding decision variable should be 0 (e.g. 
 and 
), otherwise 
 and 
 is determined according to the following Algorithm 1.

Algorithm 1
Download : Download high-res image (108KB)
Download : Download full-size image
Algorithm 1. Threshold rules Solution of P3.

In line 2 in Algorithm 1, when 
, we have 
 and 
, that means we should maximize the usage of renewable energy. Since  based on the aforementioned assumption, we first determine the value of 
. If  which implies that wind power is cheaper than grid power at t, so we prefer to maximize the utilization of wind energy, such that 
, see line 5. Meanwhile, if  which represents that solar power is cheaper than grid power at t, thus we have 
, see line 7. The basic idea in Algorithm 1 is that we purchase energy based on the price order from low to high.

Based on the above discussions, we summary our dynamic control algorithm, called ODGWS (Online workload Scheduling algorithm with Delay Guarantee) as follows: making control decision (
) at each time slot t to minimize the objective function of P3, such that we can achieve a close-to optimal value of long-term power cost 
 
 that guarantees the scheduling delay 
 for tolerant workload 
. The details of ODGWS is described as follows:


Algorithm 2
Download : Download high-res image (111KB)
Download : Download full-size image
Algorithm 2. Dynamic algorithm ODGWS.

Time complexity analysis of ODGWS: our algorithm only needs to solve a simple judging problem with time-complexity  at each time slot, which means that our algorithm can run efficiently in an online manner. Next, we provide the performance bound of ODGWS by rigid theoretical analysis.

Lemma 2

(Bounded of delay) The maximum scheduling delay of tolerant workload 
 can be bounded by the following formula:(28)
 
 where 
 is the maximum backlog of the real queue Q, and 
 is the maximum backlog of the virtual queue U.

Proof

See Appendix A.2. â¡

To analyze the performance bound of ODGWS, we derive the following Theorem.
Theorem 3

If vectors (
, 
, 
,
, 
, ât) are i.i.d. over all time slots, then there exists a stationary, randomized control policy 
â
â
â
â
 based on the current system state at each slot t and satisfies all the constraints of problem P1 and provide the following guarantee:(29)
â
â
â
â
(30)
â
â
â
 where 
â
 optimal objective value of P1 under some randomized and stationary strategy.

Proof

The theorem can be deduced from Theorem 4.5 in [45], here we omit for brevity.

Note that although we can acquire such an optimal control strategy 
â
 at each slot t, we need to obtain the statistical distribution of 
, which is very hard in reality. However, we can leverage Theorem 3 to analyze the performance our algorithm. â¡

Theorem 4

(Performance analysis) For any fixed  and , if random processes 
, 
, 
, 
 and 
 are i.i.d. over time slots, then ODGWS has the following properties for all slot t:

a) (Bound of queues length) The maximum queue length of Q and U will satisfy the following inequalities:(31)
(32)
 where 
 is the upper bound of electricity price as defined above.

b) (Performance optimality) If we choose 
, then the optimal value achieved by ODGWS satisfies:(33)
â
 where 
 is the minimum time-average cost of  derived with our algorithm, and 
â
 denotes the optimal objective function value of (9) with some stationary randomize control strategy.

According to Theorem 4 and Lemma 2, we can rewrite the expression of 
 as follows:(34)
 In eq. (34), the worst-case delay 
 is proportional to . We find that when V increases, the worst queue delay 
 also increases, while the gap between the time-average cost achieved by ODGWS and the optimal value 
â
 is reduced, which illustrates a  cost-delay tradeoff. Ïµ has the similar effects: when Ïµ increases, the maximum scheduling delay decreases, but the gap to the optimality also increases due to the increasing of B. Thus we can achieve the desirable cost-delay tradeoff by tuning parameters V and Ïµ to meet the actual requirement.
5. T-step lookahead algorithm
To evaluate the performance of our online algorithm in reality, we design a T-step lookahead offline algorithm as a benchmark. Similar to [51], [53], in the T-step lookahead algorithm, we assume that we can look ahead future T slots system information (e.g. task arrivals, electricity price, renewable energy supply) in advance. Note that here we do not need to an i.i.d. assumption, the random processes (
, 
, 
,
, 
) can be any probability model (with temporal correlations) over the whole period.

We assume that the entire operating period is divided into R successive frames, each frame contains  time slots. Then, at the beginning of the rth frame, , we can wholly obtain the future T slots system information, so that we formulate the offline optimization problem for each frame as follows:(35)
 
 
(36)
 
(37)
 
(38)
(39)
(40)
(41)

We denote the optimal solution of rth frame as 
â
, and specify the average optimal cost of all R frames as 
â
 
â
. Thus, the T-step lookahead algorithm is summarized as follows:

Algorithm 3
Download : Download high-res image (30KB)
Download : Download full-size image
Algorithm 3. T-step lookahead algorithm.

The following theorem shows a constant gap 
 
 between the time-averaged cost 
 
 achieved by ODGWS algorithm and 
â
.

Theorem 5

(Optimality of power cost) Assume the minimum power cost achieved by ODGWS is  in time slot t, the upper bound of  and the worst-case delay 
 is given by (31), (34) respectively. For running period with RT time slots, where R and T all are positive integer, we have(42)
 
 
â
 

Proof

The theorem can be deduced by Theorem 3 in [45] and Theorem 4.13 in [44], here we omit the details of proof for brevity. â¡

The above Theorem illustrates that the value achieved by ODGWS algorithm can be close to the T-step lookahead offline algorithm, even if ODGWS does not acquire any future system information. Note that the T-slots offline information in T-step lookahead algorithm is very hard to obtain or predict accurately in the real system due to the burst characteristic of workload arrival and the intermittent nature of renewables.
6. Simulations
6.1. Simulation setup
To evaluate the performance of our algorithm, we simulate a green cloud data center in Los Angeles, USA, which builds its own wind farms and solar power plants to supply green energy. The cloud data center also purchases traditional electric energy from the smart grid market. We assume that the price of grid power fluctuates with time and is hard to be precisely predicted in the short term. The total duration of simulation contains 4464 time slots (31 days) with 10-min a slot. We implement the simulation by Python language and analyze the experiment results with panda [42]. Note that the length of time slot can range from tens of seconds to minutes [36], [61], so our algorithm can handle the highly dynamic renewable energy generating process.

Workload trace. We use the history trace of Wiki-Dump [5] in one month which starts from October 1, 2015 as workload data set. We convert the workload traces into the form of power demands. In reality, the power demand of a delay tolerant task is usually higher than the demand of a sensitive task [15]. We assume that the delay sensitive load 
 accounts for Ï of the total workload of slot t, which follows a uniform distribution, that is  [14]. The workload arrival process of our simulations is shown in Fig. 2 (a).

Fig. 2
Download : Download high-res image (1MB)
Download : Download full-size image
Fig. 2. Real-world data traces used in simulations. (For interpretation of the colors in the figure(s), the reader is referred to the web version of this article.)

Electricity price trace. We download the hourly locational marginal price (LMPs) from Mountain View node of CAISO (California Independent System Operator) [6] with the corresponding time period (2015-10-1 to 2015-10-31), and scale into one time slot. For the green energy price, we take into account power plant initial investment cost, maintenance cost as [16], [25], [60], and we set the amortize price of wind and solar power as 
 and 
, respectively. The data traces of power price used in our simulation are shown in Fig. 2 (b). In Fig. 2 (b), the solid horizontal line represents the price of wind energy, and solid wave curve represents the price of grid power.

System parameters. Other system parameters are set as follows: the maximum delay tolerant load is set at 
, the maximum workload is set at 
, the maximum power capacity of the cloud data center is set at 
, the upper bound of grid price is set at 
, the default value of control parameter V is set at , and the default value of y control parameter Ïµ is set at 
.

Green energy trace. To simulate the green energy generation process. We retrieve the meteorological data (wind speed and solar radiation) of Loyola Marymount University from National Renewable Energy Laboratory [7], which corresponds to the location of the data center. We set the parameters of green energy model as follows: (1) Solar energy: the solar-to-electricity conversion efficiency is set at  [15], the irradiation area of one PV panel is set at 
, and the total number of PV panels in the solar plant is set at 8000. (2) Wind energy: the wind cut-out speed and wind cut-in speed are set at 
 and 
 respectively, and the total numbers of wind turbines in the wind farm is set at 30. Thus, the power generation processes of renewable energy are shown in Fig. 2 (c).

6.2. Sensitivity analysis on control parameters
To characterize the impact of control parameters on the performance of ODGWS, we conduct the following sensitivity analysis of ODGWS on parameters V and Ïµ which can be tuned to achieve the desirable cost-delay tradeoff as shown in [18], [55].

1) Impact of parameter V

The Fig. 3 demonstrates the influence of different control parameters V on the average power cost under ODGWS with setting  and . In Fig. 3, we observe that the average power cost is unstable and fluctuates violently at the beginning phase, but it gradually becomes smooth and stable as time t goes on, which indicates that our algorithm works efficiently. Meanwhile, we see that the average cost 
 
 decreases with the increasing of V, which is consistent with Theorem 4. This is because that the increasing of control parameter V means the algorithm pays more attention to the average power cost and pays less attention to the scheduling delay of the delay tolerant workload. Therefore, increasing the value of V also lead to a larger scheduling delay.

Fig. 3
Download : Download high-res image (281KB)
Download : Download full-size image
Fig. 3. Average power cost with different V under ODGWS.

Fig. 4 depicts the impact of control knob V on the average queue length of , with setting the value of V from 1000 to 85000 and . As shown in Fig. 4, we see that the average backlog of queue  increases with the increase of the value of V, which implies the increase of scheduling delay of tolerant workloads. According to Theorem 5, we can choose an appropriate value of V, e.g. , our algorithm can achieve a significantly low cost while guaranteeing an acceptable scheduling delay.

Fig. 4
Download : Download high-res image (149KB)
Download : Download full-size image
Fig. 4. Average backlog of queue  with different V.

With setting  and , the variation of the observed maximum waiting time of delay workload is shown in Table 2. As can be seen from Table 2, with the increasing of V, the maximum waiting time of delay tolerant workloads also increases, which is corresponding with Theorem 4. Moreover, we find that the observed maximum waiting time is much smaller than the theoretical maximum scheduling delay 
 calculated by Theorem 4. For example, when , the theoretical delay is 
 slots, and the actual maximum waiting time in our simulation is only 36 slots, which shows the feasibility and efficiency of our algorithm in practice. Fig. 3 and Fig. 4 illustrate that our algorithm can achieve an explicit tradeoff between cost optimality and scheduling delay.


Table 2. The observed worst-case delay with different V.

Control parameter V	200	400	800	1000	2000	3000
Max-waiting time (slot)	10	36	56	78	136	174
2) Impact of parameter Ïµ

To observe the impact of delay control parameter Ïµ on time average cost, we fix  and evaluate our algorithm under different , the result is depicted in Fig. 5. We observe that with the decreasing of the value of Ïµ, the average power cost becomes lower, but lead to the increasing of maximum scheduling delay. Note that Ïµ is used to control the bound of virtual queue , the increasing of Ïµ implies that the grow rate of  will also increase. In Fig. 5, when Ïµ decreases from 86 to 25, the average power cost decreases from 1878.08$ to 1625.57$ with about 13.4% ratio.

Fig. 5
Download : Download high-res image (229KB)
Download : Download full-size image
Fig. 5. Average power cost with different Ïµ.

In this part, we focus on the impact of Ïµ on the actual scheduling delay. We fix  and choose different . The result is shown in Table 3. We find that the maximum waiting time increases when delay control parameter Ïµ decreases. Fig. 5 and Table 3 show that the value of Ïµ also renders a cost-delay tradeoff.


Table 3. Observed worst-case delay with different Ïµ.

Control parameter Ïµ	86	70	60	50	40	25	10	5
Max-waiting time (slot)	78	97	111	126	268	305	316	320
6.3. Comparison with benchmark algorithms
1) Comparison with baseline algorithms

To evaluate the performance of ODGWS, we compare it with the following four benchmark algorithms:

(1) Purchase as Deadline Algorithm (PDA): A greedy strategy used in [15], [45] which considers only delay tolerant workload, but here we extend it to handle delay sensitive workload. The basic idea of PDA is greedily to use the available green energy to process the arrival request at each time slot. If the current green energy is not enough to handle the delay sensitive workload 
 arrived in that slot, then the cloud data center purchases grid power just enough to process workload 
 without concerning the tolerant workload 
. When tolerant workload 
 is at its deadline, then the cloud data center purchases enough power to avoid the violation of SLA of 
.

(2) Random Schedule Before Deadline (RSBD): Randomly choose a time slot 
 to purchase energy to process the tolerant workload before their deadlines. It is similar to the green-first scheduling algorithm in [8].

(3) Directly Schedule Algorithm (DSA): Directly schedule all tasks in their arriving time slots by using the cheapest energy and ignoring the impact on environment [62].

(4) Maximum Green Energy Usage Algorithm (MGEUA): Use green energy (e.g. wind energy and solar energy) whenever they are available. This idea has been adopted by many studies, such like [23], but they did not consider the impact of smart grid zero price on the cost of power consumption of green energy deployment. For a fair comparison, we implement MGEUA based on Lyapunov optimization technique and provide the worst-case delay guarantee for tolerant workload.

We set the control parameters as  and . The comparison results of our algorithm with the above baseline algorithms are plotted in Fig. 6. It is shown that the greedy scheme PDA has the worst performance among the five. Although RSBD is better than PDA since it uses a randomization strategy, but both of them result in a high cost than the other algorithms. The reason lies in the fact that the greedy algorithm does not leverage the variability of fluctuating electricity price to reduce cost and only try to avoid the deadline violation. The other algorithms learn to proactively purchase power when the price is low.

Fig. 6
Download : Download high-res image (256KB)
Download : Download full-size image
Fig. 6. Comparison of ODGWS with benchmark algorithms.

As shown in Fig. 6, ODGWS has a better performance compared with MGEUA, this is because our algorithm leverages the advantage of zero price in a smart grid. ODGWS uses grid power when electricity price is lower than the price of renewable energy, while MGEUA always prefers to use the available renewable energy. We find that the total cost achieved by ODGWS algorithm is 
$, which is about 5.0% (about 92.655$/slot) lower than that by MGEUA algorithm.

2) Comparison with T-step lookahead algorithm

We compare our proposed algorithm against the T-step lookahead algorithm. In the T-step lookahead algorithm, we assume , that means we can see the future 16 windows information at the beginning of each frame. With setting  and different V under our algorithm, the experimental results are shown in Fig. 7. We find that with the increasing of parameter V, the averaged cost achieved of our algorithm is close to that incurred by the T-step lookahead algorithm. When the control parameter set at , the optimal cost value is $, which is very close to the optimal value 1340$ obtained by the optimal algorithm. Moreover, our proposed algorithm only needs to solve a simple optimization problem with time complexity  in each slot, while the T-step lookahead algorithm need to solve a 
 time complexity linear programming, where T input size of offline problem. Furthermore, the T-step lookahead algorithm needs to predict the system information in the future, while prediction error may seriously affect the algorithm performance.

Fig. 7
Download : Download high-res image (151KB)
Download : Download full-size image
Fig. 7. Comparison of ODGWS with T-step lookahead algorithm.

6.4. Extended analysis
1) Impact of the scale of data center

To analyze the impact of the scale of a data center, we assume that both workload and power supply are multiplied by Î². With all other system parameter fixed, we set  to evaluate the impact of data center scale on the total power cost, which is shown in Fig. 8. From Fig. 8, we observe that the power cost increases linearly even logarithmically with the increase of workload and renewable energy.

Fig. 8
Download : Download high-res image (252KB)
Download : Download full-size image
Fig. 8. Impact of the scale of data center.

2) Impact of renewable energy supply

To analyze the impact of the scale of green energy on the average power cost, we set the scale of green energy supply in data set (see Fig. 3 (c)) as basic scale X, which is proportional to the renewable energy generating devices (numbers of solar PV panels and wind turbines). We set the control parameters as  and , run our algorithm under different X. The simulation results are shown in Fig. 9. As shown in Fig. 9, we see that with the increase of the scale of green energy supply, the average cost decreases gradually. This is because that the price of renewable energy (such as wind power) is cheaper than that of grid power in most cases. But we also find that the deceasing trend of electricity cost is not very noticeable with the increase of the scale of green energy supply. Even when the scale increases from 0.5X to 8X, the average power cost only reduces by about 5%. The main reason is that the price of solar energy is still high, so the impact of increasing scale is limited. Therefore, it is necessary to consider comprehensively multiple factors like local meteorological conditions, load and electricity price to determine the scale of green power plants.

Fig. 9
Download : Download high-res image (336KB)
Download : Download full-size image
Fig. 9. Impact of the scale of renewable energy supply.

7. Conclusions
In this paper, we address a problem of minimizing power cost for green data centers with a guarantee on the worst scheduling delay for tolerant workload in the smart grid environment. We first formulate the cost optimization problem as a constrained stochastic problem. Then, we propose a low-complexity algorithm ODGWS for online delay-guaranteed workload scheduling to solve this problem, which makes online decision without any prior statistical knowledge. Moreover, rigorous mathematical proof is provided to show the performance of ODGWS, which achieves a  cost-delay tradeoff and obtain an asymptotic optimal value by tuning the control knob. Finally, we conduct extensive simulations on real-world traces to evaluate the effectiveness of ODGWS against the existing methods. The result shows that ODGWS achieves around 5% improvement compared with baseline algorithms in cost reduction. We notice that some instantaneous system states are often unavailable before making current decisions at each time slot in reality (e.g. the renewable energy is unknown in the current slot and we have only outdated system state information). This motivates us to further study this problem with some learning aided technique (like reinforcement learning or online convex optimization) in the future. We are currently investigating how to extend our algorithm to incorporate job preemption and priorities for real-time applications by generalizing the workload modeling.