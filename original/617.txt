In recent years, large computational problems have beensolved by the distributed environment in which applications are executed in parallel. Also, lately, fog computing or edge computing as a new environment is applied to collect data from the devices and preprocessing is done before sending for main processing in cloud computing. Since one of the crucial issues in such systems is task scheduling, this issue is addressed by considering reducing energy consumption. In this study, an energy-aware method is introduced by using the Dynamic Voltage and Frequency Scaling (DVFS) technique to reduce energy consumption. In addition, in order to construct valid task sequences, a hybrid Invasive Weed Optimization and Culture (IWO-CA) evolutionary algorithm is applied. The experimental results revealed that the proposed algorithm improves some current algorithms in terms of energy consumption.

Keywords
Fog computing

Task scheduling

Energy consumption

Meta-heuristic Algorithm

DVFS

1. Introduction
Over the last few years, new technologies such as the Internet of Things (IoT) and cloud computing have developed [27]. Cloud computing environments deal with analyzing and processing huge data which is a crucial challenge for this environment [17]. Therefore fog computing as new technology is applied to figure out the problems along with the IoT [1], [25]. Unlike cloud computing, fog computing minimizes latency for end devices by the edge nodes between the devices and remote servers [4]. So, fog computing has an important role in computing and analyzing processes for enormous information and data. Energy consumption is the other concern in cloud computing which in distributed systems applications process and send an enormous amount of data to the servers [38]. For controlling and decreasing the network traffic, the portion of the computing is performed at the edge site [6]. Therefore, a small amount of data and tasks computing are sent to servers. It is estimated that 50 billion devices will be connected to the network by 2020 [10]. So, the traffic of the network is going to be worse in the near future and edge computing seems to be a proper solution for this condition.

On the other hand, task scheduling is considered a challenging problem in distributed computing systems [5]. This issue is known as an NP-complete problem on the heterogeneous distributed computing environment. Also, an application is shown by Directed acyclic Graph (DAG) in task scheduling [12], [19]. In general, task scheduling in such systems has two primary stages. Initially, tasks of an application are ordered in a valid sequence. Finally, mapping tasks to available computing resources on the distributed system is done by a method to obtain execution time or makespan of application [11]. In this work, we will consider both minimizing makespan and power consumption in distributed systems. Furthermore, limitation on a power consumption may affect and increases the makespan of Most applications [7]. Thus, usually, the voltage is set at a level in which the makespan of an application can be minimized. In fact, there is no need to set processors at the maximum achievable speed during the entire execution of applications. For task scheduling, many heuristic-based and evolutionary algorithms have applied to schedule applications. A heuristic algorithm is exploited to schedule in a faster than evolutionary methods. However, in NP-Complete problems, they are not be able to discover an optimized solution. So, meta-Heuristics or evolutionary algorithms are used to produce an optimum solutions in the recent years.

In this paper, the fog computing environment is considered for addressing the task scheduling issue to reduce energy consumption in cloud data centers. In addition, minimizing the makespan of applications is the other important aim in this research. To do this, the invasive weed optimization (IWO) along with the cultural evolution algorithm (CEA) are exploited. The main contributions of this research are presented as follows:

1– Presenting a hybrid IWO-CEA algorithm to evaluate an energy-aware task scheduling approach.

2– Applying a Dynamic Voltage and Frequency Scaling (DVFS) technique to reduce energy consumption of fog nodes.

3– Maximizing resource utilization for the proposed task scheduling approach in fog computing.

The rest of this paper is organized as follows. In Section 2, several energy-aware task scheduling algorithms are reviewed as related work. Section 3 takes an overview of Definitions and Models in task scheduling. In Section 4 the proposed algorithm is described in detail. In Section 5, the experimental results of the proposed and some current algorithms will be revealed. Eventually, this article will be concluded in Section 6.

2. Related work
In the task scheduling problem on distributed heterogeneous computing environments and cloud computing, many articles have been writing [7], [8], [14], [16], [18], [20], [32], [33], [34]. Generally, they focus on reducing execution time and makespan of applications and sometimes they also consider the other parameters such as energy, reliability etc.

In [22], the authors presented a time-aware and energy-aware algorithms for designing task scheduling in heterogeneous computing systems. These two algorithms were combined to form an energy-aware task scheduling algorithm. The energy and performance of a system are monitored by users​ more flexibly. Therefore, users can reduce energy consumption or time as objectives of the algorithm. Recently, a task scheduling algorithm in cloud environment was written by [26] for reducing energy consumption and service level agreement (SLA) violations and improving resource utilization. In this work, workflow tasks are sent to cloud computing centers by users and the tasks are computed via energy-aware methods efficiently. One of the methods is the Dynamic Voltage and Frequency Scaling (DVFS) which is exploited to minimize the operating frequency by using various voltage levels. Also, [36] suggested a scheduling algorithm which resources allocation to tasks is performed in cloud computing environment via DVFS techniques. This algorithm, based on the requirement of the task, allocates the available resources efficiently. Also, the proposed method considers system performance besides energy saving. Furthermore, SLA and resource utilization are taken into this approach. In [13] the authors had focused on energy issue in task scheduling for non-linear parallel tasks. In this work, the meteorological cloud is used as an environment for experiments which in this condition computing resources for Weather Research and Forecasting model are provided. The designed algorithm utilizes DVFS technique to reduce energy consumption, and also maximize the completion of tasks.

In the study [30], a DVFS-enabled Energy-efficient Workflow Task Scheduling algorithm(DEWTS) was proposed. Relatively inefficient processors are merged by reclaiming the slack time. After merging DEWTS is able to use slack times constantly. First, the initial scheduling order of all tasks is obtained. Then, and obtains the makespan and deadlines are calculated by Heterogeneous-Earliest-Finish-Time (HEFT) algorithm. Finally, the DVFS technique is used to distribute tasks into the idle slots under a lower voltage and frequency. Also in the work [15], an enhanced energy-efficient scheduling (EES) algorithm is suggested to enhance energy saving along with the considering service level agreement (SLA). Non-critical jobs are slacked to meet power saving. The results depicted that the algorithm can save energy and meet meeting SLA.

As mentioned above, minimizing makespan is an important issue in task scheduling on heterogeneous systems. In such systems, this optimization is considered as an NP-complex problem [19]. Therefore, in recent years, many metaheuristic or evolutionary algorithms have been proposed in this field [2], [3], [16], [21], [24], [37], [40]. In [21], authors offered an invasive weed optimization(IWO) algorithm for optimizing task scheduling problem. IWO is an evolutionary optimization algorithm that accelerates the convergence of solutions in a problem space. Heterogeneous cluster systems were used in the IWO task scheduling (IWOTS) algorithm. IWOTS aims to advantage of both meta-heuristic based and heuristic-based algorithms. In fact, in order to gain an optimized solution, task priorities are obtained by the IWO method as meta-heuristic algorithm and task allocation to computing resources are done by heuristic-based earliest finish time (EFT) method.

Finally, in [35] the authors have suggested a new task scheduling approach using enhanced firework method for improving task clustering in cloud-edge computing. The proposed work has optimal merits on the load deviation and energy consumption for fog nodes than other meta-heuristic algorithms.

3. Definitions and models in task scheduling
First, the fundamental concepts and models in the taskscheduling problem are explained in this section. Then, the model and pattern of the applied system and application will be presented.

3.1. Application and system model
In the proposed algorithm, workflow applications are used in scheduling which they are shown by a DAG G  (V, E), where V and E refer to a set of tasks and directed arcs respectively. Each item in V is called a node or task  and each item in E is the data dependency between two nodes. An edge  between  and  denotes a communication which t is the precedence of  and  is the successor of . In a workflow, a task with no precedence is called an entry task. Also, a task with no successor is named an exit task. Tasks and edges have weights in computing which are termed by computation and communication costs respectively. For example, the cost of  is entitled to  and the cost of  is entitled to . If two dependent tasks are allocated to the same computing resource or processor, the communication cost of the edge is not considered. The terminologies of the considered system and application are presented in Table 1. In Fig. 1, a DAG with 11 nodes and 15 edges is illustrated as an instance. In addition, a set of heterogeneous processors is considered in the system and all of them are DVFS enabled. Each edge has an appropriate weight for priority of execution. Processors can run at various frequency levels which are depicted in Table 3 in Section 4. Also, computation costs of the tasks on the processors are exhibited in Table 2 which the values are at the maximum frequency level. Also, frequency switching times are ignored in this paper [39].


Table 1. The used terminologies in this paper.

The th task in a DAG
The computation time of task  on processor 
The th processor in the system
The failure rate of the processor 
The failure rate of task  on processor 
The score for th alternative in SAW approach
The normalized score of th alternative
The weight of criteria j
E	Number of edges
T	Number of tasks
P	Number of processors
n	Set of task
e	Set of edge
m	Set of processors
The entry task with no predecessor
The exit task with no successor
Succ()	The set of immediate successors of task 
Pred()	The set of immediate predecessors of task 
 
The average computational cost of task 
The amount of communication between tasks  and 
The earliest start time of task  on processor 
The earliest finish time of task  on processor 
The actual start time of task  on processor 
The actual finish time of task  on the best processor 
The earliest time when processor  is ready for run
PopSize	The size of population

Table 2. Computation costs of tasks.

Task	Processor 1	Processor 2	Processor 3
8	3	4
11	13	9
12	11	6
13	15	8
6	10	12
14	10	9
9	14	11
12	4	14
9	10	16
13	9	8
16	6	9
4. Proposed algorithm
Mainly, the suggested algorithm has two steps. First, it attains a feasible optimal priority queue of tasks in scheduling. The second is to provide the appropriate voltage and frequency supply for the servers via the DVFS technique. The requirements of a job are given in terms of maximum and minimum frequencies. Hybrid Invasive weed-Cultural evolutionary algorithm is applied in the proposed algorithm to order tasks in applications. Also, in order to reduce energy consuming, the proposed algorithm exploits the DVFS. In addition, the presented algorithm is simulated by C# language and in a fog computing environment. The steps of Fig. 2 show the all sections and functions in the proposed algorithm. Initial setting is done at the first step. Then, the population is initialized in random. The created population from the IWO is entered into the CA algorithm. Cultural evolution was inspired by human social evolution and it was developed by Reynolds. This optimization method affects the search space by using the prior and current information about the domain. After that, the HEFT processor allocation is applied to obtain the fitness of each solution. Then, the hybrid invasive weed-culture algorithm is applied to order tasks in solutions. In the next step, the DVFS method is run to save energy during the scheduling. Last, of all the termination condition is checked for finishing or continuing the algorithm. The mentioned steps are shown in Algorithm 1.


Algorithm 1. Main function of the proposed algorithm
1: Initial a random population;
2: Call mapping tasks to processors algorithm and evaluate the fitness of solutions;
3:  while the termination condition is not satisfied
4:  Sort the solutions by applying the hybrid Invasive weed-cultural algorithm based on their fitness
5:  run DVFS technique on the solutions
6: return a near-optimal solution.
4.1. Encoding and initial population
The encoding mechanism is the first step in our algorithm. A solution is comprised of m genes or nodes. Each solution should be valid by considering the precedence constraints. The solution in Fig. 3 displays a valid order of tasks for the DAG in Fig. 1. In the suggested approach, the population contains 200 valid solutions which are generated in random.


Table 3. Voltage-relative frequency pairs.

Level	Processor 1	Processor 2	Processor 3
Voltage	Relative speed	Voltage	Relative speed	Voltage	Relative speed
0	1.90	1	1.6	1	1.85	1
1	1.75	0.9	1.4	0.85	1.70	0.85
2	1.60	0.8	1.15	0.60	1.45	0.65
3	1.45	0.7	0.9	0.50	1.20	0.45
4	1.30	0.6	0.8	0.40	0.95	0.30
5	1.15	0.5	–	–	–	–
6	1.00	0.4	–	–	–	–
4.2. Task-to-processor mapping
Tasks should be assigned to the available processors after the population initialization phase in the system. in the recommended approach the HEFT [31] is applied for tasks-to-processor mapping function. The HEFT approach maps the order tasks to processors based on their priorities to in order to minimize the makespan or actual finis time (AFT) of applications.

Firstly, the earliest start time (EST) of the task  on processor  is computed by the HEFT which is obtained via Eqs. (1) and (2): (1) (2) 
 Secondly, the actual start time of the task  on processor  is calculated by Eq. (3): (3)where the Avail (p) is the time which the processor  is in slack time and handy to compute a task from the queue.

Afterward, the earliest finish time of the task  on processor  is acquired by Eq. (4): (4)Finally, the actual finish time of the task  on processor  is obtained. The actual finish time is the function which discovers the proper processor for task  among the other processors to decrease time execution and it is achieved by Eq. (5): (5) 
 

4.3. Dynamic voltage and frequency scaling
In this section, the DVFS technique is described. The main functions of the DVFS are voltage and frequency changing of the available processors dynamically. In fact, DVFS endeavors to choose an appropriate voltage and frequency for the processors during execution of an application. In Table 3, voltages and frequencies of the computing resources are shown as an instance. The resources save energy by running on a lower voltage and frequency [26].

4.4. Invasive weed and cultural algorithms
Since task scheduling in a heterogeneous computing system is an NP-complete problem, these two algorithms are exploited to have topological ordering. In this section, the applied invasive weed-culture evolutionary algorithm will be introduced.

4.4.1. Invasive weed optimization (IWO)
The IWO is an evolutionary algorithm and it was inspired by the growing of weeds in nature. This algorithm is a population based which includes three phases: initialization, reproduction and spatial dispersal, and competitive exclusion [23]. These steps will be reviewed in detail.

4.4.1.1. Initial population.
Producing Initial population is the first step of the IWOTS algorithm which affects performance of the algorithm significantly. In DAG based workflows, ordering of tasks in solutions from the population must satisfy the precedence constraint. For spreading tasks through a solution, a height distribution method is applied [21]. Firstly, the minimum height h () for each task is calculated by Eq. (6), then the maximum height g() is obtained in the DAG by Eq. (7): (6) 
 	
  (7) 
 	
 The results of height distribution are shown in Table 4 for the DAG in Fig. 1. The initial population in our algorithm is generated based on the height values. Where the height of the selected task in a solution should not exceed and falls short of its precedencies and successors respectively.


Download : Download high-res image (682KB)
Download : Download full-size image
Fig. 4. An example of strategy for large code distance.

4.4.1.2. Reproduction and spatial dispersal.
During the generations, some solutions of the population produce seeds based on the selected solutions and the worst fitness. The number of seeds for producing seeds from the minimum seed maximum allowed is acquired by Eq. (8): (8)
 
After that, the spatial dispersal stage is applied for each generated offspring. In order to vary an offspring from its parent and global optimization, a large code distance technique is exploited to diffuse offspring in a discrete solution space. In contrast, the short code distance is used to have local optimization.


Table 4. Height distribution.

Tasks	0	1	2	3	4	5	6	7	8	9	10
h()	0	1	1	2	2	2	2	3	3	3	4
g()	0	1	1	2	2	2	2	3	3	3	4

Download : Download high-res image (209KB)
Download : Download full-size image
Fig. 5. An instance of strategy for short code distance.

4.4.1.3. Strategy for large code distance.
This strategy aims to keep the diversity of the population. To do this, a node is selected as the operation node from a solution at random. Then, the closest two tasks among its precedencies and successors are found to guarantee the precedence constrains. So, the translation can be done in the interval between the specified tasks. Moreover, an array of tags is constructed to record the states of the task translation. All of the tasks are initialized 0 except entry and exit tasks which are set to 3. The mark of the task in the array is incremented by 2 if it is firstly chosen as the operation node. The corresponding mark array element must be incremented by 1 if the movement of a task is for the first time. Hence, the tasks with values 1 or 3 show that they were moved during the process. Also, tasks with a mark value of 2 or 3 depict that they were selected. Therefore, a task with no mark value can be selected, and also the tasks with no movements can be displayed in the left and right sides of the operation node and between the parent and child nodes respectively. Afterwards, it is integrated with the current code distance. The adjustment of the solution is terminated until a determined code distance is obtained or tasks are selected entirely. Fig. 4 illustrates an instance of the strategy by considering the precedence constraint in Fig. 1. The code distance in this example is assumed 4.

4.4.1.4. Strategy for short code distance.
The main goal of this strategy is the local optimization among the solutions. To do this, in the proposed algorithm the short code distance (SFSCD) is applied based on the height of a task. In SFSCD, it is considered that tasks have equal priority if they place at the same height. Thus, SFSCD is enabled to exchange the tasks with the same height without violating precedence constraints. This method is done via two phases including determination of the tasks with the same heights in h () to g () which are named critical tasks and exchanging the two tasks with the same height if possible. Fig. 5 represents an example of specific height computing. The tasks ordering must consider the precedence limitations of the DAG in Fig. 1. As shown in the figure, the task  is selected randomly from the solution. The tasks ,  and  with the same height are specified. Then, among the highlighted tasks the  is selected for exchange.

4.5. Cultural algorithms
In the proposed algorithm, the created population from the IWO is entered into the CA algorithm. Cultural evolution was inspired by human social evolution and it was developed by Reynolds. This optimization method affects the search space by using the prior and current information about the domain [9]. In other words, in cultural algorithm, the behaviors of the population are stored, and then this information are shared to population in every generations. Unlike the genetic algorithm, the CE approach is applied to accelerate society adaptation to their environments. A cultural algorithm contains two search spaces: the population space and a belief space. The cultural information is modeled by the belief space and the individuals in a population is known as population space. These two spaces are evolved in parallel and both of them are affected by themselves. As demonstrated in Fig. 6, two communication channels are defined to create part of the CA. The “Accept” channel is used for selecting individuals to adapt the set of beliefs and the other channel is created to influence the population space. In CA, firstly, Solutions in a population are evaluated by fitness function at every generation. Then, solutions that have influence are determined by acceptance function from the current population. Afterward, adjusting the beliefs are done by the experience of the accepted solutions. Finally, the IWO operators are applied to change the solutions at population variation phase. Algorithm 2 indicates the pseudocode of the CA.

In addition, based on the fitness values, the acceptance function is used to specify the solutions for creating the beliefs for the population. In this technique, top n% of solutions are selected for belief space. A dynamic method is exploited to determine the number of solution for belief space adjusting step and the dynamic numbers at each iteration is achieved by Eq. (9) and Y is the value [0,1]: (9)
 


Download : Download high-res image (138KB)
Download : Download full-size image
Fig. 6. Illustration of population and belief spaces of cultural algorithms.


Algorithm 2. Cultural Algorithm
1: Set the generation counter, t  0;
2: Create and initialize the population space, C(0);
3: Create and initialize the belief space, B(0);
4: while stopping condition(s) not true do
5: Evaluate the fitness of each xi(t)  C(t);
6: Adjust (B(t), Accept (C(t)));
7:Variate (C(t), Influence (B(t)));
8: t  t  1;
9: Select the new population;
10: end
5. Experimental results
In this section, the performance of the proposed algorithm is examined in terms of saving energy consumption and resource utilization. The obtained results by the suggested algorithm will be compared with recent studies i.e. HEFT-B, HEFT-T [31], EES [15] and DEWTS [30]. In the experiments, random DAGs are produced to evaluate performances of the methods in various conditions. For developing the algorithms C# programming language is employed with a system with an Intel Core i7 CPU, 8 GB Memory in Windows 10 (64 bit). Furthermore, different number of processors will be applied during computing. In the rest of this section, the performance metrics in the proposed algorithm will be described i.e., Average resource utilization, Average ECR and energy saving ratio.

5.1. Random DAGs
Random DAGs are produced with 20, 40, 80,160, 320 and 400 tasks to have fare experiments. Also, the generated applications have different computations and communication costs which are obtained in a random way.

5.2. Results and analysis
In the first experiment, the DVFS method are utilized to improve performance of the proposed algorithm against the heuristic algorithms HEFT-B and HEFT-T with regard to energy consumption. The algorithm is iterated 100 times for each experiment with a different number of tasks, and also averages of the results are plotted. The numbers of processors are 3, 6, 9, 12, 15 and 18 for the DAGs with 20, 40, 80, 160, 320 and 400 tasks respectively. Fig. 7 represents the average resource utilization for the algorithms. Evidently, the proposed algorithm outperforms the HEFT-B, HEFT-T, EES, and DEWTS approach on various conditions. As shown in the figure, by increasing the number of tasks, the utilization ratio is improved.

The average energy consumption ratio (ECR) is illustrated in Fig. 8. In this test, the lower ECR indicates that the scheduling algorithm saves energy and has good performance in this case. According to the results in Fig. 8, the energy saving is more improved by the proposed method versus the current algorithms. Also, it is clear that the methods which exploit the DVFS technique in task scheduling have better performance among the others.


Download : Download high-res image (185KB)
Download : Download full-size image
Fig. 9. Energy saving ratio based on the number of processors.

The energy saving ratio for the three algorithms which use DVFS against the other HEFT algorithms is illustrated in Fig. 9. As determined by results, more energy is saved by the presented algorithm with regard to the EES and DEWTS. In addition, the outcomes show that our algorithm has a high energy saving ratio in large applications. Based on the results, the proposed algorithm improves the energy saving ratio of nearly 41%.

6. Conclusions
Energy saving is one of the main aims in grid, cloud and fog computing. In this research, an energy-aware approach based on the DVFS technique is presented to save energy in fog computing. Saving power is done by using of DVFS-enabled processors in the fog comparing which they can compute task under lower voltage and frequency in slack times. In addition, the hybrid IWO-CA evolutionary algorithm is exploited to order tasks without violating precedence constraints. According to the result in experimental section, noticeable energy saving is obtained in the computing of applications that have pre-set deadlines. In the future, the task offloading on fog computing with load balancing problems among the computing resources will be considered. Also, formal verification methods can be applied to prove the correctness of this problem such as [28], [29]. Finally, some important factors such as trust and privacy metrics can be discussed in the future.

