Abstract
The Internet of Things is deeply shaping our society and our lives. Smart devices automatically collect, aggregate and exchange data on our behalf and free us from the drudgery of doing it. These data are often crucial because critical decisions, such as controlling cyber-physical systems, are made depending on them or because they feed learning algorithms. Safety and security issues related to devices and to data can have a major impact on smart systems and can have serious consequences if they oversee essential services, such as delivering power, water, transport, and so on. For this reason, it is crucial to identify the most critical components in a network of devices and to evaluate how they are vulnerable to accidental or to intentional failures. We propose to use the process calculus IoT-LySa to model systems and to apply a Control Flow Analysis to statically predict the manipulation of data, as well as on which data the critical decisions depend, in particular those affecting actuations. By exploiting suitable metrics, we can use the results of the analysis so as to provide system administrators with estimates of the safety and security of their systems.


Keywords
Internet of Things
Security
Safety
Cost evaluation
Actuation



1. Introduction
The emergence of the Internet of Things (IoT) is creating a huge demand for safety and security in response to the growing diffusion of connected devices, i.e. of things. There are many scenarios in which IoT systems are being used, ranging from home automation to industrial automation and from precision agriculture to smart buildings and even smart cities. In these systems, the crucial parts are those that monitor the behaviour of their components, be they sensors or actuators. Any security attacks or any accidental failures could have relevant implications and may also impact on the physical world, when they cause impairment of the critical functionalities of these devices. However, taking security countermeasures or improving smart devices increases costs and downgrades performance, which usually discourage IoT designers. As a consequence, techniques for evaluating where it is more important to intervene, and at what cost, are in order to drive the designers' efforts towards obtaining safer and more secure IoT systems.

Here we exploit the Security by Design development methodology introduced in [6], based on a kernel of a modelling language IoT-LySa to describe the structure of an IoT system and its interactions. A suitable Control Flow Analysis (CFA) is adapted from [5], [8] and then applied to derive an abstract and approximate model of system behaviour. Technically, our analysis symbolically follows all possible control flows; it also abstracts from the concrete values and considers only their provenance and how they are put together and processed, resulting in abstract values.

These abstractions allow us to predict how data may flow inside the system and, in particular on which data a critical computation depends. Typically, a conditional statement causes computations to branch and originates different behaviours and thus the data that are used in its guard are critical. In fact, their alteration can lead to a wrong behaviour, especially for conditions that trigger possibly risky actuations. In this case, the corresponding abstract data “symbolically” encode the supply chain of the actuations and display the logical components of their trigger conditions. Here, we will mainly focus on critical actuations: a similar reasoning applies to each condition identified as critical by designers.

We follow the work by Hankin et al. [3], [18] who propose some security metrics for identifying critical components in Industrial Control Systems. Inspired by them, we reason about the logic of actuation, by identifying the relevant data for the critical actuation decisions. In particular, we model the trigger conditions in the form of the abstract values given by the CFA. Their structures, pictorially described by a graph, highlight how each condition depends on the raw data collected by sensors and on the logical and aggregation functions applied to these data to drive the decision.

Abstract values and their graphs help to assess the security and safety of a system, by wondering what can go wrong and affect its behaviour, because of either an accidental failure or of an intentional attack.

More precisely, we look for the sets of critical data, the alteration of which affects the system's ability to correctly trigger its actuators, e.g. when a tampering attack to the corresponding nodes or an electronic fault occurred.

On the security side, we associate a numerical score that measures the cost of attacking each node or sensor, and therefore of maliciously modifying the data coming from them. As a consequence, we can estimate and compare the different efforts of the attacker to alter each set of critical data. Based on such a comparison, we can single out which sensors can be most easily compromised and deserve additional protections. On the safety side, scores can similarly measure the robustness of nodes and sensors and help designers to determine which of them should be strengthened. For instance, if some of the sensors that provide critical data are predicted to be at risk with these scores, e.g. because of battery issues, redundancy should be improved, e.g. with more powerful batteries.

Structure of the paper  In Section 2, we gently introduce the syntax and semantics of our process calculus IoT-LySa, by using an IoT system for a museum as running example. Section 3 follows the same pattern to intuitively present the adopted CFA. A formal presentation of the process calculus and of the static analysis can be found in [8], while only the relevant aspects are introduced here. In Section 4, the analysis is shown to be useful to reason on the logic of actuations and to estimate the costs of possible security attacks or accidental failures. Conclusions are in Section 5.

2. Motivating example
We illustrate our approach through a museum scenario, in which an IoT network provides an indoor environmental monitoring system. This is mainly used to sense ambient conditions in the rooms and conservation status of artefacts inside the showcases. Each sensor has its own measurement parameters with a range of values for standard behaviour and thresholds for alarm situations. Detection of unwanted fluctuations or imbalances in the values trigger alerts and suitable actuations to regulate the uneven values so as to restore the right conditions.

2.1. The museum scenario
Here, we give a high-level overview of the museum system. In every room of the museum there are environmental sensors to measure temperature, humidity and light and to detect smoke, fire, and water with different parameters depending on whether or not visitors are present (e.g. most lights are turned off when the museum is closed). Furthermore, there are dedicated sensors in each showcase for checking conservation conditions. These again include temperature, humidity and light and may also contain specific sensors to detect vibrations or unauthorised touch, or sensors that depend on the artefact material, e.g. those able to detect fungal growth in case of organic objects or those for monitoring painted surfaces. Environmental data are collected locally in many points in the room by devices called Environmental nodes. Similarly, Showcase nodes collect data probed in each showcase. All these data are provided to the monitor of that room, called Room controller. It aggregates them, and decides which regulations are in order, e.g. which action is needed to increase or decrease the temperature. Furthermore, the Room controller sends appropriate signals to take specific actuations, when selected measurements are out-of-bounds and cause an alert. To control the different parameters sampled by sensors some actuators are provided: temperature is controlled by thermostats; humidity by dehumidifiers; light intensity by lamps; warning beeps are emitted when someone improperly touches a showcase; fire extinguishers are activated in case of a fire alarm. The aggregated data computed in each Room controller are then sent to the control room of the whole building, called Museum monitor that stores them in a database, and in case of alert reacts by taking suitable actions, for instance by triggering an automatic call to the Fire Station in case of fire.

2.2. The IoT-LySa model
The IoT-LySa model of the network N of our museum is in Table 1. Through it we gently introduce the syntax and the semantics of the calculus; more details are in Table 2, Table 3, Table 4 and a complete formalization is in [5], [6], [8].


Table 1. Museum Monitoring System: part of specification.

Image 1

Table 2. Syntax: nodes.




Table 3. Syntax: processes, sensors and actuators.




Table 4. Communication semantics rules.



Our network system consists of the node Museum monitor M put in parallel with the nodes located in the n rooms of the museum. We use the shorthand 
 to designate all these parallel nodes: the Room controller node 
, and a finite number of nodes of two kinds: Environmental nodes 
 and Showcase nodes 
 (to avoid double indexing, we omit the index p, when unambiguous).

Museum monitor  The node 
 hosting the Museum Monitor, is made of a processing unit 
 that executes the logic for coordinating the other nodes and for controlling the actuator 
 and some components 
 including the local store, immaterial here. Each node is uniquely identified by a label, as it is often the case, e.g. the Museum Monitor has 
 as its unique address.

Actually, the process 
 is declared tail-recursive by the μh keyword, and behaves like the process where 
 itself replaces the trailing (bound) variable h. In more detail, at run-time 
:

•
(i) collects the results coming from the rooms through subsequent inputs (sequentialised by “.”) of the form 
. These inputs will be fired by corresponding outputs only if the sender is indeed 
, in which case the received value are stored in the variable 
 and 
, resp.; the corresponding and matching outputs are 《
》
《
》
, with 
 (see point  in the description of 
), where, at run-time, the variable 
 will be bound with an actual value 
 computed in 
. One can instantiate the semantic rules (Ev-out) and (Multi-com), noting that the 
, that the two nodes M and 
 are in the same range (as assessed by 
) and that the component at the left of “;” is indeed 
. Thus, accordingly with the inference rule in Table 4, we deduce the following transition, where 
, 
 are the continuations after the communications prefixes in 
, 
, respectively (note that the local store 
 of 
 is updated with the received values): 
《
》
《
》
 

•
 sets the variable siren to the result of aggregating these values through the logical function or, and based on that decides if special activations are needed; and

•
 sends to the actuator 
 the message  that represents the trigger command for the (parameter-less) action , provided that the condition siren holds; otherwise the command is skipped.

The actuator 
, also tail-recursive, will execute the action  triggered by 
, on the device Bell. The effect of this action is to ring the alarm and, possibly, to call the Fire Station. Afterwards, the whole process recursively restarts from the beginning after some internal activities summarises by the action τ.
Room controller  This node RC (with label 
) is made of a processing unit 
, a sensor 
, an actuator 
 and of some further immaterial components abstracted by 
.

The sensor 
 makes the level of the water in the pump available to the other components of the node RC, by storing it in the location (identified by) 
 of the shared store.

The tail recursive process 
 performs a sequence of controls grouped together in Table 1 with comments in square brackets. First it controls and regulates the water level by:

•
(i) recording in the variables 
 the data provided by the water level sensor of the pump and stored in the location 
;

•
 checking whether the level is within the wanted range by using the predicate rng on the received level and the min-max thresholds 
 and 
. If the level of water is out-of-range the variable 
 is assigned true;

•
 computing through the function reg the correct value of the water level 
, to be used as a parameter in the trigger command for regulating the actuator 
.

Then 
 acquires the required data from the environmental and showcase sensors, commands the required regulation, and detects if a fire has broken out. This node:
•
 inputs the data of all the environmental nodes 
 and the showcase nodes 
, with 
; the corresponding outputs are 《
》 and 《
》 that match and provided the data locally provided by their sensors (see e.g. point (ii) in the description of 
);

•
(v) decides if any regulation activities are in order, by checking if the received values are in the admitted range by using the function rng (through the logical variables 
) and by computing the needed regulation values 
 with the function reg. Then it sends the message 《
》
 to all the environmental nodes (see point (iii) in the description of 
) that in turn will activate the relevant actuators, assuming them within the transmission range; a similar message is sent to showcase nodes;

•
 checks if the average 
 of the temperatures in the room exceeds the given threshold 
 (via the function gt) and stores the result in the logical variable 
; then it checks the data sensed by the 
 sensors (the ones for fire detection) of the room and received in 
, by using the function dt, keeping the corresponding values in 
. Eventually, it stores in the variable 
 the value resulting from the logical conjunction of 
 (is there enough water in the pump system?) and of the conjunction of 
 (is the average temperature in the room over the temperature 
?) and of one of the 
 (does at least a sensor detect fire?);

•
 possibly sends the actuation command for the fire suppression system to all the environmental nodes in the room (see point (iv) in the description of 
). When the corresponding trigger condition stored in 
, i.e. the value of 
, is true the action  is activated with the special value . Note that the message is also sent to the Museum Monitor M that takes the necessary actions, e.g. calling the Fire Station (see point (i) in the description of M).

Environmental nodes  We now illustrate the specification and the behaviour of the environmental nodes that are located in the rooms of the Museum. They collect the local data from their sensors, send them to the Room controller RC, and wait for the corresponding actuation decisions. Each Environmental node (with its own label 
)
 has a control process 
 that manages the six environmental sensors 
 and the six corresponding actuators 
 to measure and regulate temperature, humidity, light and for detecting and reacting to the presence of smoke, fire, and water, respectively (see Table 5).1


Table 5. Sensors, actuators and their activities.

Sensor	Actuator	Activity
Ei1, Sj1	Ai1	Temperature
Ei2, Sj2	Ai2	Humidity
Ei3, Sj3	Ai3	Light
Ei4	Ai4	Smoke detection
Ei5	Ai5	Fire Detection
Ei6	Ai6	Water Detection
Sj4	Aj4	Showcase-specific activity
More in detail, the control process 
:

•
(i) stores the data collected by its sensors 
, through the assignment: 
;

•
 transmits the collected data to the Room controller RC, with the output 《
》
; the corresponding input in RC is 
 (see point  in the description of RC). The first components match and, at run-time, the variables 
 will be bound to the values 
 and therefore, after the synchronisation also the variables 
 will be bound to the values 
.

•
 inputs with 
 the decision of RC (see point (iv) in the description of RC);

•
 forwards the decision to each actuator 
, by using the command 
, when the trigger condition 
 is true;

•
(v) waits on the input 
 if the Room controller signals a fire alarm and if 
 is true commands the fire suppression actuator with 
 (see point (vii) in the description of RC).

Each environmental sensor 
 reads the probed value 
 in the shared location 
, performs some internal actions represented by τ, and restarts.

When triggered by 
, the actuator 
 executes the action 
 with the received regulation value 
; performs some internal actions represented by τ; and restarts. Each 
 activates a specific regulation of the room condition, e.g. the temperature governing the thermostat to 
, as shown in Table 5.

Showcase nodes  The Showcase nodes 
 located in the rooms
 are modelled similarly. Sensors again include temperature, humidity and light and specific sensors (see Table 5) for checking if the material of the artefacts in the showcase are in an acceptable condition.

3. Analysis
Once specified a system of nodes, a designer can use our CFA to statically predict its behaviour. This analysis estimates the “shape” of the data that nodes may exchange and elaborate across the network, in the form of composed abstract values. In particular, CFA components approximate, for each piece of data, from which sensors that piece can be derived and which manipulations it may be subject to, and where. Intuitively, these abstract values “symbolically” encode where data may be generated, the nodes that they may pass through and how they may be processed. In addition, the analysis records the conditions that may trigger actuators.

We intuitively introduce the CFA through our museum example and with the help of Table 6, Table 7, Table 8. Again, further details can be found in [5], [6], [8].


Table 6. CFA: abstract values.




Table 7. CFA: abstract domains.




Table 8. CFA: abstract domains.



The terms are uniquely and mechanically annotated with labels to support the CFA. For the sake of simplicity, we omitted the labels and we assumed that each term E is labelled by 
, and that different occurrences of the same kind of functions take different labels, e.g. 
 stands for 
 and 
 stands for 
.

Formally, the result or estimate of our CFA is a tuple 
 (a pair 
 when analysing a term) that satisfies the judgements defined by the CFA rules (some of them are in Tables 8) and where the abstract domains are specified in Table 7. Technically, the analysis “mimics” the evolution of the system, by using abstract values in place of concrete ones and by modelling the consequences of each possible action.

Consider again our running example. For the sake of presentation, consider the portion of the analysis estimates described in Table 9, following the path towards the Room controller RC of the data concerning the temperature and fire detection sensed by the Environmental nodes 
, and the data on the water level sensed by RC. Every correct analysis estimate must satisfy the constraints displayed in the table. We intuitively discuss the entries going downwards from the left column.


Table 9. The estimate where 
 is a shorthand for the abstract value 
.

《
》		
《
》
 

We represent the value sampled by the 
 sensor of 
 with the abstract term 
, encoding the identities of both the sensor and of environmental sensor. In particular, the abstract term 
 represents the values of the temperature, while 
 those of the fire detector and 
 those of the water level.

The first constraint says that the abstract values 
 are assigned to the variables 
 (whose labels are 
 in (2)) of the local store of the node 
. Constraint (3) says that these values are sent to the node RC.

We briefly illustrate that this constraint has to be part of a correct estimate, in that it statically approximates the run-time behaviour. Since by (2) we have that 
, we are predicting that the variables 
 will assume the values represented by 
, fulfilling the condition 
. In turn, this condition, together with the constraint (3), permits to fulfil the following formula
《
》
 (Of course the proposed estimate has to be checked for validity also on the continuation P.)

The constraint (4) is similar to (2), but concerns the abstract value 
 of the water level. The constraints (5) and (6) predict instead that the system may apply the functions rng and reg to check if the value of 
 is in the expected range and to compute the needed regulation degree, respectively. Similarly the constraints (8) and (9) record the possible applications of functions gt and avg. Note that the abstract value 
 denotes the results of checking whether the average of temperatures sampled by sensors of environmental node 
 is greater than a given threshold 
. Similarly, the abstract value 
 denotes the application of the detection function dt to the values coming from the fire detection sensor 
.

The Room controller may receive the temperature sensed by the node 
, according to (7). In the following constraints, the shorthand 
 stands for the composite abstract value 
  that is assigned to the relevant variable 
 of the Room controller (10), whose corresponding assignment in the specification is

The value 
 is then sent to the environmental nodes (there stored in the variables 
), according to (11) and (12).

Finally, (13) and (14) show that the activation parameter alarm is stored in 
 and that the condition for triggering the alarm, stored in 
, may include the abstract value 
.

Note that the last three constraints make true the following formula (assuming that the estimate is also correct for the continuation P)

4. Usage of the analysis
Monitoring environmental parameters, like imbalances in temperature, humidity and so on, supports informed and intelligent decisions about which actuations are needed when thresholds are exceeded, and alerts raised. Conditions for actuation depends on the sensed values, on their aggregations and comparisons, as well as on the reliability of the nodes where data are collected, processed and propagated.

Our Control Flow Analysis supports us in reasoning on the logic of actuations, in particular by considering the analysis component α that predicts the abstract values corresponding to trigger conditions. Indeed, the abstract values recorded in an estimate and their structure help us to answer questions like “does the specification comply with the intended design?” Typically, the α component enables one to check at development time whether the trigger condition is correctly implemented, while the component Θ permits checking if needed computations are distributed as expected among the nodes and, together with the component κ, if the communications are designed accordingly.

The analysis can be also useful at maintenance time, when the actuation logic of the specification under analysis is made obscure by a stratified and legacy-dependent work.

The analysis estimates for the trigger conditions can help system designers not only to check if the implementation provides the correct ingredients for actuation decisions, but also to investigate the security and the safety of their system through a “what if” reasoning. In other terms, we can study what can go wrong and can lead to change the correct behaviour of an actuator, because of either an accidental failure or of an intentional malicious attack. The structure of these abstract values of trigger condition, pictorially represented by rooted directed acyclic graphs, highlights the dependency among data, because they show how the raw data collected by sensors and their aggregation impact on the actuation decision.

Such graphs, like that in Fig. 1, are called trigger graph. The nodes correspond to the constituents of the abstract values: the root corresponds to the whole abstract value, while the leaves represent the data collected by sensors. Internal nodes represent instead the aggregation functions and the data sensors that contribute to the evaluation of the relevant condition. Note that the labels of the graph nodes record in which network node the corresponding computations occur. Finally, the edges encode the structural dependencies between a term and its sub-terms.

Fig. 1
Download : Download high-res image (147KB)
Download : Download full-size image
Fig. 1. Trigger graph of the abstract value 
, with blue (in the pdf) boxes for comparison functions and orange ones for aggregation functions.

Clearly, the same construction and reasoning also apply to any other decision point and to the data that the designer considers critical.

We first focus on security issues and, following the approach of Hankin et al. [3], we identify the possible sets of nodes that need to be tampered with to deceive the behaviour of a critical activation, e.g. in our fire suppression system.

Assume that each kind of attacks requires different efforts, depending e.g. on how easy is accessing a given sensor or node. As in [3], we assume there is a security numerical score ϕ that measures the cost of attacking each sensor S and each node N. Scores are intended to quantitatively express the efforts required by an attacker to compromise a given node or a given sensor. This score metrics is exploited to determine the set of sensors and nodes that the attacker can alter with an affordable cost.

Understanding which nodes and sensors are the most critical, and therefore which security countermeasures are the most crucial and where they need to be put at work would greatly help designers in securing their system. This kind of reasoning can indeed guide designers' choices on how to reduce the risk of impairing some critical actuations, e.g. by introducing some redundancies in the sources of data, such as adding new hardware and software components or improving the physical protection of the most critical devices.

We want to analyse the fire suppression system of our museum scenario. The question we would like to answer is: “which are the data that can affect the trigger condition of the command 
, once altered?” We know that this command is given when the value stored in the variable 
 in the Room controller RC is true (the trigger condition). The analysis estimates encode in 
 how this value is computed and how it depends on the values of the sensors in the nodes RC and 
. This abstract term encodes the supply chain of the fire detection system and provides the logic of actuation and the localisation of the computations in the network, and thus reveals which are the critical components for actuation.

Recall that, according to 
, the actuation 
 depends on the evaluation of the logic conjunction of the results of the two branches: i.e. on 
 and on the composite condition
 The first condition depends on the evaluation of the function rng applied to the data coming from the sensor 
, while the second one results from the conjunction of the outputs of the two branches 
 and 
. The output of the first branch comes from the application of the functions  to the data coming from the sensors 
. The second output in turn depends on the logical disjunction of the branches 
, where the function dt is applied to the data coming from the sensors 
.

The structure of the abstract value 
 discussed above can be exploited to investigate security and safety issues. A system is secure, under this aspect, if no attacker exists that can force a specific behaviour of the actuator, by preventing activation of the fire suppression when necessary, or can force its activation when there is no fire, just to flood the rooms. A system is instead safe, when no accidental failure can impair the fire suppression system.

Now, we focus on security issues. To study which are the possible attacks, we look at the trigger graph for 
 in Fig. 1, and we evaluate how attacking some sensors or nodes may impact on the capacity of the system to correctly trigger the fire suppression actuators.2 Suppose the attacker wants to impair the trigger of 
, by maliciously forcing 
 to be set to false – of course it suffices to force a single and branch to false. A possible way is to attack some sensors, by

•
tampering with the sensor 
 that measures the water level in the node RC, in order to force a false on the left branch; or

•
altering the result of second and, by tampering with

–
enough temperature sensors among 
 in order to force their average 
 not to be greater than 
; or

–
the fire detector sensors that actually detect fire among 
 in order to alter the values 
, so making false the result of the or disjunction.

An attacker can also compromise:

•
the node RC in order to alter the aggregation and the comparison of data coming from the sensor nodes;

•
the nodes 
 in order to directly alter the activation conditions;

•
the communications of data.

To estimate the cost of the different strategies of attacking the actuation of 
, we suppose that tampering with temperature sensors could be easier than tampering with fire detectors, and each of them requires less effort than attacking the pump water level sensor, even though there is a single one. Indeed this sensor is usually better protected and more difficult to access.

We therefore assume the following security scores as given, where we suppose, w.l.o.g. that the number of environmental nodes in a room is , one for each corner of the room, and that the scores are: 
  Under these hypotheses, it is more convenient for the attacker to attack (i) the temperature sensors or (ii) the fire detectors in the environmental sensor nodes than (iii) attacking the water level sensor of the Room controller. In case (i) the overall cost amounts to , while in (ii), in the worst case, i.e. when the attacker must tamper with all the fire detectors, the overall cost amounts to . In both cases, the cost is less than that of (iii), that is 3.

When the attack consists of activating the fire suppression system in absence of fire, the attacker has to force a single fire detector to signal the presence of flames and to tamper with enough temperature sensors to increase the average temperature above the threshold. In this case, we can estimate the cost of the attack in a way similar to that described above.

An analogous reasoning can be applied in order to asses safety and reliability of IoT systems. As in the security case, local accidental failures can impact on the actuation decision as follows:

•
the local failure of the sensor 
 that measures the water level in the node RC can force a false on the left branch; or

•
altering the result of second and can be obtained with

–
the local failure of enough temperature sensors among 
 that forces 
 not to be greater than 
; or with

–
the local failure of the fire detector sensors for alter the values 
 so making false the result of the or disjunction.

Scores in this case can measure the robustness of nodes and sensors and our framework can help designers to determine which of them should be strengthened. Back to our example, a question may be “which accidental failures can impair the critical decision of activating the fire suppression system?” Assume now the following robustness scores: 
  according to which, the least robust sensors are the temperature ones, followed by the fire detectors, while the water level sensor is more robust. These scores indicates that the environmental sensors can suffer from battery issues, while the Room controller sensor has a better charge. As a consequence, enhancing environmental sensors is a more cautious choice than enhancing the water level sensor in RC.
Resilience analysis a là quality  Our approach can be further pushed in order to consider resilience issues, by answering to question like “Given an aggregation function, how many values must be correct for giving the right answer?” The aim is to ensure a certain level of reliability of actuations even in the presence of unreliable data.

For instance, consider the check on the temperature average, used to trigger the fire suppression system and suppose that the temperature sensors in the room now are eight.

A possible detailed question here may be: “What if 
 and 
, give the wrong results?” and “Does the overall result amortise these weaknesses?” Maybe it does, but “what does it happen if additionally, also 
 fails?” In other words, the overall result can also be altered because of more local conditions. To handle these issues, we can embed quality predicates (in the style followed of [19]) inside our abstract terms:
 where 
 means that it suffices to have at least one correct value, and 
 means that all the values are necessary. More complex nested logical structures like 
 are possible, as well. This allows us to encode the dependence of our actuation on a suitable combination of reliable data. For example, the following formula expresses that the reliable data are 
, 
, 
, 
, one between 
 and 
, and one between 
 and 
:

Note that this technique can be used starting from the estimates of our CFA as they are, because certain quality predicates can be applied directly to the resulting abstract values in order to reason about resilience issues.

5. Conclusions, related and future work
Conclusions  In IoT systems data are collected locally and are aggregated for driving computations. When data are used for decisions and are subject to unexpected changes, the monitoring system may make a wrong, possibly dangerous decision. This is especially risky for conditions that trigger actuations in the presence of critical anomalies in the behaviour of systems. Actually, a system can go wrong because of either accidental failures of devices or of intentional attacks.

To investigate these security and safety issues, we modelled IoT systems with the IoT-LySa calculus and we statically endowed these models with a Control Flow Analysis that predicts the behaviour of systems. The abstract values in the analysis estimates “symbolically” encode the supply chain of values that drive critical decisions, showing their dependencies on the raw data from sensors and their aggregations. This information allows designers to identify the possible nodes or sensors, the data of which can impact on the capacity of the system to correctly trigger the actuators.

On the security side, an attacker can compromise sensors or nodes to drive the system into an undesired state. As in [2], [3], we assume that each node or sensor is associated with a score that measures the efforts required by an attacker to compromise it and therefore the integrity of its data. Based on that investigation, designers can compare different attack strategies and devise which nodes need better protection; other metrics of [2], [3] can be adopted as well. Similarly, on the safety side, battery issues or accidental faults can alter sensor readings or other critical data. In this case, using scores that measure robustness, designers can choose which nodes and sensors to improve.

Related work  Cyber-Physical Systems (CPS) are closely related with the IoT systems studied in this paper. These systems also consist of physical devices that are monitored and controlled by a logic, typically implemented on embedded computers and networks. In the following, we briefly survey the work on CPS security that is closest to ours, and we feel free to refer the interest reader to the survey (of surveys) in [12] for a guide to the vast literature on this topic.

Providing quantifiable measurements by taking into account dependencies between components is the basis of a recent line of research on the CPS security side [2], [3], [13], [18]. In particular, the first work proposes a game theory-based approach to support decision-making against attacks on industrial control systems. Nicolaou et al. introduce in [18] a methodology that estimates the number of cyber-physical elements that need to be attacked to compromise an entire target system, namely its security level. The authors of [2], [3] provide a model that captures complex interdependencies among CPS components, in the form of logical combinations of AND/OR connectives. They further propose a minimal weighted vertex cut in AND/OR graphs that exploits a security metric that measures the efforts required to successfully attack individual components. While the papers discussed above focus on the physical dependencies, we focus on the functional dependencies between components to quantitatively evaluate the vulnerability of an actuation logic. Another proposal for identifying critical cyber-physical components that also considers functional dependencies is in [10], where vulnerability is analysed in critical infrastructure system that do not have a fixed topological structure.

Lanotte et al. [16] use the hybrid process calculus CCPSA, an extension of [14], to model cyber-physical systems and the potential attacks to physical devices. The authors also introduce a threat model to assess attack tolerance and to estimate the impact of a successful attack, with particular attention to timing aspects. As in our process algebraic model, a cyber component governs interactions with sensors and actuators, and communications with other cyber components. The behavioural semantics of CCPSA explicitly takes into account the presence of attackers, modelling typical man-in-the-middle activities such as sensor sniffing and dropping/changing actuator commands, as well as integrity attacks on data coming from sensors or addressed to actuators. These actions directly affect the sensor measurements or the controller commands. An attack is considered harmless when it changes neither the physical behaviour nor the observable logical behaviour of the system. Finally, the authors define a metric to estimate the maximum perturbation introduced in the system under attack with respect to its standard behaviour, on both its physical and logical processes. In order to investigate how many execution traces can be affected by a specific attack, part of the authors propose to enrich the metrics in probabilistic terms (see e.g. [15], [17]). These proposals are deeply based on the formal dynamic semantics of CCPSA. In contrast to this approach, our design framework also includes a static semantics that supports verification techniques and tools to check properties of IoT applications. In [1] the authors study cyber–physical vulnerabilities within a process algebra approach, as we do. They use SPA [11] to model the interactions between both the cyber and the physical components of a system. Then, information flow properties are verified using symbolic model checking.

Future work  Our current CFA can be integrated with other security analyses available for IoT-LySa. In particular, combined with the one in [4], which predicts how tainted data spread across an IoT system, we could investigate how critical decisions may depend on tainted data.

Moreover, since the behaviour of IoT systems may depend on the computational context in which they are embedded, we plan to extend IoT-LySa with constructs to represent contexts in which they operate along the lines of [9], and to study their security along the lines of [7].

Finally, we are interested in the practical application of our techniques to further case studies.

