Abstract
The constructions of node-disjoint paths have been well applied to the study of connectivity, diameter, parallel routing, reliability, and fault tolerance of an interconnection network. In order to minimize the transmission cost and latency, the total length and maximal length of the node-disjoint paths should be minimized, respectively. The construction of node-disjoint paths with their maximal length minimized (in the worst case) has been studied previously in folded hypercubes. In this paper, we construct m node-disjoint paths from one source node to other m (not necessarily distinct) target nodes, respectively, in an n-dimensional folded hypercube so that both of their total length and maximal length (in the worst case) are minimized, where mn+1. In addition, each path is either shortest or nearly shortest. The construction of these node-disjoint paths can be efficiently carried out in O() and O(+ logn+n) time, respectively, for odd and even n by taking advantage of two specific routing functions, which provide another strong evidence for the effective applications of routing functions in deriving node-disjoint paths, especially for the variants of hypercubes.

Keywords
Folded hypercube
Hypercube
Node-disjoint paths
Matching
Optimization

1. Introduction
The study of interconnection networks plays an important role in the design of parallel and distributed systems because their topological properties make a great impact on the performance and reliability of the systems, where the interconnection network (network for short) depicts the connection topology by letting nodes and links represent processing units and communication channels, respectively. In order to explore possible choices, many kinds of networks have been proposed and studied by professional experts. Some of them, for example meshes and hypercubes, have practical applications in real systems, and their variants, such as folded hypercubes, k-ary n-cubes, generalized hypercubes, crossed cubes, and twisted cubes, have been studied both widely and deeply in the literature. Among them, the folded hypercube has received much attention especially from many  outstanding  researchers [1], [5], [6], [7], [12], [13], [14], [15], [19], [23], [26], [29], [32], [33], [34], [35] because it has a lot of superior topological properties in comparison with the hypercube.

An n-dimensional hypercube (n-cube for short) [25] consists of 2
 nodes and n2
 links such that each node is labeled with a bit string of length n, and two nodes are connected by a link if their labels differ by exactly one bit. Refer to Fig. 1(a), a 3-cube has 2
 nodes and 3  2
 links. The diameter and connectivity of an n-cube are both equal to n, where the diameter is the longest distance between every pair of nodes, and the connectivity of a network is the minimum number of nodes such that when they are removed, the network will become disconnected or trivial. As one of the important variants of hypercubes, an n-dimensional folded hypercube (n-fcube for short) [5] was obtained by adding 2
 complement links into an n-cube, where the complement link connects two nodes such that every bit of their labels is distinct, i.e. they are complements of each other. Fig. 1(b) shows the structure of a 3-fcube, where the four green links (000, 111), (001, 110), (010, 101), and (011, 100) are all complement links. With the help of complement links, the diameter and connectivity of an n-fcube become  and , respectively. For the sake of simplicity, a node can be also denoted directly by its own label.


Download : Download high-res image (223KB)
Download : Download full-size image
Fig. 1. The structures of a 3-cube and a 3-fcube.

Two nodes of a network can communicate with each other by transmitting messages through a (simple) path, which consists of a sequence of mutually distinct nodes so that there is a link jointing any two consecutive nodes. Two paths are internally node-disjoint (disjoint for short) if they have no common node except their end nodes [27], [28]. The constructions of node-disjoint paths have been well applied to the study of connectivity, diameter, parallel routing, reliability, and fault tolerance of a network. By taking advantage of disjoint paths, parallel routing can avoid transmission congestion as well as increase transmission bandwidth. In addition, alternative transmission routes can be also provided in case of nodes and/or links failures. For minimizing the transmission cost and latency, the total length and maximal length of disjoint paths should be minimized, respectively, where the length of a path is the number of its links.

Though various disjoint paths are worthy of study [2], [10], [11], we are mainly interested in disjoint paths from one source node to other (not necessarily distinct) target nodes. There are two special cases, i.e. either all the target nodes are identical or they are mutually distinct. In the former case, the set of disjoint paths was called container [9], [30], and its construction was applied to the study of some topological properties, such as connectivity, fault diameter, and wide diameter, for analyzing the reliability and fault tolerance of a network. In the latter case, this kind of disjoint paths was called one-to-many disjoint paths [3], [4], [9], [10], [18], [21], [22], [24], [31], and its construction was applied to the study of some topological properties, such as Rabin number [4] and star diameter [9], for analyzing the reliability and fault tolerance of a network. In addition, when the target nodes are not necessarily distinct, the construction of disjoint paths can be used to compute the strong Rabin number [20], [21] of a network.

By the aid of routing functions, all shortest disjoint paths have been constructed in hypercubes [16], tori [17], generalized hypercubes [18], and folded hypercubes [19] if their existence is ensured for some kinds of target nodes, where a shortest path makes sure that its length is equal to the distance between its end nodes. For arbitrary target nodes, disjoint paths with their maximal length minimized in the worst case have been well studied for folded hypercubes [20]. It should be noted that the disjoint paths of [20] are not necessarily all shortest. In this paper, we focus on the problem of constructing m disjoint paths from one source node to other m (not necessarily distinct) target nodes, respectively, in an n-fcube so that both their total length and maximal length (in the worst case) are minimized, where m  . By adopting the idea of [19], we first transform the original problem into a corresponding problem of constructing disjoint paths in an ()-cube with particular properties, and then derive the required paths in the n-fcube on the basis of its solutions. Two specific routing functions are necessary to the construction of disjoint paths, and one of them, as shown in Section 3.2, was particularly designed for even n because even n makes an n-fcube no longer bipartite. By the aid of routing functions and the construction procedures in [16], it will be shown that those optimal m disjoint paths can be constructed in O(
) and O(
log 
n) time, respectively, for odd and even n. In addition, each path is either shortest or nearly shortest.

The rest of this paper is outlined as follows: In Section 2, partial results of [16] about the routing functions and the procedure of constructing all shortest disjoint paths in an n-cube are briefly described. Both of them are necessarily useful in this paper. As shown in Section 3, the optimal disjoint paths in an n-fcube will be constructed for odd and even n, individually. In Section 4, we give some remarks on the efficiency of our results. For the sake of brevity, whenever time complexity was discussed, we mean worst-case time complexity.

2. Preliminary
In this section, we briefly describe partial results of [16] which are necessarily referred to in this paper. For the sake of referential convenience as well as readability, we also make use of the symbols in [16]. As assumed in [16], let s and 
, 
, …, 
 be the source node and m (not necessarily distinct) destination nodes, respectively, in an n-cube such that s  {
, 
, …, 
}, where m  n. Without loss of generality, 
 
 may be assumed because hypercubes are node symmetric. A one-to-one mapping, named routing function, : D  I was proposed in [16], where D  {
, 
, …, 
} is a multiset and I is a set of m distinct integers from 1 to n. It should be noted that multiple occurrences of an identical element are allowed in a multiset.

Given a routing function : D I, we intend to construct m disjoint path 
, 
, …, 
 from s to 
, 
, …, 
, respectively, such that 
 is the second node (i.e. the node next to s) of 
, for all 1  i  m, where e
 
 
 for all 1  j  n. Let d
 denote the jth bit (from the left) of d
 for all 1  j  n, i.e. d
  d
d
  d
 was assumed. In order to make 
 as short as possible, we prefer 
 because 
 is included in a shortest path from s to d
. In fact, when 
 for all 1  i  m, a procedure Paths1(, m, n, D, I) which can produce all shortest 
, 
, …, 
 have been proposed in [16] such that its time and space complexity are both optimal O(mn). Let 
 denote the number of bit 1 in the label of d
. The following lemma will be useful in the rest of this paper.

Lemma 1

[16]
Given a routing function  such that 
 for all , then  can produce  disjoint paths 
, 
, …, 
 from  to 
, 
, …, 
, respectively, in an -cube so that 
 is shortest with length 
 for all .

Refer to [16], when the set I was extended to {1, 2, …, n}, the partial routing function resulted. Given a partial routing function  : {
, 
, …, 
}  {1, 2, …, n}, we can obtain a routing function : D  { (
),  (
), …,  (
)} by letting (d
)  (d
) for all 1  i  m. As defined in [16], a partial routing function is maximal if 
 
 for every partial routing function 
 : {
, 
, …, 
}  {1, 2, …, n}, where 
. It should be noted that a maximal partial routing function  : {
, 
, …, 
}  {1, 2, …, n} with 
 m makes sure 
 for all 1  i  m, and hence 
, which implies that all shortest 
, 
, …, 
 can be produced by Lemma 1. As shown in [16], it takes O(mn
) time to find a maximal .

3. Optimal disjoint paths in an -fcube
Suppose that s and 
, 
, …, 
 are the source node and m (not necessarily distinct) target nodes, respectively, in an n-fcube such that s  {
, 
, …, 
}, where m  . Without loss of generality, we may assume that 
 
 is the origin because the n-fcube is node symmetric. In this section, it will be shown that m disjoint paths R
, R
, …, R
 from s to 
, 
, …, 
, respectively, in the n-fcube can be constructed in O(
) and O(
 log 
) time for odd and even n, respectively, so that both of their total length and maximal length (in the worst case) are minimized. In addition, each 
 is either shortest or nearly shortest for all 1  i  m. Since an n- fcube is no longer bipartite in case of even n, we will propose a new partial routing function for helping the construction, as described in Section 3.2.

According to our construction method, each 
 is first mapped to a node d
 in an ()-cube for all 1  i  m by making the links of the ()th dimension of ()-cube take the place of the complement links of the n-fcube. The idea of node-mapping comes from the observations that any shortest path and nearly shortest path in a folded hypercube contains at most one and two complement links, respectively. Then, by the aid of partial routing functions and procedure Paths1, m disjoint paths 
, 
, …, 
 from 0
 to 
, 
, …, 
, respectively, can be constructed in the ()-cube. As shown later, each 
 can be derived from 
 for all 1  i  m such that R
, R
, …, R
 are optimal and mutually disjoint. In the rest of this section, we first show how the node-mapping works, then how 
 and 
 are constructed for odd and even n, individually. At last, we describe our main result formally.

Let V
 and V
 be the two node sets of an n-fcube and an ()-cube, respectively. The following two node-mappings have been defined in [19] previously.

Definition 1

[19]
Let  : V
  V
 be a node-mapping which maps a node x  x
x
  x
  V
 to a node u  u
u
  u
  V
 such that u
 and u
 x
 for all 1  k  n if  , u
 and u
 for all 1  k  n if , and 
 
 if  and n is odd, where x
, u
, u
  {0, 1} for all 1  k  n.

Definition 2

[19]
Let  : V
  V
 be a node-mapping which maps a node u  u
u
  u
  V
 to a node x  x
x
  x
  V
 such that either x
 u
 if u
, or x
 else (u
), for all 1  k  n.

Let c
 (
) for all 1  i  m. It is easy to check that e
 (resp. 1
) is included in a shortest path from s to 
 in an n-fcube if and only if c
 (resp. c
), where 1  k  n. In addition, we have both 
(s, 
)   and (c
)  
 if 
 for odd n, where dist
(s, 
) is the distance between s and 
 in the n-fcube. For any two nodes u and v in the ()-cube, it is easy to verify that (u) (v) if and only if u  v or 
 
, i.e. (u)  (v) if and only if u  v and u  
 
, where 
 
 for all 1  k  . The construction of disjoint paths in the n-fcube depends on the parity of n, i.e. odd or even.

3.1. When  is odd
Suppose that : {c
, c
, …, c
}  {1, 2, …, } is a partial routing function with  
, where 0  r  m. The following lemma describes a condition which never takes place for a maximal , and gives us a hand with the construction of disjoint paths.

Lemma 2

If 
 and 
 for some , then  is not maximal.

Proof

Let 
: {c
, c
, …, c
}  {1, 2, …, } be a partial routing function such that 
(c
) (c
), 
(c
) (c
), and 
(c
) (c
) for all 1  i  {w, z}  m. We have  
 
, and hence  is not maximal, because of 
 (
)  (
)  (
)  (
) . □

We assume that  is maximal in the rest of this section. Without loss of generality, we may assume that 
 for all 1  i  r and 
 for all   j  m. Moreover, we assume c
 (i.e. 
) for all 1  i   and 
 for all   j  , where 0     r and r     m. As shown below, we first obtain the node d
 and, possibly, its predecessor 
 within 
 (for constructing the non-shortest 
) in the ()-cube from c
 or 
, where 1  i  m. Then, the constructions of 
 and 
 are described in detail. For all 1  i  , in order to ensure 
, we either let d
 and d
 for all 1  k  n if (c
)   and 
, or let d
 and d
 for all 1  k  n else (either (c
)  or ((c
)   and 
)). For all   i  r, let d
 c
.

For all   j  , in order to ensure 
, we either let d
=c
 and 
 if 
, or let d
 
 and 
 
 else (
), where 
 is a neighbor of c
 such that 
 and 
. Since there are 
 choices for 
, we can find the required 
 because of 
, as shown below. For all 1  i  , we have 
 because otherwise 
 and 
 make  not maximal, which is impossible, by Lemma 2 (substitute j and i for w and z, respectively). Since 
, we have    because otherwise (r ) there exists k  {(c
), (c
), …, (c
)} such that c
, where 1  k  . If k (c
) for some   z  m, then 
 c
 and 
 
 make  not maximal, which is impossible, by Lemma 2 (substitute j for w). On the other hand (k  (c
) for all  z  m), we have  
, and hence  is not maximal, which is impossible again, because of 
 c
, where 
 is the same as  except letting 
(c
)  k. Since j  m  , we have 
.

For all   j  m, let d
 c
 and 
 d
d
  
(1 
)
  d
, i.e. 
 and d
 are adjacent and different only at the (c
)th bit. It is not difficult to verify that (d
)  
 for all 1  i  m and (
, d
) is a link in the ()-cube for all  j  m. The following lemma describes the construction of disjoint paths 
, 
, …, 
.

Lemma 3

In an ()-cube,  disjoint paths 
, 
, …, 
 from 
 to 
, 
, …, 
, respectively, can be constructed in 
 time so that 
 is shortest with length 
 for all 1 , and 
 has length 
 for all . In addition, the subpath 
 of 
 from 
 
 to 
 is shortest with length 
.

Proof

For all +1  j  m, since 
, we have (1 
)  and 
. Let : {
, 
, …, d
, 
, …, 
}  {(c
), (c
), …, (c
)} be a routing function such that (d
) (c
) for all 1  i  r and  (
) (c
) for all   j  m. We have 
 for all 1  i  , 
 for all  i  r, 
 for all   j  , and 
 (1 
)  for all  j  m. By Lemma 1, Paths1(, m, , {
, 
, …, d
, 
, …, 
}, {(c
), (c
), …, (c
)}) can produce m disjoint paths 
, 
, …, Q
, 
, …, 
 from 0
 
 to 
, 
, …, d
, 
, …, 
, respectively, in an ()-cube so that 
 and 
 are both shortest with lengths 
 and 
, respectively, for all  and  . For all  , construct 
 as the combination of 
 and a link (
, d
), and 
 has length 
.

Since 
, 
, …, Q
, 
, …, 
 are disjoint, we have 
, 
, …, 
 disjoint to each other because (A) 
  {
, 
, …, d
} for all   j  m, (B) 
  
 for all   w  z  m, and (C) d
 is not included internally in 
, 
, …, Q
 and not included in 
, 
, …, 
 for all   j  m, as shown below. For all   j  , we have 
  {
, 
, …, d
} because of  (
)  (
)  { (
),  (
), …, (d
)}. Since 
 ensures 
 dist
(s, 
)  for all   i  r, we have 
, which implies 
  {d
, d
, …, d
}. For all  +1  j  m, we have 
  {
, 
, …, d
} because otherwise (
 for some   w  m and 1  z  r) we have 
 and 
(1 
) . Since (c
)  (c
), we have 
, which implies 
. Since 
, Lemma 2 makes  not maximal, which contradicts to our assumptions. Hence, the condition (A) holds.

Since  (
)  (
)  { (
),  (
 
), …,  (
)}  { (
),  (
 
), …,  (
)} for all   j  , we have  (
)   (
) for all   w  z  , which implies 
  
. We have 
  
 for all  w  z  m because otherwise (
 for some  w  z  m) we have 
 (1 
) , which implies 
 because of (c
)  (c
). Since 
 and 
 
, Lemma 2 makes  not maximal, which contradicts to our assumptions. For all  z  m, we have 
   because 
   (by assumptions) and 
 ensures 
 dist
(s, 
)  . The condition (B) holds because 
 and 
 ensure 
  
 for all   w  .

For all   j  , d
 is not included internally in 
, 
, …, Q
 and not included in 
, 
 
, …, 
, as shown below. By assumptions, we have either d
 c
 or d
 
. The latter ensures 
 () 
 () , which implies d
 is not included internally in 
, 
, …, Q
 and not included in 
, 
 
, …, 
 because they are all shortest with   , where u is a node included in 
, 
, …, Q
, 
, …, 
. In the former case (d
 c
), we have 
, which makes d
 not included internally in Q
, Q
, …, Q
 because they are all shortest with   , where u is a node included in Q
, Q
, …, Q
. Let 
 be included in 
 for all 1  i  m, where 1  k
  . Since 
 is shortest for all 1  i  r, we have 
, and hence 
 because of 
 and d
 for all     r. We have d
 not included internally in 
, 
, …, Q
 because otherwise (d
 is included internally in Q
 for some 1  w  ) shortest Q
 ensures 
, which implies 
. Since 
 for all 1  i  {w}  r and 
 ensures 
, we have  
  
, which contradicts to that  is maximal, where 
 : {c
, c
, …, c
}  {1, 2, …, } is a partial routing function such that 
(c
)  k
 for all 1  i  {w, j}  m, 
(c
)  k
, and 
(c
)=k
. We have d
 not included in 
, 
 
, …, 
 because otherwise (d
 is included in 
 for some   z  m) shortest 
 ensures 
, which implies 
. Since 
 for all 1  i  r, we have  
  
 
, which contradicts to that  is maximal, where 
 : {c
, c
, …, c
}  {1, 2, …, } is a partial routing function such that 
(c
)=k
 for all 1  i  {z, j}  m, 
(c
)  k
, and 
(c
)  k
.

The condition (C) holds because d
 is not included internally in 
, 
, …, Q
 and not included in 
, 
 
, …, 
 for all  +1  j  m, as shown below. We have d
 not included internally in 
, 
, …, Q
 as well as not included in 
, 
 
, …, 
 similarly as the case of d
=c
 for   j   above. We claim that d
 is not included internally in Q
, Q
, …, Q
. If it is not the case, i.e. d
 is included internally in Q
 for some  +1  w  r, then shortest Q
 ensures 
 and 
, which implies 
 and 
, respectively. Let 
 : {
, 
, …, 
, …, 
, …, 
}  {1, 2, …, } be a partial routing function such that 
, 
, 
 and 
 (
)  k
 for all 1  i  {w, j}  m, 
 (
)  k
, and 
 (
)  k
. In other words, 
 was obtained from  by just exchanging c
 and c
, and hence 
 and 
 were exchanged accordingly. Since 
 for all 1  i  {w}  r and 
, we have  
, which implies 
 for all   j  m and  
 
 because  is maximal. Since 
 for all 1  i  m, we can substitute 
 for  and carry out the construction above. It should be noted that all of the arguments remain correct even though the case of 
 will cause the value of  to be increased by one after the substitution. By repeating the substitution process, it will finally stop with d
 not included internally in Q
, Q
, …, Q
 because each substitution makes 
, i.e. decreases the total number of bits 1 contained in the labels of c
, c
, …, c
. Since each c
 can be exchanged at most 1 times for  w  r, the procedure Paths1 will be executed at most ()  (1) times. Hence, it takes ()  (1)  O(mn)  O(
n) time to obtain the required 
, 
, …, 
.  □

It is easy to verify that for every link (u, v) in an ()-cube, there is a link ((u), (v)) in an n-fcube. For 1  i  m, let 
 be constructed as follows: For each link (u, v) in 
, we have link ((u), (v)) included in 
. Since (0
) =s and (d
)  
, 
 is a path from s to 
 in an n-fcube because 
 is a path from 0
 to d
 in the ()-cube. In addition, 
 and 
 have the same length. The following lemma describes the disjoint property of R
, R
, …, R
.

Lemma 4

In an -fcube, 
, 
, …, 
 from  to 
, 
, …, 
, respectively, are mutually disjoint and each 
 is either shortest with length 
(s, 
) if 
, or nearly shortest with length 
(s, 
)  else (
) for all 1  i  m.

Proof

Since R
, R
, …, R
 were obtained from 
, 
, …, 
 of Lemma 3, respectively, it suffices to show that R
, R
, …, R
 are mutually disjoint, 
 is shortest with length dist
(s, 
) for all 1  i  r, and R
 is nearly shortest with length dist
(s, 
) for all   j  m. By Lemma 3, 
 has length 
 for all 1  i  r, and hence 
 has length 
. In addition, 
 has length 
 for all   j  m, and hence R
 has length 
+1. For all 1  i  , since 
 ensures dist
(s, 
)  and either 
 or 
, we have 
, which implies that 
 has length 
 dist
(s, 
), and hence it is shortest. For all  +1  i  r, 
 has length 
(s, 
), and hence it is shortest. For all   j  , since 
, 
, and either 
 or 
 
, we have 
, and hence R
 has length 
 dist
(s, 
) . For all  j  m, since 
, R
 has length 
(s, 
). Each R
 is nearly shortest for all   j  m because R
 has length dist
(s, 
) and the n-fcube is bipartite for odd n (see [32]).

We have R
, R
, …, R
 disjoint to each other because all the nodes included internally in R
, R
, …, R
 are distinct to each other and all of 
, 
, …, 
 are not included internally in R
, R
, …, R
, as show below. Let b
 and b
 be two nodes included internally in Q
 and Q
, respectively, where 1  w  z  m. Since 
(d
) for all 1  i  m, it suffices to show that (b
)  (b
) and (d
)  (b
). We have (b
)  (b
) because of b
  b
 and b
  
 
, as shown below. Since Lemma 3 ensures that 
, 
, …, 
 are disjoint to each other, we have b
  b
. By assumptions, we have  (
)  (
)   (
)  (
) for all   p  q  , which implies (b
)  (b
), and hence b
  
 
, if b
, b
  {
, 
, …, 
}. On the other hand, let b
  {
, 
, …, 
} without loss of generality, we have 
   (i.e. 
 
) because by Lemma 3, Q
 is shortest with length 
   if 1  w  r, 
 is shortest with length 
 if   w  , and 
 is shortest with length 
   if   w  m. We have b
  
 
 because 
 
 was ensured by 
 
 
 () 
 ()  if b
 for some   j  , and 
 
 else (b
  {
, 
, …, 
}).

For all 1  i  m, we have d
  b
 because 
, 
, …, 
 are mutually disjoint by Lemma 3. We have (d
)  (b
) because of d
  
 
, as shown below. For all 1  i  , we have 
 and (d
)  { (
),  (
), …,  (
)}  { (
),  (
), …,  (
)} by assumptions. The latter implies (d
)   (
) (b
), and hence d
  
 
, if b
 for some   z  . On the other hand, we have d
  
 
 because of 
 
 if b
  {
, 
, …, 
}. For all   i  r and   j  m, we have 
   and 
  , which implies d
  
 
 and d
  
 
 because of 
 
 
 if b
 for some   z  , and 
 
 else (b
  {
, 
, …, 
}). For all   j  , we have either d
 c
 or d
 
 by assumptions. If d
 c
, then we have 
, which implies d
  
 
 similarly. On the other hand (d
 
), we have d
  
 
 because otherwise (d
 
 for some 1  w  m) we have 
 
 d
 
, and hence that c
 was included internally in Q
, which is impossible (please refer to the case of d
 not included internally in 
, 
, …, 
, as shown in the proof of Lemma 3).  □

If 
, then we have c
 (
) 
, which implies 
. Lemma 4 ensures that the length of 
 is , where 1  i  m. On the other hand (
), Lemma 4 ensures that the length of 
 is at most dist
(s, 
)+2  . Since there exists a case in [4] such that its maximal length is not less than , the maximal length of R
, R
, …, R
 is minimized in the worst case. The total length of R
, R
, …, R
, i.e. 2  (r)
, is minimized, as shown below. Since an n-fcube is bipartite for odd n (see [32]), the lengths of all the paths from a node to another have the same parity, and hence the length of a nearly shortest (or second shortest) path must be equal to the distance (between the two end nodes) plus two. If there exist m disjoint paths 
, 
, …, 
 from s to 
, 
, …, 
, respectively, so that their total length is less than that of R
, R
, …, R
, then we have 
 shortest paths in 
, 
, …, 
. Define a partial routing function 
 : {c
, c
, …, c
}  {1, 2, …, } as follows: 
(c
)  k
 (resp. 
(c
) ) if 
 (resp. 1
) is included in 
 for all 1  i  m. If 
 is shortest, then we have either 
 or 
, where 1  i  m. It follows that we have  
  
, which contradicts to that  is maximal. Since it takes at most O(
) node comparisons to determine 
, 
 
, …, 
, we need at most O(mn
n) to obtain the required R
, R
, …, R
 because the computation of a maximal  takes O(mn
) time and the construction of 
, 
, …, 
 takes O(
n) time. The following lemma concludes the results above.

Lemma 5

Given non-origin nodes 
, 
, …, 
 in an -fcube,  disjoint paths 
, 
, …, 
 from  to 
, 
, …, 
, respectively, can be obtained in (
) time so that both of their total length and maximal length (in the worst case) are minimized, where    and n is odd. In addition, each 
 is either shortest or nearly shortest with length not greater than +1 for all 1  i  m.

3.2. When  is even
For even n, we have 
 and 
 for all , where n/2 is the diameter of an n-fcube. It should be noted that 
 holds if and only if 
. Let 
 denote the length of a nearly shortest (i.e. second shortest) path from s to t
 in an n-fcube. It is easy to verify that we have either 
 if 
, or 
 else. Suppose that 
 is a partial routing function. An  was said to be optimal if 
 for any partial routing function 
, where 
 and 
 for all 1  and 1 . Please refer to the Appendix, an optimal  can be computed in 
 time by solving a corresponding maximum weighted bipartite matching problem. The following lemma describes a condition which never takes place for an optimal , and gives us a hand with the construction of disjoint paths.

Lemma 6

If 
 and 
 for some 1 , then  is not optimal.

Proof

Obviously, we have 
 and 
. Since 
, we have 
. On the other hand, we have 
 because of 
 and 
. Let 
 be a partial routing function such that 
, and 
 for all 1 . We have 
, and hence  is not optimal, because of 
. □

We assume that  is optimal in the rest of this section. Without loss of generality, we may assume that 
 for all 1  and 
 for all , where . Moreover, we assume 
 for all , where . For all 1  and , we let 
 and 
. For all , we let 
 
. For all , we let 
. Obviously, 
 is a link in the -cube. It is easy to verify that 
 for all 1 . The following lemma describes the construction of disjoint paths 
.

Lemma 7

In an ()-cube,  disjoint paths 
 from 
 to 
, respectively, can be constructed in 
 time so that 
 and 
 are shortest with lengths 
 and 
, respectively, for all 1  and , and 
 has length 
 for all . In addition, the subpath 
 of 
 from 
 to 
 is shortest with length 
.

Proof

Let 
 be a routing function such that 
 for all 
 for all , and 
 for all . We have 
, and 
. By Lemma 1, Paths1 
 can produce  disjoint paths 
, 
 from 
 to 
, respectively, in an ()-cube so that 
, Q
, and 
 are all shortest with lengths 
, and 
, respectively. For all , construct 
 as the combination of 
 and a link 
, and 
 has length 
.

Since 
 are disjoint, we have 
 disjoint to each other because (A) 
 for all , (B) 
 for all , and (C) 
 is not included internally in 
 and not included in 
 for all , as shown below. Since 
 
 for all  and , we have 
, which implies 
. The condition (A) holds because otherwise (
 for some ) we have 
 and 
. The former ensures 
 because of 
. It follows that we have 
 and 
, and hence  is not optimal, which is impossible, by Lemma 6 (substitute j for w). The condition (B) holds because otherwise (
 for some ) we have 
, which implies 
 because of 
. It follows that we have 
 and 
, and hence  is not optimal, which is impossible, by Lemma 6.

Let 
 be included in 
 for all 1 , where 1  k
  . Since Q
 and Q
 are shortest for all 1  i  r and r+1     , we have 
 and 
, which implies 
 and 
, respectively. For all , we have 
 not included in 
, 
, …, 
 because otherwise (
 is included in 
 for some ) shortest 
 ensures 
, which implies 
, which is impossible, as shown below. Let 
: 
 be a partial routing function such that 
 for all 1 
, and 
. Since 
 for all 1 , optimal  ensures 
, which implies 
.

The condition (C) holds because 
 is not included internally in 
 for all , as explained below. We have 
 not included internally in 
 because otherwise (
 is included in 
 for some ) shortest 
 ensures 
, which implies 
, which is impossible, because optimal  ensures 
 (as shown above), and hence 
. It should be noted that 
 is not included internally in 
 with 
 for all 1  . If it is not the case, i.e. 
 is included internally in 
 with 
 for some 1  w  r, then it leads to a contradiction, as shown below. Since shortest Q
 ensures 
, we have 
. Let 
 be a partial routing function such that 
 for all 1   
, and 
. Since 
 for all 1  and 
 for all , we have 
   
. Moreover, since 
, 
, 
, and 
, we have 
. Since 
, we have 
, which implies 
, and hence 
, which contradicts to that  is optimal.

For all   1  j  m, we claim that 
 is not included internally in Q
 with 
    for all 1  i  r. If it is not the case, i.e. 
 is included internally in Q
 with 
 for some 1  w  r, then shortest Q
 ensures 
 and 
, which implies 
 and 
, respectively. Let 
 be a partial routing function such that 
 and 
 for all 1 
, and 
. In other words, 
 was obtained from  by just exchanging c
 and c
, and hence t
 and t
 were exchanged accordingly. Since 
 for all 1  and 
, optimal  ensures 
 for all  and 
 because of 
 and 
. Since 
 for all 1 , we can substitute 
 for  and carry out the construction above. By repeating the substitution process, it will finally stop with 
 not included internally in 
, 
, …, Q
 because each substitution makes 
, i.e. decreases the total number of bits 1 contained in the labels of 
. Since each c
 can be exchanged at most  times for 1 , the procedure Paths1 will be executed at most  times. Hence, it takes 
 time to obtain the required 
, 
, …, 
.  □

For 1  i  m, let 
 be constructed as follows: For each link (u, v) in Q
, we have link ((u), (v)) included in 
. Since 
 and 
, 
 is a path from s to 
 in an n-fcube because Q
 is a path from 0
 to 
 in the ()-cube. In addition, 
 and Q
 have the same length. The following lemma makes sure their disjoint property.

Lemma 8

In an -fcube, 
 from  to 
, respectively, are mutually disjoint and each 
 is either shortest with length 
 if 
, or nearly shortest with lengths 
 and 
, respectively, for 
 and 
 else 
, for all .

Proof

Since 
 were obtained from 
 of Lemma 7, respectively, it suffices to show that 
 are mutually disjoint and 
 is shortest with length dist
 (s, t
) for all 1  i  r, 
 is nearly shortest with length 
 for all , and 
 is nearly shortest with length 
 for all . By Lemma 7, 
 has length 
 for all 1  i  r, Q
 has length 
 for all , and 
 has length 
 for all . It follows that 
 has length 
, 
 has length 
, and 
 has length 
. Since 
 has length 
 is shortest. Since 
 has length 
 
 is nearly shortest because 
 ensures 
. Since 
 has length 
, hence 
 is nearly shortest because 
 ensures 
.

We have 
, 
, …, 
 disjoint to each other because all the nodes included internally in 
 are distinct to each other and all of 
 are not included internally in 
, as show below. Let 
 and 
 be two nodes included internally in 
 and 
, respectively, where . Since 
 for all 1  i  m, it suffices to show that (b
) (b
) and  (
) (b
). We have b
 b
 and 
 b
 because Lemma 7 ensures that 
, 
, …, 
 are disjoint to each other. Since Q
 is shortest with 
 for all 1  i  r, Q
 is shortest with 
 for all      , and 
 is shortest with 
 for all , we have 
 and 
 
 (i.e. 
), which implies 
 
. It follows that we have 
 
, which implies 
. We have 
 because of 
 
, as explained below. For all 1    and , we have 
 and 
, which implies 
 
 and 
 
, respectively, because of 
 
. For all      , we have 
 
 because otherwise (
 
 for some 1  w  m) it leads to a contradiction, as shown below. Let 
 be included in Q
 for all 1  i  m, where 1  k
  . Since 
 
 and 
 
, we have c
, which implies 
 because 
 are all shortest. Since 
 and 
 is shortest with 
 for all 1  i  r, we have b
 not included internally in Q
, and hence we have   w  m. Let 
: 
 be a partial routing function such that 
 for all 1  i  r, 
 
 for all   p  {, w}  m, 
  
, and 
 = 
. Since 
 is shortest, we have 
 and hence 
, which implies 
. Since 
 for all   p {}  m, we have 
. Since 
 and 
, we have  
  
, and hence  
, which contradicts to that  is optimal.  □

For all 1  i  m, if 
, then Lemma 8 ensures that 
 is either shortest with length 
, or nearly shortest with length 
. On the other hand 
, Lemma 8 ensures that the 
 is either shortest with length 
, or nearly shortest with length 
. Hence, the length of 
 is not greater than . Since there exists a case in [4] such that its maximal length is not less than n/, the maximal length of 
 is minimized in the worst case.

For all 1  i  m, it is easy to verify that the length of 
 is equal to sw(
) by Lemma 8. It follows that the total length of 
, 
, …, 
 is equal to  
. We have that  
 is minimized, because if there exist m disjoint paths 
 from s to 
, respectively, so that their total length is less than that of 
, then it leads to a contradiction, as shown below. In the counter hypothesis, we have 
, where 
 is the length of 
 for all 1  i  m. Define a partial routing function 
 as follows: 
 (resp. 
) if 
 (resp. 1
) is included in 
 for all 1  i  m. If 
, then we have l
. On the other hand (
), 
 is not shortest and hence we have 
. Consequently, we have  
   
, which contradicts to that  is optimal. Since the computation of an optimal  needs O(mn
+n
  n) time, the following lemma concludes the results above.

Lemma 9

Given non-origin nodes 
 in an -fcube,  disjoint paths 
 from  to 
, respectively, can be obtained in  (
) time so that both of their total length and maximal length (in the worst case) are minimized, where  and  is even. In addition, each 
 is either shortest or nearly shortest with length not greater than  for all 1 .

Since folded hypercubes are node symmetric, Lemma 5, Lemma 9 ensure the following theorem, which is the main result of this paper.

Theorem 1

In an -dimensional folded hypercube, there exist  node-disjoint paths from one source node to other  (not necessarily distinct) target nodes so that not only is their total length minimized, but their maximal length is also minimized in the worst case, where . In addition, each path is either shortest or nearly shortest with length not greater than , where  is the diameter.

4. Concluding remarks
In this paper, we focus on the problem of constructing m disjoint paths from one source node to other m (not necessarily distinct) target nodes, respectively, in an n-fcube so that both of their total length and maximal length (in the worst case) are minimized, where m   . In addition, the construction can be done efficiently in 
 and 
 time, respectively, for odd and even n. When n is odd, the time complexity consists of two independent parts, i.e. O(mn
) and O(m
n). The first part covers the computation of a maximal partial routing function, while the second part covers the repetitive executions of procedure Paths1. The former have been shown unlikely to be improved because its equivalent maximum bipartite matching problem has been well studied [8]. Hence, the second part O(m
n) would be the only chance for improving efficiency, which also happens to the time complexity for even n because an optimal partial routing function was computed in O(mn
+n
logn) time and its equivalent maximum weighted bipartite matching problem has been well studied [8], too. Since procedure Paths1 has optimal O(mn) time, the O(m
n) would be improved if the number of executions of Paths1 is less than O(m
), which is currently under our study