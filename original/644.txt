Abstract
With the development of blockchain-based digital currencies, the security of digital wallets becomes more and more important. As far as we know, there is no safe lightweight wallet in hyperledger fabric. To solve the problem, we proposed a Trustzone-based Secure Lightweight Wallet for Hyperledger Fabric (hereafter referred to as TSLWHF). Firstly, we designed an Unspent Transaction Output (UTXO) set of transactions under blockchain and a signature verification mechanism for transactions, which made it possible to implement the lightweight wallet in hyperledger fabric. Then, we implemented a reliable protection mechanism for private keys and wallet’s address, which solved the problem that users’ information might be stolen or replaced. Meanwhile, the transaction verification results are guaranteed not to be tampered by hackers through verifying transactions in Trusted Execution Environment (TEE) and encrypting local block headers. Finally, to demonstrate utility, we deployed the system in hyperledger fabric and trustzone. Experiments showed that the wallet reduces the size of locally stored data while protecting the security of user’s assets. The time spent on TSLWHF to execute a transaction is 0.589s, which improves transaction’s performance compared to Bitcoin wallet.

Previous
Next 
Keywords
Hyperledger fabric

Trustzone

Simple payment verification

Lightweight wallet

1. Introduction
Since the birth of Bitcoin, blockchain [26], [31] has been used in more and more fields. Blockchain has been widely utilized in cyber security field, and combining with IoT, there are a lot of novel blockchain applications [29], [34]. For example, blockchain is used to handle unnecessary re-authentication in repeated handover among heterogeneous 5G network cells [33] and it also can be used to provide a decentralized authentication in distributed hospital network [35], vehicle network [9], smart homes [22] and industry 4.0 [21]. Nowadays, not only Bitcoin is improving [32], but also many new alternative currencies have been proposed, which have changed initial bitcoin design to achieve different goals. For example, Zerocash [4] is designed to provide anonymous services to users; Litecoin uses a new hash algorithm in the proof of work, which handles transactions with more concurrency and faster processing than Bitcoin; Ethereum extends the transaction semantics in bitcoin, enabling advanced transaction types through smart contracts. However, these public chains cannot be widely applied into most business scenarios due to bad performance and lack of support for regulation, by contrast, the permissioned blockchain provides a solution.

Meanwhile, as with electronic payment becomes more and more popular, permissioned blockchain equipped with wallet will play a significant role in diverse fields, such as smart home. Since the permissioned chain has better performance than public chain, which is vital to numerous devices in smart home. Moreover, by providing wallet robustness, devices of smart home will be safer. Currently, there are two main types of wallets, online wallets [15], [18] and hardware wallets [14]. The online wallet stores private key locally, and some operations on keys are also performed locally on the client. As a result, users’ keys and transaction signatures may be compromised by hackers. The hardware wallet is designed to provide a secure environment for key management and transaction signing. To illustrate, when a user sends a transaction request, the wallet API creates a corresponding transaction and sends it to the hardware that holds private key. The hardware signs the transaction and returns it to the wallet API with corresponding public key, and then the transaction will be broadcast to network. In this way, sensitive information will not leave the security environment of hardware wallet.

Actually, online wallets have many security issues [30] that will be harmful for users’ assets. And hardware wallets also have a problem that additional equipments are hard to carry around. Since ARM offers an extension of processor architecture called trustzone, now it allows to separate trusted and untrusted environments. By using trustzone [25], software wallets can achieve the same level security as hardware wallets. Due to more and more information contained on chain, most mobile devices cannot carry all the information on chain. In order to allow more people to participate in the Bitcoin system, Nakamoto has proposed a simple payment verification (SPV) mechanism, which enables the development of blockchain lightweight wallet. People also prefer to use lightweight wallets to manage their assets due to its convenience. However, existing SPV wallet only cryptographically protects its private key [10]. And if the target address of a transaction is tampered or replaced by an attacker, the assets contained in the transaction will directly go to attacker’s wallet. Meanwhile, block headers stored in local database can be tampered by an attacker, and if they are tampered, we cannot guarantee the result of verification is correct. In summary, it is important to design a secure lightweight wallet based on alliance chain which has better performance than public chain. Because it can protect user’s private key, wallet’s address, block information, and transaction payment verification.

This paper designs a secure lightweight wallet in hyperledger fabric [1]. We implemented a cryptocurrency system that improves transaction performance. Using ARM’s trustzone, we implemented a protection mechanism for the user’s public key, private key, and wallet’s address, as well as local smart contract’s execution results, block header information, and transaction verification process. Contributions are as follows:

(1)
In hyperledger fabric, we implemented a digital currency system based on the UTXO model. The system supports the Simple Payment Verification (SPV) mechanism without affecting the original functions of blockchain.

(2)
We designed a secure trustzone-based lightweight wallet for hyperledger fabric, which not only protects the process of generating private keys, public keys and addresses, but also protects the block header information synchronization process, transaction payment verification process and local block header information.

(3)
Based on hyperledger fabric and op-tee, we implemented the system and analyzed related security issues and overall overheads. Compared with ordinary light wallet, the system brings less overhead.

2. Related work
Wallet performance. There are much work that improve the transaction efficiency of digital wallets [31]. Teechain [23] uses a trusted execution environment to build a decentralized TEE network on top of blockchain system, reduces transactions that need to be processed on the chain and improves transaction throughput. Another smart contract blockchain [24] leverages proof of stake(POS) consensus to support lite mobile wallet.

The proposal in [24] is similar to ours, which simplifies block header and implements a light wallet with better performance, due to the performance advantage of POS over POW, and it supports more transaction types based on Qtum chain. TSLWHF is based on hyperledger fabric, which improves performance by setting access control mechanism and using better-performance consensus algorithms.

Wallet security. In response to attacks like [5], [7], [19], there has been extensive work in strengthening the security of wallets, such as hardware-based wallet [3], wallets encrypted with a special hash function [8], [12], [17], wallets based on trustzone [11], and wallets using social networks to manage private keys [13]. Besides, there is a wallet that focuses on verifying workflows [28].

Considering portability, TSLWHF uses trustzone to protect core processes on mobile devices, similar to another proposal [11]. Using trustzone to isolate trusted execution environment from normal execution environment, they implement a flexible and reliable Bitcoin wallet that can effectively defend against dictionary attacks and side channel attacks.

Enhance the security of trustzone. Current researches [6], [20] show that using trustzone to solve some practical security problems becomes a trend. There are also many enhancements to the security of trustzone. For example, SeCReT [16] adds a secure channel between trusted execution environment and normal execution environment to enhance access control on resources of TEE side. There is a trustzone-based implementation of Trusted Language Runtime (TLR) [27] for mobile applications, which protects .NET mobile applications’ confidentiality and integrity from operating system security vulnerabilities. TLR allows application’s security-sensitive logic to be separated from applications and isolated from operating system and other components. And Trustzone-based Real-Time Kernel Protection (TZ-RKP) [2], protection that uses ARM trustzone’s trusted execution environment to provide a real-time protection for common kernels, which effectively blocks attacks designed to modify or inject kernel binaries.

In these studies, most are aimed at full-node wallets. The need for a better, safer, and more portable light wallet is still not satisfied. Ordinary wallets that support simple payment verification are public-chain wallets, and the performance is unsatisfactory. At the same time, although some wallets can protect users’ private keys, they cannot protect block header information and transaction payment verification process.

3. Background
Hyperledger fabric. Fabric is a permissioned blockchain that executes distributed applications which are written in general-purpose programming languages. And it has no cryptocurrency built in. One of the most important differences between fabric and other blockchain platforms is that its consensus protocol is pluggable, enabling the platform to respond more effectively to different situations. A distributed application for fabric consists following two parts.

•
A smart contract, codes implementing application’s logic and running during execution phase. Smart contracts can be written in standard programming languages but do not have a direct access to ledger states, and they usually run within a container environment for isolation.

•
An endorsement policy, which is evaluated in validation phase. Untrusted application developers cannot choose or modify endorsement policies. An endorsement policy performs as a static library for transaction’s validation in Fabric, and it can merely be parameterized by chaincode.

Merkle tree. Merkle tree is commonly referred as a hash tree, which is a tree that stores hash values. A Merkle tree’s leaf node is the hash value of a data block (for example, a collection of files). A non-leaf node is a hash of its corresponding child nodes concatenated string. Before downloading files from p2p network, we firstly obtain the Merkle tree’s root from a trusted source. And once the root is obtained, we can download the Merkle tree from other sources that are not identified. Then, we will check the accepted Merkle tree with the trusted root. If the Merkle tree we obtained is corrupted or fake, we can download from another source until we get a Merkle tree that matches the root from trusted source. Here are some applications for the Merkle tree:

•
Digital signature. Originally, the Merkle tree was designed to handle Lamport one-time signatures efficiently. Each Lamport key can only be used to sign a message, but combined with Merkle tree, it can sign multiple messages, which has become an efficient digital signature framework called merkle signature scheme.

•
P2P network. In a P2P network, the Merkle tree is used to ensure that data blocks accepted by other nodes are not corrupted and not replaced, and even check that other nodes do not publish fake blocks.

•
Trusted computing. Trusted Computing introduces Trusted Platform (TPM) in hardware layer of computing platform, which actually provides a hardware-based Root of Trust (RoT) for the computing platform. TPM uses trust chain delivery mechanism to perform layer-by-layer integrity verification of local platform’s hardware and software from the trusted root, and it will save the verification result in platform configuration register (PCR) of the TPM.

Simplified payment verification. SPV is one of the payment verification systems in blockchain, which is a verification method for simple and fast payment. When a node in Bitcoin network packs a block, it verifies all transactions in the block. And, a transaction will receive 6 to 7 confirmations to ensure final completion of the transaction. This is the case, when using simple payment verification, as long as it is determined that a transaction has appeared in a certain block on the main chain, it can be proved that the transaction has been verified before. SPV belongs to blockchain payment verification, but not transaction verification. It only judges whether the transaction has been verified by nodes in blockchain and determines how many times it is confirmed. With simple payment verification, we can save a lot of storage space, even ordinary mobile devices have the ability to save block header information of the whole network locally.

UTXO. In existing blockchain systems, two transaction record modes are very popular, namely UTXO model and account/balance model. In account/balance model, when a transaction occurs, the system only checks whether the user’s balance is greater than the cost required by the transaction. If the balance is greater than the cost, the transaction can continue normally. In UTXO model, transactions are recorded as a structure with one or more inputs and one or more outputs.

Trustzone. ARM introduced Trustzone from the architecture of ARMv6, which is designed to provide a secure operating environment for mobile devices. Trustzone divides the working state of central processor into a normal world state and a safe world state. The state of the safe world is called TEE. And the normal world state is called REE (Rich Execution Environment). All applications that need to be isolated are implemented in TEE. These applications are called Trusted Application (TA). And ARM has enhanced Trustzone security and isolation in both ARMv7 and ARMv8 architectures.

Since the wallet is implemented in ARMv7, here is a brief introduction to trustzone under ARMv7. In ARMv7, CPU has different privilege levels at runtime, namely USR, FIQ/IRQ, SYS, ABT, SVC, UND, MON, HYP. ARMv7 architecture extends MON mode and HYP mode in original 7 modes. The system determines the source of requests and the target of transmissions only by determining the corresponding value in SCR register in Monitor mode. And the associated register value can only be modified when the system is in a safe world state.

4. Threat model and assumption
In order to ensure the safe implementation of TSLWHF wallet, we make the following assumptions:

(1)
Trustzone ensures that protected programs are safely executed. There is already improvement that can significantly enhance the security of Trustzone.

(2)
Hyperledger fabric ensures that the information obtained from full-nodes is trusted.

(3)
This paper does not consider attacks at network layer.

Threat model contains something may be malicious in Rich OS and the running environment. There are a lot of applications in Rich Execution Environment (REE), so the security of the environment is difficult to guarantee. The TSLWHF system may be attacked as follows:

(1)
The hacker can steal private key of users in memory, or even intercept data stream that generates private keys, or replace the code that generates private keys.

(2)
The hacker can replace or tamper with the code that generates wallet’s address, which causes users’ funds to flow to the hacker’s wallet.

(3)
The hacker can modify the local block header information and related smart contract’s execution results to interfere with the transaction verification process.

5. Design and implementation
5.1. Overview
This section introduces the design and key technologies of TSLWHF, which is a trustZone-based wallet for hyperledger fabric. The system architecture is divided into two parts. At the blockchain server part, we implement cryptographic currency based on UTXO model. This part includes the design for Unspent Transaction Output (UTXO) set of transactions and the design for the transaction verification mechanism.

The other part is the wallet client part. The architecture diagram of wallet client is shown in Fig. 1. This wallet has the ability to control a user’s access rights in a digital currency system, manage the user’s key and wallet’s address, track the user’s balance, create transactions, and verify transactions. We designed three modules, including secure keys and address module, secure synchronization module and secure verification module.

5.2. UTXO
In this system, users can only use Unspent Transaction Output. Under UTXO model, transaction data can be compressed to be very small by recording only transaction hash and obtaining the verification path of the corresponding transaction from other nodes. After fetching the hash and the path, the transaction can be verified. Since UTXO will decrease their value when a new UTXO is generated, which will inevitably have influence in the performance of executing and verifying transactions. So we simply design actions that will record the total number of UTXO, number of users, tokens and transactions in the chain. When a new transaction generated or a new account established, we will update the data. The consolidation strategy, as shown in Fig. 2, will firstly detect the number of user’s UTXO when users generate a transaction and then combine UTXO when the number of users higher than a specific number.

The cryptographic currency designed in this paper is based on hyperledger fabric. In this system, after receiving the receipt of transaction, endorsement node calls chaincode implementation function by local transaction simulator, and saves the transaction in state database in a form of Key/Value pairs. After consensus, the block that has been verified by local read-write set is stored locally in a form of file, and the location information associated with the block is stored in another state database to retrieve the transaction information in blockchain. The storage module of the system is implemented in chaincode layer. The system saves user’s information in local storage, and saves the hash value of user’s information on chain for verification of subsequent transactions. Local transactions are stored in a form of Merkle tree. The generated merkle root, timestamp, version number, and hash values of the preceding and succeeding blocks are saved as block header information.

5.3. Transaction verification mechanism
Since trading in fabric is only a carrier of transactions, the verification method of transactions is different from that of ordinary cryptographic currency. Firstly, the wallet creates a transaction and sends it to selected endorsement node. Secondly, after a endorsement node receives the transaction proposal, it will use client’s public key to verify the signature of the wallet in the transaction. And then, it calls chaincode to verify the validity of the transaction. Next, the endorsement node generates a signature and returns the result to the client. Finally, after the client receives enough transaction responses, it sends the transaction and signature to order node. The Order node sorts the information from the client and creates a block, then broadcast to all nodes of current channel. The process is shown in Fig. 3.

5.4. Secure keys and address module
For the user, the main function of wallet is to prove user’s identity to blockchain through wallet’s address and both public and private key saved by wallets. But there are many problems with digital wallet. For example, user’s private key can be stolen by hackers. In the process of generating wallet’s address, if a hacker steals the data stream and tampers with the generated wallet’s address, it will cause the user’s digital assets to flow into the hacker’s wallet. Once these situations occur, they will bring huge property loss to users. Wallet’s key and wallet’s address may be threatened as shown in Fig. 4.

•
Step 1: The wallet client saves a mnemonic word library (containing 2048 words) in secure storage in TEE. And then, the client generates a random mnemonic string by setting mnemonic generation rules and saves them in secure storage.

•
Step 2: Use the mnemonic as passwords, “mnemonic” as the salt (salt value), use 2048 as the number of repeated calculations, use HMAC-SHA512 random algorithm to generate a 512-bit (64-byte) random number and store it in secure storage. Intercept 32 bytes from the random number as the private key.

•
Step 3: Generate a public key according to the private key using elliptic hyperbolic algorithm, and then hash the public key twice to obtain public key hash.

•
Step 4: Add version numbers to the public key hash in step 3, obtain the public key hash with the version numbers, and hash again, then take the first 4 bits as check digits.

•
Step 5: Add the check digits in step 4 to the public key hash with the version numbers in step 4, and the final result is re-encoded as the wallet’s address.

SecCryptoTa. The application contains implementation ofmnemonic random number generation algorithm proposed by BIP39 specification, secp256k1 algorithm, and sha256 algorithm. OPTEE provides some cryptographic algorithms to be called on TEE side, such as SHA algorithm, AES algorithm, RSA algorithm and Base coding algorithm. From the beginning of the mnemonic’s generation, until the end of the generation of wallet’s address, the entire process is completed in TEE. Then, through SecStorTa, the generated auxiliary words, public and private keys, and the wallet’s address results are saved in secure storage of TEE. Meanwhile, the temporary data generated during the execution of the process is cleared.

SecStorTa. The application that operates secure storage file. We implemented TA_InvokeCommandEntryPoint interface on TEE side, and the corresponding call is implemented on the CA (client application) side. For example, through g_SecStorCa_CreateFile, the wallet can remotely call g_SecStorTa_CreateFile in trusted application. The generated public and private keys and the wallet’s address are saved in the secure storage on TEE side by TA (trusted application).

Based on above two trusted applications, we implemented three submodules, private key generator, public key generator and wallet’s address generator. Here is the whole process:

When a new user is created, private key generator receives a request. Private key generator calls the mnemonic algorithm in TA to generate private key, and then passes the private key to public key generator. Public key generator calls secp256k1 algorithm and sha256 algorithm to generate public key. Then, generator calls hash algorithm to generate the public key hash after receiving the public key. By compiling the user’s private key, public key, and wallet’s address generation program into a TEE image file, above processes are placed in TEE to ensure that those processes are completely isolated from normal world. Meanwhile, the seed, private key, public key and wallet’s address involved in the above processes are stored in the secure storage of the secure world. In subsequent process, the private key will never leave the trusted execution environment.

5.5. Secure synchronization module
The wallet client needs to save the blockchain information related to users, so the secure synchronization of blockchain information in wallet is extremely critical. Because the wallet client relies heavily on the block-related information sent by the blockchain node to which the client is connected. Once the hacker modifies the user-related block information saved locally by the wallet, it may affect the verification process of subsequent wallet’s transactions, which may cause the user’s transaction to be invalid and result in loss of user’s property.

We implemented network synchronization module to protect the synchronization process of blockchain information. The system is in a safe world state when synchronizing information, ensuring that the attacker cannot intercept the synchronization information during data transmission. In order to reduce the overhead of operating secure storage, it is not necessary to save all the synchronized information in the secure storage of TEE. The synchronized information is stored in the normal storage of normal world environment after encryption, ensuring that the attacker cannot tamper with the locally stored block information and then interferes with the result of the transaction verification.

Fig. 6 outlines the work flow of this process and more details are as follows:

•
Step 1: When the wallet is started or receives a synchronization command, it will switch to TEE to decrypt the block header from non-secure storage, obtain the height of the local block header and the local Merkel root.

•
Step 2: The wallet client (in a secure environment) obtains the information of the block header from N preset nodes by calling corresponding smart contract and compares it with the local Merkel root.

•
Step 3: If the local Merkel root is the same as most merkle roots, locally saved information is the latest blockchain information. The synchronization process is over.

•
Step 4: Encrypt the block header information obtained in step (3) in TEE then switch to REE to save the data in non-secure storage, and delete all temporary data when switching.

Since the system implemented in this paper is a digital currency system for fabric, there is no bifurcation. Therefore, when synchronizing the blockchain information, it only needs to ensure that the information on the chain is up to date. The basis of the synchronization module is to implement socket-related operations in TEE. we implemented TCPSocketTa in TEE and the corresponding CA interface for other modules to call.


Download : Download high-res image (252KB)
Download : Download full-size image
Fig. 6. The process to synchronize blockchain information.

TCPSocketTa. The application opens a socket stream file in TEE for reading and writing. We defined a new data structure, , containing the CA-side context and stream file descriptors. The process of the application has two steps. Step 1, client initiates a network connection request, the client passes parameters to TCPSocketTa, including ip, port number, address of the data buffer to be sent, size of data to be sent, address of sock_handle, and size of sock_handle. Step 2, trusted application which calls TCPSocketTa casts the data obtained from the socket to the corresponding block information type.

5.6. Secure verification module
For users, the biggest advantage of the light wallet is that users can participate in blockchain transaction network without having to maintain a full node. After a user initiate a transaction on the wallet client, the wallet needs to know whether the transaction is valid or not. Since the light wallet does not contain all the block information, how to let the user know whether the transaction is already on the chain is the key issue. So the user’s transaction needs to be verified. And since this paper implements the wallet system based on alliance chain and uses smart contracts, there is a case that the result of the smart contract execution may be failed, but the transaction is still on the chain. And hackers can exploit this vulnerability to compromise a user’s assets. Therefore, for the blockchain digital currency system using smart contracts, it is also necessary to verify the execution results of smart contracts while verifying transactions.

The process of transaction payment verification is as follows, among, Fig. 7 presents a simplified work flow:

•
Step 1: The wallet sends the relevant information (address, public key, transaction hash) of the transaction to nodes in fabric. The blockchain node matches the block where the transaction is located and replies the verification path of the transaction, and the merkle root of the block. Save as the standard Merkel root.

•
Step 2: The wallet calculates the corresponding Merkel root according to the transaction verification path in TEE.

•
Step 3: Decrypt the local block header information in a secure environment, obtain the standard Merkel root and compare it with the calculated Merkel root. If two roots are the same, it indicates that the transaction is already on the chain, otherwise the transaction does not exist or is not yet on the chain.

6. Security analysis
This section performs some security analysis on TSLWHF. The wallet’s client needs to meet three objectives, that are, ensuring the security of the private key, the security of the wallet’s address, and the security of the network synchronization process and the transaction payment verification process.

6.1. Security of private key
The wallet client uses chain verification signature at startup to start the system, that is, during the system startup process, the signature of the image is verified before the image is loaded. In this system, the image is loaded in the order of bootloader image files: TEE image file, Linux kernel image file, and Recover image file. Therefore, when a mobile device is started, key modules in the wallet client (i.e. user public key generation module, network synchronization module, transaction payment verification module) will be loaded before normal operating system. In the process of transaction, private key is always in TEE, and malicious operations in normal execution environment cannot affect any process related to the private key. After executing the process related to the private key, all related structures will be released, and temporary data will be cleared. So private key in TSLWHF is safe.

6.2. Security of address
The process of generating address is bound to the process of generating private key. Therefore, it is very difficult for the attacker to tamper with the generated wallet’s address by intercepting the data stream in the system. When a wallet initiates a transaction, it must include wallet’s address, so the hacker can deceive the user by replacing the wallet’s address in the transaction, which will cause the user’s property loss. In the system implemented in this paper, the wallet client in TEE sends a transaction to the blockchain server, so the process of assigning the wallet’s address to the transaction is also in TEE. In this way, the hacker can only attack the wallet’s address by intercepting socket packages, but this situation belongs to network layer attack which is not considered in the scope of this paper.

6.3. Security of the network synchronization and transaction payment verification
The hacker can steal a user’s assets by tampering with locally saved block header information or by destroying the transaction payment verification process. Both the above actions will result in the execution of wrong transaction. For the wallet client, it must ensure that locally saved block header information and transaction hash information associated with users are authentic, and the verification process of whether the transaction is paid must also be in TEE. If we keep the information synchronized from blockchain remote nodes in secure storage, it will add a lot of overhead to the entire wallet system. Therefore, the system synchronizes and encrypts this information in TEE, then the information will be saved in non-secure storage.

7. Evaluation
In this section, firstly, we analyze the storage overhead of each module of TSLWHF. In the wallet client, the user’s public and private keys (32 bytes, 65 bytes) and wallet addresses (25 bytes) need to be stored in the secure storage of OP-TEE’s trusted execution environment. Until May 27, 2019, the total number of blocks on Bitcoin chain has been 481,823, and the storage space consumed has been 210 GB. Since TSLWHF uses a simple payment verification mechanism, this mechanism allows the wallet to locally save all the block header information in the blockchain to verify whether the transaction has been paid. The block header in this system is only 72 bytes. Even if the number of blocks in this system grows to the same size as Bitcoin’s, the final storage space is only 35 MB. Ordinary mobile devices can provide such a large storage space, so it is feasible to deploy the wallet in the user’s mobile phone.

Secondly, we analyze the increased overhead that may exist in the client. Then, we carry out a set of experiments to demonstrate the efficiency of TSLWHF. We ran the experiments on a Linux workstation with 2.80 GHz Intel Core i5-8400 CPU, 8 GB of main memory. We built a 5-node hyperledger fabric network using docker. The version of hyperledger fabric is 1.0.0, the version of docker is 18.09.0 and the version of OP-TEE is 3.3.0.

On the client side, TEE-related operations generate overhead. The secure keys and address module, involving the encryption operation and the saving operation that saves the generated key information in secure storage, generate overhead. The secure synchronization module establishes a secure connection in TEE, which also creates large overhead. And the transaction payment verification module ensures that the wallet obtains the transaction hash from remote node and the merkle root calculation process is executed in TEE, which also contribute to the large overhead. It can be seen that the increased overhead mainly comes from the three trusted applications we implemented. So, we test the performance of the three trusted applications, including SecStorTa, SecCryptoTa and TCPSocketTa. Finally, we tested the trading performance of the system. Because the size of the information that the wallet synchronizes is at KB level, the size of input data we test is also at this level.

7.1. SecStorTa
We examine the cost of read and write operations by performing 5000 experiments on a series of data packets (i.e., 64B, 128B, 256B, 512B, 1 kB).

Table 1 shows that the efficiency of TSLWHF system operation safe storage is not so ideal. When the simulator is stable, the speed of writing to safe storage is 50 kB/s, and the speed of reading operation is 500 kB/s. In the same equipment, we test the efficiency of reading and writing local files in a normal environment. The write operation speed is 101 MB/s and the read operation speed is 180 MB/s. It can be seen that the reading and writing of secure storage does bring a lot of time overhead, but since the stored objects are relatively small, the key information of the user that needs to be stored in the secure storage is only 122 bytes. So it only takes 2.44 ms to write this data and 0.244 ms to read.


Download : Download high-res image (148KB)
Download : Download full-size image
Fig. 8. Trend of time overhead caused by secure encryption algorithms.


Table 1. Average time cost of reading and writing secure storage.

Transmitted data size (byte)	Read (ms)	Write (ms)
64	1.9	0.28
128	2.2	0.45
256	5.7	0.73
512	10.2	1.35
1024	20.2	2.4
7.2. SecCryptoTa
Due to the small time overhead caused by the encryption operation, when the size of input data is too small, the growth of time overhead cannot be displayed. So we changed the size of input data from 512B to 4 kB.

As shown in Fig. 8, the overhead of executing an encryption algorithm in TEE is much higher than in a normal execution environment. The trend of increasing time overhead is linear in the range from 512B to 4 kB as the amount of data increases. Increased time overhead is also at millisecond level.

7.3. TCPSocketTa
In order to minimize the impact of network latency on the test, when we were testing the transmission delay, we directly established a socket connection locally to test the time overhead of transmitting data. Since the files transmitted each time in the system are mostly transmitted in a form of block headers, the amount of data input each time is at MB level, but the size of a single block header is 72 bytes. Since we focus on assessing the speed of secure transmission here, so we think a similar but more general data set will be more useful. Hence, the size of our test data starts at 64 bytes and ends at 1024 bytes. The data size span is 64 bytes.

As shown in Fig. 9, compared with the normal execution environment, the overhead of establishing a secure TCP connection in TEE increases a lot. But since the size of the block header of the system is 72 bytes, the added overhead is also at millisecond level.


Download : Download high-res image (162KB)
Download : Download full-size image
Fig. 9. Trend of time overhead due to secure transmission.

7.4. Transaction performance test
Above, the overhead introduced by the three trusted applications in TSLWHF has been tested. Then, some basic overheads in the OP-TEE system are tested. For example, the startup time of TSLWHF is 1.967 s. Finally, we test the trading performance of the wallet. Directly constructed 5000 transactions, we tested the transaction costs in ordinary wallet and TSLWHF, the results are shown in Table 2.

In general, the overhead of SecCryptTa’s encryption operation and some cost of OP-TEE itself are negligible compared to the overhead of SecStorTa operation security storage and the overhead of TCPSocketTa’s establishing a secure transmission connection. Meanwhile, the overhead of synchronization and the increased overhead of using secure storage are also within the user’s acceptable range. Finally, the TSLWHF execution transaction increases the overhead by 0.332 s compared to the normal wallet in fabric. Nowadays it takes 10 min for a Bitcoin wallet to perform a transaction, including the process of transaction verification. Compared to Bitcoin, TSLWHF has improved transaction performance by a factor of 1000. Therefore, considering aspects above, we can say that TSLWHF may not bring a bad user experience.


Table 2. Performance overhead comparison.

Regular wallet	TSLWHF
Average transaction execution time	0.257 s	0.589 s
Average transaction payment	2.172 ms	3.574 ms
verification time
8. Conclusion and future work
We present a trustzone-based secure lightweight wallet for hyperledger fabric. Specifically, in hyperledger fabric, we implement a digital currency system that supports simple payment verification based on smart contracts. In the wallet client, we implement reliable protection for private key, public key, and wallet’s address, protection for information synchronization and protection for transaction payment verification. Compared to ordinary wallets in hyperledger fabric, TSLWHF creates a secure TCP connection and operates secure storage with overhead. Meanwhile, the TSLWHF executing transaction only increases 0.332s overhead, which does not affect user experience. The transaction execution time of TSLWHF is much less than that of Bitcoin.

However, this system also has some shortcomings as shown below:

•
We only made a transaction dump at chaincode layer, which actually increased the overhead. The next step is to modify the source code of hyperledger fabric, and directly convert the transaction type to UTXO model, which can greatly improve the transaction performance of the digital currency system.

•
The client is implemented on an emulator, the performance of the emulator is not stable, the next step is to port the client to a real hardware environment, such as the Raspberry Pi.