Abstract
The powerful resource advantage of the cloud provides a suitable computing environment for data processing. By transferring local computing to the cloud, the efficiency of data processing can be improved. However, the open cloud environment has defects in data privacy-preserving. In order to strengthen the protection of data privacy and ensure the security of multi-party interaction, we propose a privacy-preserving multi-party computing scheme for K-means clustering (PPMCK). PPMCK can preserve data privacy in the cloud and in the local side for each party from multi-party computing. In addition, PPMCK uses homomorphic encryption to protect data privacy. To support the division operation and ciphertext value size comparison with which homomorphic encryption cannot handle, the corresponding measurements are adopted, which make homomorphic encryption work smoothly. The experimental results demonstrate that PPMCK is effective in both data processing and privacy-preserving.


Keywords
K-means clustering
Homomorphic encryption
Privacy preserving
Secure multiparty computing

1. Introduction
Data mining is to extract predictable information hidden in a large number of data sets through algorithms. Through analyzing these data sets, making inductive reasoning, and potential models are mined to help decision-makers judge rationally [14], [15]. However, in the process of data analysis and collection, some personal privacy information, such as health information, purchase habits, transaction records, etc., are often be involved. Once the information is leaked, it will cause immeasurable consequences. Therefore, privacy-preserving in data mining needs to be paid close attention to.

K-means clustering is a useful algorithm form partition data into different categories [20]. The distance between the data in the same category should be very close, indicating the greatest similarity between them. Moreover, data mining is not only the calculation that only involves one user at the beginning, but now often requires the cooperation of multiple parties. In the case of multiparty collaboration, users of other parties often do not want anyone other than themselves to see their own relevant information. At this time, using secure multiparty computation (SMC) can deal with the problem well. The secure multiparty calculation is mainly aimed at the problem of how many participants can safely calculate a contract function without a trusted third party [12]. At the same time, each participant cannot obtain any input information from other parties except the computing results. SMC can not only fully realize the mutual cooperation of various participants, but also guarantee the confidentiality of personal data in the information sharing process. In this way, users can obtain the data value of the data without disclosing the original content of the data.

In recent years, cloud computing has developed rapidly. It has been widely used in various fields of big data utilization, especially in data mining [4], [16]. By transferring data computing and processing to the cloud, problems such as too long computing time in the local calculation process can be avoided, the powerful computing capability of the cloud can be easily and conveniently used, and the limitation of resource equipment can be avoided [3]. However, there is a major problem on the cloud server: Due to the open nature of cloud computing, users’ data privacy cannot be guaranteed. Sensitive information in the data may be leaked. Therefore, How to ensure the data privacy of users stored on the cloud servers and how to prevent data from being illegally used are two concerns within cloud computing.

The usual method is to encrypt the data by owners. However, after data encrypted by using the general encryption method, the availability of encrypted data has diminished because the encrypted data is ciphertext. Providing decrypting key directly to an honest-but-curious cloud server is one solution for data sharing, but there is no guarantee of data privacy breaches [9]. Therefore, how to preserve data privacy without reducing data controllability is a problem that needs to be considered at present [18].

This paper combines multiparty security computation with k-means clustering and proposes a secure multiparty computation k-means clustering based on privacy-preserving (PPMCK). The purpose is to protect data privacy through encryption and ensure the sensitive information of data will not be leaked during cloud computing and data mining. At the same time, the main operations in the algorithm are offloaded to the cloud to improve the overall computing efficiency. The general process is as follows: multiple participants encrypt the data first, then upload it to the cloud for computing, finally the cloud returns the clustering results to all parties. Moreover, in order to guarantee the controllability of encrypted data by participating users will not be greatly reduced, homomorphic encryption, which can be directly operated on ciphertext, is adopted as the data encryption method in PPMCK. In the secure multiparty computation k-means clustering based on privacy-preserving, the following issues are mainly concerned:

(1) Data is encrypted by homomorphic encryption. Direct operation on ciphertext can be permitted by homomorphic encryption.

(2) Considering how to avoid the limitation of homomorphic encryption, that is, to achieve ciphertext value comparison and calculation of ciphertext division which are not supported by homomorphic encryption.

We propose a privacy-preserving multi-party computingscheme for K-means clustering based on homomorphic encryption. The specific contributions are shown as follows:

•
Ensure the privacy of data while multiparty cooperation is used for data mining;

•
The computing efficiency is improved by transferring most of the calculations to the cloud;

•
The operations of ciphertext division and ciphertext comparison that is not supported by homomorphic encryption are converted into operations that can be supported by homomorphic encryption through other methods.

The rest of this paper is presented as follows: Section 2 discusses the related work. The relevant background knowledge is introduced in Section 3. In Section 4, PPMCK is described in detail. Then, related experiments in Section 5 and Section 6 show a discussion of PPMCK. Finally, the conclusion is shown in Section 7.

2. Related work
The privacy problem in the process of data mining has attracted more and more attention [8], [10]. Generally, there are two main methods to protect data privacy, one is to transform data and add disturbance, and the other is to use multi-party secure computing. In this paper, the data privacy-preserving method used is secure multi-party computing, which encrypts data by means of homomorphic encryption.

Gheid et al. [11] put forward a new k-means algorithm that does not need a password. The newly proposed k-means algorithm can guarantee privacy-preserving under a given security model without using any encryption method, and can deal with the problem of algorithm performance degradation caused by using encryption schemes in big data analysis. However, the k-means protocol proposed by them has a defect, that is, it can only work in a specific security model, and its limitations are relatively large. Erkin et al. [6] demonstrated the k-means privacy-preserving related to social networks, aiming at solving the privacy problem caused by users may regard the data needed to build social networks as sensitive personal information. The privacy-preserving in their research is related to secure multi-party computing in a semi-honest environment. Since the interaction environment in Erkin’s study is under a semi-honest model, there is also the possibility of leakage of user data privacy. Beye et al. [5] improved the algorithm presented by Erkin et al. [6], which uses the semi-honest model of homomorphic encryption along-with multi-party computing to protect privacy. It minimized user interaction, allowed offline users to cluster, and improved the overall efficiency by enabling efficient nonlinear operation. Vaidya et al. [25] explored the privacy-preserving k-means algorithm based on site entities. In the situation of sites with different attributes of a group of public entities, each site can protect its privacy information if it knows the cluster of each entity but does not know the attribute websites of other entities, so as to protect private information. Mohassel et al. [21] learned the k-means protocol based on privacy-preserving between different databases, aiming at protecting contextual privacy. Yi et al. [27] solved the problem that each party cannot make an equal contribution to k-means in the k-means clustering algorithm in a distributed database, which resulted in evil attack, and designed a multi-party k-means clustering protocol. Zhu et al. [28] designed a privacy-preserving k-means clustering scheme based on distributed data in P2P networks.

3. The background knowledge
This section mainly illustrates the background knowledge involved in PPMCK, including secure multi-party computation, k-means clustering, and homomorphic encryption.

3.1. Secure multi-party computation
Secure multi-party computation(SMC) [26] has a connection with the famous millionaire problem. The millionaire problem is referred to find the richer one between two millionaires without a trusted third party. After many original innovations by Oded Goldreich, Shaft Goldwasser, and other scholars [13], SMC has gradually developed into an important branch of cryptography.

SMC means that multiple participants work together to complete the computation task of a certain function under thepremise of protecting their secret inputs, and finally obtain their correct computation results. In SMC, it is necessary to ensure both accuracy of the computation and independence of the inputs, while not disclosing each input values to other members participating in the computation. It allows multiple data owners to carry out cooperative calculation under the condition of mutual distrust, output calculation results, and ensure that any party cannot obtain any other information except the due calculation results.

SMC has two security models. One is the semi-honest model another is the malicious model, [17]. In the semi-honest model, some participants will not strictly abide by the requirements of the agreement, and will record the input and output results, hoping to obtain relevant information from other participants. The malicious model refers to the fact that during the multiparty collaboration process, some participants do not comply with the requirements of the agreement at all, and enter incorrect information during the input process or interrupt operations during the collaboration process to obtain information about other participants. The biggest difference between these two models is whether it is a passive attack or an active attack in the process of obtaining information from other parties. The semi-honest model is a passive attack and the malicious model is an active attack.

3.2. K-means clustering
Cluster analysis is mainly accomplished through clustering. Clustering means divide a data set into multiple clusters. The rules of divisions are (1) to maximize the similarity between data in the same cluster, and (2) to minimize the similarity between data in different clusters. K-means is a kind of iterative clustering analysis algorithm that can deal with the clustering problem of data points in multi-dimensional space [19], the K is referred to randomly select K points as the clustering center points.

The traditional K-means clustering algorithm can be described: (1) randomly select K points from the data, take those K points as clustering center points; (2) compute the Euclidean distance between each data point and each seed clustering center, and assign each data point to the center by comparing the distances; (3) recalculate the centroid of each cluster based on the average value; (4) these two steps are iterated until the centroid position no longer changes. The pseudo-code of the K-means clustering algorithm is as follows:



Download : Download high-res image (172KB)
Download : Download full-size image
3.3. Homomorphic encryption
Homomorphic encryption (HE) [24] has one unique feature: the arithmetic operations performed on the ciphertext are equivalent to doing the same operation on the plaintext. This is the biggest feature and is one advantage of HE. However, HE also has its limitations, that is, the arithmetic operations it supports only include addition and multiplication, which are not supported for other operations, such as exponential and division. HE that supports addition has additive homomorphism, such as the Paillier algorithm [22]. HE that supports multiplication has multiplicative homomorphism, such as RSA algorithm [23]. Homomorphic encryption algorithm that satisfies both additive homomorphism and multiplicative homomorphism is called full homomorphic encryption (FHE) [7] that includes: (1) key generation algorithm; The key generation algorithm generates the keys for encryption and decryption. The input of key generation algorithm is the security parameter , and the output is the private key FHE.sk and the public key FHE.pk. The key generation process can be showed as . (2) encryption algorithm; The encryption algorithm outputs encrypted ciphertext FHE.ct based on plaintext FHE.pt and public key FHE.pk. The encryption process can be expressed as: . (3) decryption algorithm; The decryption algorithm decrypts the encrypted data after the calculation is completed. It takes the private key FHE.sk and the ciphertext FHE.ct as its inputs, then finally obtains the decrypted plaintext FHE.pt. The whole process can be showed as follows: . (4) evaluation algorithm. The evaluation algorithm is used to do calculation on the ciphertext. It is the core algorithm in the whole FHE. The evaluation algorithm takes FHE.ct and f as inputs, where f represents the operation function to be performed. The final result FHE.ot is the result of the operation. The whole process can be expressed as: .

4. System algorithm
This section specifically introduces PPMCK and the processing methods of the difficulties involved in PPMCK, including comparison of data values and division operation in ciphertext state.

4.1. Scheme preview
In case of data sensitive information disclosure in the data mining process, we propose PPMCK. Firstly, multiple data owners encrypt their respective data at the local side, and then upload the encrypted data to the cloud server. The server runs k-means algorithm to calculate the data in the ciphertext state. After the calculation, the cloud server returns the clustering result to the data owners. Finally, the data owners use the privacy-preserving weighted average problem (PPWAP) protocol to complete the recalculation of the clustering center according to the clustering results which are returned by the cloud, and obtain these desired results. The entire algorithm is shown in Fig. 1. What is more, revealing data privacy in the algorithm is easily carried out in a ciphertext state, so the whole algorithm completely protects the privacy of data.


Download : Download high-res image (378KB)
Download : Download full-size image
Fig. 1. The schematic diagram of PPMCK.

4.2. Ciphertext calculation
The difficulties of PPMCK include two aspects: calculating the nearest clustering center and recalculating the clustering center in the ciphertext state, i.e. ciphertext value comparison and ciphertext division calculation. Homomorphic encryption is used as the data encryption method in PPMCK, but it does not support ciphertext division and ciphertext comparison, so different methods are needed to adapt to solve the two problems. To deal with the problem of computing the nearest clustering center in ciphertext state, PPMCK uses order-preserving encryption. For the problem of recalculating the cluster centers, the method is referred as privacy-preserving weight average problem (PPWAP).

4.2.1. Comparison of encryption distance
In the process of assigning cluster points to data points, the data points are assigned to the nearest cluster center based on the Euclidean distance. In this paper, data value comparison is required in ciphertext state, but homomorphic encryption does not support this. Therefore, the order-preserving encryption algorithm based on coding tree is used to realize the value comparison of ciphertext.

Order-preserving encryption refers to the comparison of the value of ciphertext by converting plaintext into ciphertext encoding. The order of plaintext data will not change during the entire conversion process. The order-preserving encryption algorithm is implemented by order-preserving coding, which can accurately reflect the value relationship between ciphertexts. PPMCK adopts homomorphic encryption to encrypt data. The data needs to be processed in batches before encrypting, then a coding tree is constructed according to the value relation of the plaintext data, finally the ciphertext and the order-preserving code are uploaded to the cloud server. Algorithm 2 shows the order-preserving encryption process.



Download : Download high-res image (116KB)
Download : Download full-size image
In PPMCK, the coding tree is constructed according to B-tree. An m-order B-tree must comply with following properties:

(1) The root node has at least two children, excepting that there is only one keyword;

(2) The number j of keywords contained in each non-root node satisfies: . The number k of pointers to child nodes satisfies: ;

(3) For a B-tree containing n key nodes, its nodes can be represented , where  is a pointer to the sub-tree of the node,  is a keyword, and the plaintext data corresponding to  is less than that of corresponding to ;

Assuming that the height of a k-order coding tree is H, its encoding process is as follows: first let its coding length be L, and then the actual coding length of the keyword corresponding to the h-level node can be calculated by formula (1): (1)

Finally, use 1 to fill the code length to L at the end of the code, so the order-preserving encoding format for any keyword is: (2)

For an m-order order-preserving coding tree, the encoding rules are as follows:

(1) The keywords inside each node are sequentially coded as (0,1,2, …, m);

(2) The pointer for each non-leaf node is coded as (0,1,2, …, m) in sequence;

(3) Each code is expressed in binary, with a length of .

As shown in Fig. 2, it is a third-order coding tree, which is coded according to the above encoding rules, and the results are shown in Table 1. The final order-preserving ciphertext is the decimal form corresponding to the order-preserving encoding. Table 1 demonstrates that there is no data value size correlation between the order-preserving encoding generated based on the coding tree and the plaintext data to be encrypted, so it will not cause information leakage to the plaintext data. At the same time, the value of the order-preserving encoding completely corresponds to that of the plaintext data, which can accurately reflect the value size relationship between the plaintext data.


Table 1. The coding results of the third-order coding tree.

Plaintext (decimal)	Order-preserving encoding (binary)	Order-preserving ciphertext (decimal)
34	001111	15
85	011111	31
26	000011	3
52	010011	19
63	010111	23
91	100011	35
12	000000	0
30	000100	4
35	010000	16
44	010001	17
56	010100	20
70	011000	24
86	100000	32
89	100001	33
99	100100	36
4.2.2. Ciphertext division
Recalculating the centroid of each cluster according to the average value is the vital step for K-means. However, the average operation is not supported in homomorphic encryption. We use PPWAP to solve this problem. The weighted average problem (WAP) means that there are n participants using their values to calculate the average, but the entire process does not expose their private data. For example, two parties A and Z have a data pair (a,m) and (z,n), respectively. If they want to calculate jointly, a security protocol that can protect privacy is needed to complete the following functions: 
 
 
The above symbols indicate that participant A and participant Z provide inputs (a, m) and (z, n) respectively, and both parties obtain the output result through agreement. Suppose A owns data a and m, Z owns data z and n, and under the influence of PPWAP protocol, they calculate  together.  means encryption by the public key of A, and  means decryption by the private key of A. Similarly,  means encryption by the public key of Z, and  means decryption by the private key of Z.

The communication between A and Z for solving PPWAP under the semi-honest model and malicious model is as follows:

(1) Semi-honest model

Fig. 3 shows the process of solving PPWAP in the communication between A and Z under the semi-honest model. First, A encrypts a and m by using its own public key. And then sends the encrypted result to Z. Z generates two random numbers  and , and then calculates  and . According to the properties of homomorphic encryption: , . Then Z sends  and  to A, and A can get  after decryption. However, there is a problem under the semi-honest model. If Z has insufficient security awareness and the generated random number , then 
 
 
, and A cannot obtain the correct final result. Therefore, PPWAP under the malicious model is used in this paper.


Download : Download high-res image (202KB)
Download : Download full-size image
Fig. 3. PPWAP solution process under semi-honest model.

(2) Malicious model

Fig. 4 shows the process of solving PPWAP in the communication between A and Z under the malicious model. First, A and Z generate random numbers respectively, A generates , and Z generates , then A encrypts  and , and then sends the encrypted results  and  to Z. Similarly, Z also performs related encryption operations, and then sends the encrypted  and  to A. After that, the calculation of a can be obtained by homomorphic encryption property. After that, A calculates . From the properties of homomorphic encryption: . Then Z sends the calculated  to A, and A uses the private key to decrypt the data sent by Z to get . Then Z sends  to A, A gets  after decryption, and after simplification, it is also known that  is the

4.3. Privacy-preserving k-means clustering
The operation of the whole algorithm is carried out on the local side and on the cloud side, and most of the operations are carried out in the cloud. The specific process of the whole algorithm includes the following steps: (1) participants A and Z encode and encrypt their own data; (2) transmit the encoded results and encrypted data to the cloud respectively; (3) after the data sets uploaded to the cloud being integrated, the k-means algorithm is implemented according to algorithm 1. In the k-means, comparing order-preserving encoding value sizes is used to calculate the nearest clustering center according to Euclidean distance. After dividing the cluster center, the cloud will return the calculated results to participants A and Z, and A and Z will recalculate the cluster center using PPWAP protocol to get the final results. The whole process is shown in Algorithm 3.



Download : Download high-res image (601KB)
Download : Download full-size image
5. Implementations
The experiment in the local side is conducted by C++ on CentOS 7.5 with an Intel Core 4 processor running at 2.60 GHz and 3.7 GB of RAM. We simulate the cloud with an Intel Xeon processor running at 3.40 GHz.

5.1. Analysis
5.1.1. Dataset analysis
Two representative clustering data sets are used in this experiment to evaluate the performance of the algorithm, which are Seeds and Wine. The data set Seeds [2] is used to measure the geometric characteristics of wheat grains belonging to three different wheat varieties, which is carried out by combined harvested wheat grains. The data records seven geometric parameters which include wheat grains, including area, perimeter, compactness, grain length, grain width, asymmetry coefficient, and grain groove length. There are 210 samples in Seeds, each sample has 7 attributes, and there are 1470 data samples in total. The data set Wine [1] is the result of the chemical analysis of three different wines from the same region in Italy, and the number of 13 specific ingredients in each wine is analyzed. Wine includes 178 samples, each sample has 13 attributes, and there are 2314 data samples in total.

5.1.2. Security analysis
The calculations in this paper are all carried out in an encrypted environment, and the personal information of the data owner will not be leaked to other participants, so it can completely guarantee that the data privacy of each participant is not leaked, and the security of the whole operation process can be completely guaranteed.

5.2. Experimental design
The clustering algorithm of PPMCK includes two stages: preparation stage and clustering stage. The preparation stage is carried out by the data owner on the local side, which mainly includes data encryption and the establishment of order-preserving encoding. The clustering stage is carried out on both local and cloud side. The operation performed in the cloud is to divide the cluster center according to Euclidean distance. After the cluster center is divided on the cloud, recalculating the cluster center is performed on the local side according to PPWAP protocol. The time consumption of preparation stage is mainly the time needed for data encryption and order-preserving encoding. The time consumption in the clustering stage includes the time needed to divide the cluster center and the time cost of recalculating the cluster center. To be noted that: the initial cluster center is set to 3.

5.3. Experimental results
There are two participants in the local side of PPMCK, assuming A and Z, the data set used by A is Seeds, and the data set used by Z is Wine.

5.3.1. Preparation stage
Fig. 5 demonstrates the time consumption by A and Z in encrypting data respectively. It shows that the time required for the encryption operation is related to the amount of data. However, the whole encryption operation does not take a lot of time, and the time for A and Z to encrypt their own data is 1.39 s and 2.07 s, respectively. Fig. 6 shows the time consumption by A and Z in encoding. A takes 0.28 s to encode its data set, and Z takes 0.12s s. Furthermore, Fig. 6 shows that the encoding time does not increase with the increase of data amount.

5.3.2. Clustering stage
The time cost of the clustering stage includes the time for the cloud to divide the cluster centers and the time for the local side to recalculate the cluster centers. Table 2 shows the time it takes to divide the cluster centers and to recalculate the cluster centers under different iteration times. It can be concluded from Table 2: (1) In the clustering stage, as the number of iterations increases, the cloud spends more time than the local side, that is, the time required to divide the cluster center is greater than that required to recalculate the cluster center; (2) The time spent recalculating the clustering center is not affected by the number of iterations, regardless of whether the number of iterations increases or not, it remains within a certain range, in this experiment it fluctuates around 80 s;

(3) The overall time consumption of the clustering stage increases with the number of iterations.


Table 2. Time consumption in the cloud and local side.

Number of iterations	Divide time (s)	Recalculation time (s)	Cluster stage time (s)
1	41.34	74.26	115.60
50	135.6	68.31	204.91
100	184.59	83.65	268.24
150	232.17	90.81	325.98
200	296.55	85.70	382.25

Table 3. The execution time PPMCK.

Number of iterations	Total time (s)	Proportion of preparation	Proportion of clustering
1	116.32	0.62%	99.38%
50	206.51	0.77%	99.23%
100	270.16	0.71%	99.29%
150	328.64	0.82%	99.18%
200	386.11	0.9%	99.1%
Table 3 shows the time taken to execute the whole PPMCK under different iterations and the time consumption of the clustering stage accounts for a large proportion (over 99%) of the whole PPMCK execution time, while the time consumption of dividing the clustering center is mostly occupied by the clustering stage. In this paper, the operation of dividing cluster center is put into the cloud to save time and cost.

6. Discussion
PPMCK is proposed, which can take advantage of the computing power to ensure the leakage of data privacy. In the implementation process of PPMCK, it involves not only the interaction between the local and the cloud side, but also the interaction between participants, so it is important to guarantee the data privacy of each participant. Cloud computing is carried out in a ciphertext environment. The user interaction on the local side is conducted under PPWAP protocol, which can also ensure that data privacy is not disclosed. Experiments illustrate that the PPMCK algorithm proposed in this paper is feasible. The multi-party computing in this paper only involves two participants, and the multi-party computing can be extended to three or more participants in future work. In addition, the cloud experiment is simulated by a local server in this paper. In the future, it is hoped that the privacy-preserving algorithm can be deployed to a real cloud platform for real machine experiments.

7. Conclusion
Considering the privacy leakage in data mining, combined with the typical data mining tool-K-means clustering algorithm, PPMCK is proposed in this paper. The algorithm improves computing efficiency by offloading operations of data to the cloud, and encrypt data to ensure data privacy by homomorphic encryption. The privacy-preserving algorithm in this paper is carried out on both the local and cloud side, and the data privacy-preserving in the process of local interaction is carried out through PPWAP protocol. Experiments verify the feasibility of this algorithm. The experimental results demonstrate that: (1) PPMCK makes full use of the advantages of cloud resources by transferring the main computing to the cloud, so as to improve the computing efficiency; (2) PPMCK can guarantee the privacy of data in the cloud, and at the same time, it can also ensure that local users do not disclose their private information during the interaction; (3) Although PPMCK needs more cost for data encryption/decryption and coding, the computational cost is reasonable compared with previous methods.