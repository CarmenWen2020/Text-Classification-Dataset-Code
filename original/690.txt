Abstract
With the rise of concerns over security and privacy in the cloud, the “security-on-demand” service mode dynamically provides cloud customers with trusted computing environments according to their specific security needs. Major challenges, however, remain to achieve this goal: (1) integrating an auditable, tamper-resistant trust-management mechanism into the cloud infrastructure and (2) building a protocol to guarantee the consistency of customers’ policies during virtual machine (VM) migrations. This study develops a new security-on-demand framework called a “policy-customized trusted cloud service” (PC-TCS) architecture that comprises two core components: an attribute-based signature (ABS)-based remote-attestation scheme to achieve trusted remote attestation with customized security policies and an ABS- and blockchain-based VM-migration protocol to support policy-customized trusted migration. To prove the availability of this architecture, we implemented a PC-TCS prototype based on Xen Hypervisor, the results of which indicate that (1) PC-TCS can be integrated into cloud infrastructure as part of a trusted computing base; (2) cloud users can customize the security policies of computing environments and validate their enforcement throughout the service life-cycle with the support of PC-TCS; and (3) PC-TCS can support policy-customized remote attestation and policy-customized migration with a minimal impact on performance.

Previous
Keywords
Security on demand

Policy-customized

Trusted cloud service

Remote Attestation

1. Introduction
More and more companies and individuals are migrating their data and computing to the cloud to take advantage of its use-on-demand feature [20], [24]. Unfortunately, this convenience comes at the price of losing control of data and computing environments, which leads to security incidents that limit the potentially widespread adoption and acceptance of cloud services [33], [36]. To meet rising concerns over security and privacy in the cloud, the security-on-demand service mode dynamically provides cloud customers with trusted computing environments according to their specific security needs [17].

Cloud customers’ security needs are various security attributes corresponding to different application environments, which are constraints or configurations related to security for both subjects and objects in cloud services. Typical security attributes include visitor identities, provider trust levels, operating system security, data center locations, and so on. The requirements of cloud customers’ security attributes constitute their security strategies. A secure computing environment is related to both trustworthy service providers and a secure, trusted cloud infrastructure. So far, no standardized, auditable, tamper-resistant trust-management mechanism exists in the cloud infrastructure for customers to assess service providers, virtual machines, and physical hosts.

However, the availability of secure computing platforms is only a necessary, not a sufficient, solution to convince cloud customers to move their sensitive data and code to the cloud [48]. Cloud customers tend to need further assurance to convince them that security measures are indeed deployed and are working correctly.

The advance of new cryptographic algorithms and mechanisms enable new solutions to this problem. The Oxford myTrustedCloud project [39] and policy-sealed data abstraction [34] have opened new ways to build trusted cloud services, for example. Attribute-based encryption (ABE) protects data and security policies with key-policy attribute-based encryption (KP-ABE) [47], ciphertext-policy attribute-based encryption (CP-ABE) [5], [13], [44], and attribute-based signatures (ABSs) [16], [26], [35]. Fully homomorphic encryption guarantees the privacy of data owners and supports multi-party computing [11], [23]. Blockchain technology is used in auditing, billing, data sharing, etc., in cloud security for its auditability, traceability, and non-repudiation [2], [22], [43]. So far, however, it remains an open issue for scholars and developers to explore.

To sum up, major challenges remain to achieve the goal of security on demand: (1) integrating an auditable, tamper-resistant trust-management mechanism into the cloud infrastructure and (2) building a protocol to guarantee the consistency of customers’ policies during virtual machine (VM) migrations.

In this paper, we introduce blockchain technology and ABSs to our former work on remote attestation with ABE in [13] and present an ABS- and blockchain-based policy-customized trusted cloud service (PC-TCS) architecture, as ABS is superior to KP-ABE and CP-ABE for its anonymous, untraceable nature that better fits cloud computing. Cloud customers can customize the security policies of computing environments by validating whether they meet security policies with ABS and auditing cloud service providers’ actions and reputations by auditing actions with blockchain technology throughout the VM life-cycle in PC-TCS, which focuses on the following three aspects:

•
Availability—cloud customers can customize the security policies of computing environments, and cloud providers can partition and configure VMs and physical servers on different security levels. Cloud customers can customize and enforce the security attributes of computing environments, such as the central processing unit (CPU), memory, disk, service provider trust level, operating system security, data center location, etc., with the support of the trusted cloud infrastructure.

•
Trustworthiness–cloud customer can validate whether the current computing environment meets the custom security policy. An auditable and tamper-resistant trust management mechanism is required in cloud infrastructure. Meanwhile, the privacy of both sides should be considered, the specific configuration or attributes of cloud platform could never be over exposed in the attestation stage.

•
Consistency— VM-migration operations meet customer’ security policies. Unlike physical machines, VMs may migrate among physical nodes, changing both physical hosts and VMs and possibly destroying the security attributes of computing environments. Therefore, guaranteeing the consistency of customers’ policies during VM migrations requires a trustworthy VM migration protocol.

To achieve the first goal, we introduce a customized security policy to PC-CTS to connect users’ security expectations to the security attributes of cloud services. PC-TCS adds interfaces to customize security policies for cloud customers. It supports matching security policies with VMs and deployment based on security policies by improving VM schedulers. ABSs enhance the remote-attestation mechanism, the core of trusted computing technology [27], to become an effective scheme to integrate the trusted computing mechanism into cloud-computing architecture to provide cloud customers the capability to remotely attest to the trustworthiness of cloud services [34], [39]. They also reduce the information leak in the current remote-attestation mechanisms, such as platform-configuration information and attribute information. To achieve the second goal, we introduce ABSs and blockchain mechanisms to the remote-attestation field so customers can assess the trustworthiness of cloud services by validating the attribute signatures of computing environments. Meanwhile, all customers’ security policies and service providers’ actions are audited on the blockchain for its lifetime so a reputation system can be built on it. The information that customers can acquire in the attestation phase, however, is only whether the security attributes of current computing environments meet their custom security policies. VMs migrate when custom security policies or the security attributes of physical nodes change or because of load balancing. VM-migration operations are transparent to customers, especially live migration. Cloud administrators carry out existing VM-migration attestation, so its trustworthiness cannot meet customers’ requirements. To achieve the third goal, we present a VM-migration protocol that supports customized migration policy and migration attestation. To prove the availability of PC-TCS architecture, we designed and implemented a prototype that supports a customized security policy and a VM-migration protocol that supports a customized migration policy and validation based on the open-source Xen Hypervisor. We experimentally evaluated the migration latency, the results of which suggest that the attestation scheme does not obviously degrade VM-migration performance while maintaining customers’ security requirements.

The primary contributions of this paper are the following:

•
A PC-TCS architecture that supports a customized security policy and remote attestation;

•
A remote-attestation scheme that supports the customized security policy;

•
A VM-migration protocol that supports a customized migration policy;

•
A prototype implementation of the remote attestation and VM-migration protocol in the open-source Xen Hypervisor.

Our implementation and experimental results indicate that (1) PC-TCS can be integrated into cloud infrastructure as part of a trusted computing base; (2) cloud users can customize the security policies of computing environments and validate their enforcement throughout the service life-cycle with the support of PC-TCS; and (3) PC-TCS can support policy-customized remote attestation and policy-customized migration with a minimal impact on performance.

The rest of the paper is organized as follows. Section 2 reviews the background of remote attestation and ABS. Section 3 describes PC-TCS architecture. Section 4 describes the implementation of the PC-TCS architecture. Section 5 presents the security and preliminary performance. Finally, Section 6 concludes and indicates key areas for future research.

2. Background and related work
We describe some past work in remote attestation, ABE, blockchain technology, and ABS.

2.1. Remote attestation
The success of a cloud provider hinges on the willingness of its customers to entrust it with their data. A key factor in strengthening customer trust is providing strong assurances of the integrity of the cloud infrastructure. Trusted computing technology can play a fundamental role in providing these assurances. To do so, it offers cloud customers the ability to “remotely attest”, which has been defined as enabling remote customers to test the integrity of a targeted system based on its integrity hash measurements.

Trusted platform module (TPM)-based attestation, proposed by the Trusted Computing Group (TCG), can verify the platform integrity of a remote server. The targeted server uses the TPM to calculate the binary hash values of the platform configurations and send them to the customer. The customer compares these values with reference configurations, possibly via a trusted third-party appraiser, and determines whether the state of the platform is unmodified (good). In the context of virtualization platforms, the virtual trusted platform module (vTPM) [28] was designed to provide the same usage model and services to VMs as hardware TPM, allowing remote attestation to be carried out directly between customers and their VMs by vTPM instances. vTPM-based attestation [12], [21], [40] potentially over-exposes the specific configurations of cloud platforms, however, which creates security problems.

Property-based attestation was proposed, in theory, to attest to various properties, functions, and behaviors of systems [31]. It introduces a trusted third party to transform a platform’s security measurements into properties and vice versa and determine if the platform’s condition satisfies a given set of properties. However, property-based attestation does not support customers’ custom security policies. We solve some of these problems in this paper by introducing ABSs, which enable customers to define a set of security attributes and do not over-expose attribute information.

2.2. Attribute-based encryption and the blockchain
ABE, which was first proposed by Sahai and Waters [32], is a useful cryptographic primitive to achieve fine-grained access control and efficient encrypted data sharing [10]. The blockchain, which was developed from the open-source project Bitcoin created by the Japanese scholar Nakamoto in 2008, has revealed its value far beyond Bitcoin. With advantages of decentralization, security, and trust, blockchain technology has been utilized for many applications [1]. Due to the merits of ABE and blockchain technology, many have combined them to enhance their advantages and overcome their defects. In [45], blockchain technologies were combined with an ABE scheme to guarantee both the integrity and non-repudiation of data and to achieve quick ciphertext generation and attribute invisibility. In [30], blockchain and CP-ABE encryption technologies were combined in parallel market and counterfeit issues to help small and medium enterprises protect their brands. Ref. [14] presented an ABE security solution built on a private-over-public blockchain approach to figure out the over-reliance on private blockchain solutions and the under-utilization of public-block solutions. Other researchers have used ABE schemes and blockchain technologies to achieve fine-grained access control and enhance the traceability and visibility in the Internet of things [29], cloud computing [18], [37], [46], electronic health records [19], [42], autonomous vehicles [4] and big data [6], [7], [41].

2.3. Attribute-based signatures
The ABS is a versatile primitive that allows a party to sign a message with fine-grained control over identifying information [25]. In an ABS, a signer who possesses a set of attributes from an authority can sign a message with a predicate satisfied by that authority’s attributes. The signature reveals no more than a signer user with some set of attributes satisfying the predicate and any identifying information about the signer. Fig. 1 gives the generic ABS construction for a case of multiple attribute authorities.

ABS construction involves four entities: the registry, challenger, prover, and attributes authority (AA). The registry is the trusted manager in the ABS-construction scheme. AAs oversee the transformations between sets of attributes and private keys to sign messages. The prover may prove himself (i.e., satisfy the challenger’s policy) by signing a message with the private key. The challenger may verify whether the prover satisfies the policy by verifying the signature. ABS construction consists of two stages: system initialization and signature.


Download : Download high-res image (130KB)
Download : Download full-size image
Fig. 1. Attributes-based signature (ABS) construction. Attributes authorities (AAs) oversee the transformations between sets of attributes and private keys to sign messages. A prover may prove himself (i.e., satisfy the challenger’s policy) by signing a message with the private key. The challenger may verify whether the prover satisfies the policy by verifying the signature.

Stage I: System Initialization

(1)
The registry runs the  algorithm, which outputs a pair of secret keys ; 

(2)
The AA runs the  algorithm, which respectively outputs a pair of keys ; 

(3)
The challenger sends a unique identification ID to the registry;

(4)
The registry runs the  algorithm, which outputs a unique token ; 

(5)
The prover sends the attribute  to be applied to the corresponding AA;

(6)
The AA runs the  algorithm, which outputs the private key , after it receives the attribute ; Stage II: Signature

(7)
The challenger generates a nonce and policy ϒ and sends them to the prover;

(8)
The prover runs the ABS.Sign function, outputs the signature , and sends them to the challenger; 

(9)
The challenger runs the ABS.Verify function and then outputs whether the signature is valid after it receives the signature ; ϒ

3. Policy-Customized Trusted Cloud Service (PC-TCS) architecture
In this section, we present the PC-TCS architecture. First, Section 3.1 discusses the threat model for PC-TCS. Second, Section 3.2 overviews the architecture by analyzing the involved entities and the relations among them. Third, three crucial operations in the VM lifetime illustrate the details of PC-TCS: initial VM deployment, customer attestation, and VM migration. Section 3.3 illustrates initial VM deployment. Section 3.4 presents the process of remote attestation by cloud customers and the proposed policy-customized remote attestation (PC-RA) protocol. Section 3.5 shows VM migration and the proposed policy-customized VM-migration protocol. Finally, Section 3.6 shows how customers can benefit from the trust management of the blockchain auditor.

3.1. Threat model
The threat model is either hostile VMs running in the same cloud server or hostile applications or services running inside a VM to breach the confidentiality or integrity of its data or code. They may also try to breach its availability despite the cloud provider having allocated the VM its requested resources. We assume that the cloud manager, the registry, and the AA are trusted because they are correctly implemented with a secure boot-up and are protected during runtime. However, the server cluster does not need be trusted except for the TPM hardware and vTPM in each server. Note that the trusted servers, the cloud manager, and the AA can be redundancy-protected for reliability and security and are only a small percentage of all the servers in the cloud’s data center.

Table 1 shows the possible adversaries of cloud services, which exploit two dimensions to exploit cloud services. One is the type of computing environment, including the VM, server, and cloud. Each could be the target of exploitation. The other dimension is the objects under threat in each computing environment. On a VM level, an adversary can jeopardize the application, other applications, or even the operating system. On a server level, an adversary with full control of the VM can further exploit other VMs and VMM (Virtual Machine Monitor) after escaping the VM or even attack the hardware in the same server. On a cloud level, if the cloud infrastructure is compromised, an adversary can threaten the cloud manager, other servers in the same cloud, or even the entities outside the cloud.

We focus on two types of adversarial capabilities: (1) exploiting vulnerabilities in customers’ VMs, either from inside them or from other malicious VMs on the same server, and (2) fully controlling the network between different servers, as in the standard Dolev–Yao threat model [3]. In the latter case, an adversary can eavesdrop on and falsify attestation messages, sending customers forged attestation reports without them detecting anything suspicious.


Table 1. The threat modal for cloud services.

Attack level	VM	Server 3	Cloud
Adversary	Operating system	Other VMs	Cloud manager
Other apps	VMM	Other servers
Same app	Hardware	Outside entities
3.2. Architecture overview
PC-TCS is designed to guarantee the availability, trustworthiness, and consistency of customers’ security policies. The architecture of PC-TCS, as shown in Fig. 2, is based on the IaaS cloud-computing paradigm in which VMs are leased to cloud customers. This includes six entities: the cloud customer, cloud manager, registry, AA, server cluster, and blockchain auditor. The presence of the registry and AA is to construct the ABS scheme.

•
Cloud customer: Cloud customers can customize the security policy and physical resource requirements and then apply to a cloud manager for the computing environment, which satisfies the requirements of both physical resources and security. Customer requests are recorded in the blockchain auditor, and customers can supervise the whole procedure by accessing the trust-management module in blockchain auditor.

•
Cloud manager: Cloud managers are equivalent to cloud administrators; that is, they are responsible for processing requests from cloud customers. The policy-validation module selects appropriate VM and physical nodes to build computing environments according to customer requests. The computing environments should satisfy the requirements of both physical resources and security. The deployment module deploys selected VMs on physical servers and then launches VMs. Once VMs are deployed on appropriate servers, each deployed VM enters a security life-cycle. Each action by the cloud manager is requested to be recorded in the blockchain auditor, and the server’s trustworthiness and history can be accessed in the blockchain auditor.

•
Attribute authorities: The AAs, components of ABS construction, translate measurement values from servers and VMs into well-defined, meaningful security-attribute information. First, the attribute information is provided for the policy-validation module to retrieve. Second, the attribute information is translated into a signature private key that is fed back to the server or VM. Note that the TPM can offer the measurement value of the hardware and hypervisor, and the vTPM can offer the measurement value of the entire computing environment, which includes the hardware, hypervisor, and VM.

•
Registry: The registry is the part of ABS construction. It receives the registration from the server and VM.

•
Server cluster: Each server is based on the trusted cloud architecture with the TPM. Each VM is based on the trusted computing architecture with the vTPM. The improved vTPM also offers the interface to customize security policy, which is for customer attestation and VM-migration attestation. The improved vTPM can guarantee the confidentiality and integrity of customized security policy. Each action by the server cluster is requested to be recorded in the blockchain auditor, and the trustworthiness and history of every server or VM can be accessed in the blockchain auditor.

•
Blockchain auditor: The blockchain auditor is used to audit all actions and manage the trustworthiness of all entities in PT-CTS, which includes an audit module and a trust-management module. The audit module keeps a chain of actions for each user’s request, recording undeniable logs for all involved entities. The trust-management module supports queries about the process of each action and the reputation of each entity from statistical historical records.


Download : Download high-res image (245KB)
Download : Download full-size image
Fig. 2. Architecture overview of policy-customized trusted cloud service (PC-TCS). PC-TCS is based on the IaaS cloud-computing paradigm in which VMs are leased to cloud customers. PC-TCS includes six entities: the cloud customer, cloud manager, registry, AA, server cluster, and blockchain auditor. The presence of the registry and AA is to construct the ABS scheme.


Download : Download high-res image (285KB)
Download : Download full-size image
Fig. 3. Initial deployment consists of three stages: (1) in the initial stage, the registry and AA initialize; (2) in the attribute-authorization stage, the AA collects the TPM-based measurement values of each server and translates them into signature keys, and the signature keys are then fed back to corresponding servers; and (3) in the VM-deployment stage, the cloud manager builds an appropriate computing environment when the cloud customer initially requests a VM and a security policy, which defines the desired level of security requested for the VM.

3.3. Initial deployment
The initial deployment, as shown in Fig. 3, consists of three stages. (1) The registry and AA initialize, just as they do in ABS construction. (2) The AA collects the TPM-based measurement values of each server and translates them into signature keys. The signature keys are fed back to corresponding server. (3) The cloud manager builds an appropriate computing environment when the cloud customer initially requests a VM and a security policy, which defines the desired level of security requested for the VM.

Stage I: Initial Stage


Download : Download high-res image (142KB)
Download : Download full-size image
Fig. 4. Policy-customized remote attestation (PC-RA). PC-RA consists of two stages: (1) in the attribute-authorization stage, an AA collects vTPM-based measurement values of each VM and then feeds attribute signature keys back to corresponding VMs; (2) in the attestation-implementation stage, a VM proves that the current computing environment satisfies the customer’s customized policy.

(1)
The registry runs the  algorithm, which outputs a pair of secret keys ;

(2)
The AA runs the  algorithm, which outputs a pair of keys . Stage II: Attribute Authorization

(3)
The server sends a unique identification vID to the registry;

(4)
The registry runs the  algorithm, which outputs a unique token  to the corresponding server;

(5)
The server sends the platform configuration register (PCR) values signed by the TPM with an AIK, storage measurement log (SML), and token  to each AA;

(6)
First, each AA verifies the integrity of the SML by the PCR values, translates the measurement value in the SML into attribute information, translates the attribute information into an assessment value  according to the common criteria, runs the  algorithm, which outputs the private key , and finally binds  with the PCR values by the TPM-based seal function, which outputs an encrypted key value  according to the common criteria and then runs the  algorithm, which outputs the private key  to the corresponding server;

(7)
AA sends the attribute assessment value of each server to the policy-validation module in the cloud manager. Stage III: VM Deployment

(8)
A cloud customer requests a VM with customized physical resource requirements and security policy and records his request in the blockchain auditor;

(9)
The policy-validation module selects an appropriate VM and server to build a computing environment, allocates customized physical resources, and finally launches the computing environment. All actions by the cloud manager are recorded in the blockchain auditor synchronously.

VMs are deployed on an appropriate server, and each deployed VM enters a security life-cycle that supports vTPM-based attestation from cloud customers.

3.4. Policy-customized remote attestation
To achieve customer-customized policy in remote attestation, we propose policy-customized remote attestation (PC-RA), as shown in Fig. 4. We assume that cloud customers have defined the security policies stored in vTPMs that can guarantee their integrity. PC-RA consists of two stages: (1) An AA collects the vTPM-based measurement values of each VM and then feeds attribute signature keys back to corresponding VMs, and (2) a VM proves that the current computing environment satisfies the customer’s customized policy. The first stage occurs in the startup phase of a VM. The second stage is launched by a cloud customer in the VM-running phase.

Stage I: Attribute Authorization

(1)
A VM sends a unique identification vID to a registry;

(2)
The registry runs the  algorithm, which outputs a unique token  to the corresponding VM;

(3)
The VM sends the PCR values signed by the vTPM with a vAIK, SML, and token  to each AA;

(4)
First, each AA verifies the integrity of the SML by the PCR values, translates the measurement value in the SML into attribute information, translates the attribute information into an assessment value  according to the common criteria, runs the  algorithm, which outputs the private key , and finally binds  with PCR values by a vTPM-based seal function, which outputs the encrypted key  to the VM. Stage II: Attestation Implementation

(5)
A cloud customer launches attestation;

(6)
First, a VM unbinds  with the current PCR value by a vTPM-based unseal function, which outputs  if the PCR value does not change, Then VM runs the ABS.Sign algorithm in vTPM, which outputs the signature  and feeds the signature  back to the Cloud Customer. Finally, the customer runs the ABS.Verify algorithm to verify the signature , which outputs the result “yes” or “no”.

Compared to the traditional remote attestation in TPM 2.0, PC-RA has two advantages: First, it avoids leaking the platform configuration during remote attestation by encrypting PCR values with ABS. Second, PC-RA supports the attestation of complex attribute information besides PCR values, such as security configuration, etc.

3.5. Policy-customized migration protocol
Unlike physical machines, a vTPM-based VM may migrate among physical nodes. Existing vTPM-based VM-migration schemes usually employ TPM-based remote attestation, as mentioned in Section 2.1, by cloud managers, since VM migration is transparent to cloud users. This raises the concern of cloud users about whether VM migration is consistent with customized policies. To guarantee the trustworthiness of VM migration, we propose a policy-customized migration protocol (PC-MP), as shown in Fig. 5. The migration protocol occurs in following phases:

(1)
A source server receives a migration command from a cloud manager;

(2)
The source server sends a migration request to a corresponding guest VM;

(3)
The guest VM generates nonce  and then sends  and policy  to the destination server;

(4)
First, the destination server unbinds  with the current PCR value by a TPM-based unseal function, which outputs  if the PCR value does not change, and then runs the ABS.Sign algorithm, which outputs the signature . Finally, the destination server sends the signature  to the guest VM;

(5)
The guest VM runs the ABS.Verify algorithm to verify the signature. If the signature is effective, then the migration is allowed; otherwise, it is denied;

(6)
The source server runs the migration with the destination server after it receives migration permission;

(7)
After the migration is completed, the source server feeds the migration result to the cloud manager;

(8)
The cloud manager records the migration action in the blockchain auditor. The record contains the signature of both the guest VM and destination server to maintain the consistency of the security attributes against the misbehavior of the cloud manager.


Download : Download high-res image (231KB)
Download : Download full-size image
Fig. 5. Policy-customized migration protocol (PC-MP). The PC-MP is proposed to guarantee the trustworthiness of VM migration. When a guest VM receives a migration request, it checks the trustworthiness of the destination server with ABS. A migration is allowed only if the security requests of the guest VM are fully satisfied by verifying the security attributes of the destination server.


Download : Download high-res image (329KB)
Download : Download full-size image
Fig. 6. Trust relationships in PC-TCS. The main trust entities are the cloud customer, cloud manager, ABS-based cloud infrastructure, and blockchain auditor. The solid lines illustrate the trust relationships and actions between them. The dotted lines show the inner relationships between functional modules.

3.6. Blockchain-based trust management
In PC-TCS, the blockchain auditor is designed as the trust management component which records all the requests and actions by customers and cloud managers. To better serve the purpose of trust management for both cloud customers and cloud managers, we adopt a permissioned blockchain model (e.g., hyperledger fabric) in our design, in which the whole permissioned blockchain network plays the role of the trusted third party. In our opinion, the permissioned blockchain is a better choice for most private and hybrid cloud services for its performance and manageability. Each audit event in PC-TCS can be viewed as a transaction in blockchain. Since the auditable events as VM deployment and VM migration keep a low rate normally, the performance of a permissioned blockchain is adequate for an enterprise-level audit [38] under an acceptable cost. Besides using distributed ledger to track historical activities of users and cloud providers, smart contract may also be used to declare and enforce the security and VM migration policy, and thus to enable automatic and trustworthy management. The trust relationships in PC-TCS are shown in Fig. 6.

•
Four trust entities exist: the cloud customer, cloud manager, ABS-based cloud infrastructure, and blockchain auditor. The solid lines illustrate the trust relationships and actions between them. Blockchain auditor: The block chain auditor is the core of the trust-management mechanism. It is designed to be a public blockchain or a blockchain supervised by trusted third party. A distributed ledger is used to provide audit and reputation information for cloud customers and the cloud infrastructure.

•
Cloud customer: A cloud customer trusts the blockchain auditor by default, which provides audit events, service-provider reputations, and cloud-infrastructure attributes. The cloud manager, however, is distrusted by customers. The customized security policy and smart contract are set with the cloud manager to guarantee the trusted execution of its tasks.

•
Cloud manager: The cloud manager represents the service providers in the cloud limited and stimulated by the trust-management mechanism. It is supposed to follow the rules to provide trusted service to customers and audit actions to the blockchain. Its misbehaviors are auditable by the blockchain auditor and degrade its trustworthiness.

•
ABS-based cloud infrastructure: The ABS-based cloud infrastructure is the base of the trusted cloud computing. The TPM assures the integrity of the platform and ABS-related attributes, and PC-RA and PC-MP support trusted migration and remote attestation.

Customers can benefit from the trust management in the blockchain auditor in the following two ways:


Download : Download high-res image (263KB)
Download : Download full-size image
Fig. 7. Implementation of attestation and migration. The prototype implementation refers to four kinds of virtual machines: host, guest, vtpm-stubdom, and vtpmmgr-stubdom. Stubdom (“stub domain”), which is based on the mini-OS kernel, can be viewed as a kind of lightweight “service” or “driver” domain to run device models and a technique to implement dom0 disaggregation. The XenBus describes the interface to the XenStore, a storage system shared between Xen guests.

(1)
Monitoring and auditing current and historical requests to verify whether security policies are fulfilled throughout the life-cycles of VMs. On one hand, cloud customers can validate whether the current computing environments meet security policies with ABS. On the other hand, the integrity and trustworthiness of all the current and historical actions of VM requests, allocations, and migrations can be monitored and audited by accessing the trust-management module in the blockchain auditor.

(2)
Evaluating and ranking the cloud managers or the service providers. With the accumulation of historical records, it is possible for the trust-management module in the blockchain auditor to build a reputation and ranking system in PC-TCS. Many mature algorithms and solutions exist for this purpose [8], [9] with which users can quantitatively assess the trustworthiness and ranking of cloud managers according to their needs.

4. Implementation and case study
4.1. Implementation
We implemented our PC-RA and PC-MP on the Xen 4.7 hypervisor [3]. We modified and added some key modules and data paths, as shown in Fig. 7, to support the PC-RA and PC-MP. The prototype implementation refers to four kinds of virtual machines: host, guest, vtpm-stubdom, and vtpmmgr-stubdom. Stubdom (“stub domain”), which is based on the mini-OS kernel, can be viewed as a kind of lightweight “service” or “driver” domain to run device models and a technique to implement dom0 disaggregation. The XenBus describes the interface to the XenStore, a storage system shared between Xen guests. In a more general case, it describes a protocol for connecting to device drivers built on top of the XenStore.

•
Host: The host is the administrator-oriented management platform with XL as a Xen management tool. We modified the migration control module (MCM) to add an attestation phase before the migration. The migration attestation service (MAS) can prove that its own security attributes satisfy customers’ policies by running the sign algorithm when it becomes the destination server.

•
Guest VM: The guest VM is the customer-oriented computation platform. We added the PCS to provide customers with interfaces to customize security policies. We also added the CAS to enable customers to perform CPBA. The MAE receives the VM-migration request from the host by communication with the MCM via the XenBus and then verifies the destination server by communication with the MAS via the socket. The Xen/tpmback is the Linux kernel virtual TPM front-end driver. This driver provides vTPM access to guest VMs.

•
vtpm-stubdom: A mini-OS stub domain that implements a vTPM. There is a one-to-one mapping between running vtpm-stubdom instances and logical vTPMs on the system. The policy storage handles storing customized policies from customers. The ABS engine provides the signature and verification algorithm of ABS construction. The mini-OS/tpmback is the mini-OS TPM back-end driver. The Linux front-end driver connects to this back-end driver to facilitate communications between the Linux guest and its vTPM. The vtpmmgr-stubdom also uses this driver to communicate with vtpm-stubdom. The Xen/tpmfront is the mini-OS TPM front-end driver. The vtpm-stubdom uses this driver to communicate with vtpmmgr-stubdom.

•
vtpmmgr-stubdom: A mini-OS domain that implements the vTPM manager. There is only one vTPM manager, and it should be running throughout the lifetime of the machine. This domain regulates access to the physical TPM on the system and secures the persistent state of each vTPM.

4.2. Case study for VM migration
We used a typical VM-migration case in the cloud to demonstrate our implementation of PC-MP. As shown in Fig. 8, four VMs are running on a data center, and the cloud manager is trying to migrate running VMs to the free server , a typical load-balancing scenario in the cloud. Once a new node is added to the cloud, it shares the loads of other nodes to achieve better performance. All migrations succeed in the traditional cloud, but only the migrations that satisfied the customized policy succeed under the PC-MP, which demonstrates the effectiveness of PC-TCS.

First, the cloud manager or service provider supplies cloud customers with possible server properties to configure migration policy, as shown in Table 2. Second, the cloud customer can define security policies for their VMs based on the server properties. Table 3 shows accordingly customized policies. Table 4 shows the statuses of the source nodes based on the cloud manager’s data in Table 2. Table 5 shows the status of the destination node.


Download : Download high-res image (165KB)
Download : Download full-size image
Fig. 8. A policy-customized VM migration scenario. Suppose four VMs are running on five server nodes and the cloud manager is trying to migrate VMs to free  according to a user’s policy customized with PC-MP.


Table 2. Server properties for configuring migration policy.

Server property	Value
Migration control		Y,N
Outgoing migration control		1,2,3
1,2,3
Incoming migration control		“Xen”, “KVM”
“China”, “US”
1,2,3,4
1,2,3,4

Table 3. Customized policies for VMs.

Policy	Migration_allow		
N		
Y	 OR 	 “Xen” AND  “China” AND ( OR )
Y	 OR 	 “Xen” AND  “China” AND  AND 
Y	 OR 	 “Xen” AND  “China” AND ( OR )
Based on the customized policies and server properties defined above, the four migrating operations in Fig. 8 are analyzed as follows:

(1)
If the cloud customer sets the migration control policy “: ”, which means that migration of VM is not allowed, then the migration operation for VM from  to  fails.

(2)
If the cloud customer sets the outgoing migration control policy “ OR ”, then the migration operation for VM from  to  fails because the property of  “: ; ” does not satisfy the customized policy.

(3)
If the cloud customer sets the incoming migration control policy “: ”, then the migration operation for VM from  to  fails because the property of  “: ” does not satisfy the customized policy .

(4)
The migration operation from  to  succeeds because the customized policy  is satisfied.


Table 4. The status of the source nodes.

; 
; 

Table 5. The status of the destination nodes.

 “Xen”;  “China”; ; 
5. Evaluation
This section evaluates the security and performance of PC-TCS when varying the number of properties. We discuss two aspects of its security issues in Sections 5.1 Security analysis, 5.2 Security case study , respectively: securing PC-TCS itself from possible threats and improving cloud security against typical attacks using PC-TCS. Section 5.3 evaluates the performance overhead of VM migration.

5.1. Security analysis
The PC-TCS framework enables customer to select security options to customize the security policy for their leased VMs, meanwhile, verify whether current computing environment is consistent with customized policy. However, it is important that the operation of the framework is secure, and critical modules are protected.

According to the thread model in Section 3, an adversaries’ attack and the service providers’ malicious behaviors need to be considered. Our PC-TCS shares the same security model with traditional trusted computing. The ABS and Migration related modules are added into the TCB (Trusted Computing Base). The traditional remote attestation protocol is updated with our PC-RA protocol. In that case, the security of PC-TCS is same with the traditional trusted computing. Therefore, the platform security mechanisms and the trust management framework in cloud [15] can be seamlessly used in PC-TCS.

For the threats in the thread model, the attacks against VM and VMM can be resisted by the platform security mechanisms, and the attacks against network, such as impersonation attack and Man-in-the-Middle attack, can be resisted with ABS and other network security mechanisms. For the malicious behaviors by service providers, PC-TCS is able to monitor and contain the risks. On one hand, the ABS-based remote attestation and VM migration will enforce the deploy and enforcement of user’s secure policies. On the other hand, the Blockchain Audit will audit the service provider’s actions and lower the risks.

The framework needs to be secured for three aspects: (1) secure collection and servicing of the customer’s VM requests, (2) trustworthy attestation mechanisms and protocols, and (3) secure VM migrations.

Secure collection and servicing of the customer’s VM requests. Attackers might try to collect or change the policies customized by the customers illegally. So VM requests must be securely collected, which can be achieved via authentication and authorization of cloud customers. The VM security requests are stored in the Blockchain Auditor, which is able to block unauthorized access and modifications. Furthermore, the control module responsible for processing and enforcing the VM security requests (i.e. the Nova-Schedule module) is protected with trusted computing technology to guarantee the integrity of its code.

Trustworthy attestation mechanisms and protocols. Attackers might try to hack the system from two aspects: (1) hack and compromise the cloud servers such as VMs or physical nodes; (2) hack the remote attestation mechanisms thus provide customers with spurious attestation reports. The ABS sign and verify algorithms in PC-TCS are carried out within the vtpm-stubdom, which can guarantee the trustworthiness of the attestation mechanism and protocol. Meanwhile, the operation of sealing signature key with supplied PCR value is adapted to guarantee the consistency of authentication properties and computing environment.

Secure VM migrations. Attackers might try to hack the system to tamper code or collect sensitive data while a VM is migrating. To stop this, we proposed the PC-MP to guarantee the consistency of security policies and the integrity of the cloud computing platform, and sensitive data could be encrypted to resist tampering from attackers during the migration.

5.2. Security case study
In this section, we briefly analyze the security of our architecture construction in three case studies:

Case Study I: Control Plane

Example Attacks: Attackers may migrate many guest VMs into a legitimate victim VMM to cause disruptions or a denial of service. Attackers may also migrate guest VMs to the attacker’s machine and gain full control over them. By falsely advertising available resources, attackers may influence the control plane to migrate guest VMs to the attacker’s machine.

Security Analysis: The blockchain-based trust management and the PC-MP can effectively prevent attacks from the control plane, such as malicious outgoing and incoming migration. The trusted chain based on the vTPM can guarantee the security and enforcement of users’ policies. If and only if specified properties of the source node and the destination node satisfy cloud users’ policies, migration begins. The blockchain-based trust management can help customers choose trusted services and supervise service providers to behave properly for better trustworthiness.

Case Study II: Data Plane

Example Attacks: By monitoring migration transit paths and associated network streams, an attacker can extract information from the memory of migrating VMs, such as passwords, keys, application data, and other protected resources.

Security Analysis: During the migration process, the transmitted data are encrypted by the session key , the confidentiality of which the policy-based migration attestation can ensure.

Case Study III: Migration Control Module

Example Attacks: By exploiting MCM vulnerabilities such as stack, heap, and integer overflows, an attacker may subvert a VMM, and any guest VMs running within the VMM may also then become compromised.

Security Analysis: The TPM can provide cloud customers with a hardware-level guarantee of the integrity of the VMM and vTPM. The vTPM can then guarantee the cloud customers the integrity of the VM.

5.3. Performance evaluation
We consider the performance overhead of VM migration while varying the number of properties of the cloud node. Our experimental scene is live migration based on shared storage using NFS between the source node and destination node. Each node is equipped a with 3.40 GHz 4-core CPU and 8G of RAM. Each VM is equipped with a 1-core vCPU and 1024 M of RAM. The VM-migration latency contains the times of the attestation stage and the data-transfer stage. Our evaluation does not calculate the time of the initial deployment because the initialization only needs to be run once. The chief cost in this stage is the time to generate signing keys for ABSs, which grows linearly with more attributes; for instance, it takes about 0.12 s to generate a signing key with ten attributes. In our design, the signing keys are cached and reused to improve the total performance. Overall, it is negligible compared to the long runs of cloud services.

Table 6 shows the latency of remote attestation and the transfer latency for VM migration.

Fig. 9 shows that the latency of VM migration increases proportionally to the number of properties.


Table 6. The latencies for remote attestations and VM migrations with different attributes in keys.

Attributes in key	Latency(ies)
Attestation	Transfer
10	0.23	12.78
20	0.38	12.91
30	0.54	12.96
The duration of the data-transfer stage is usually greater than 12 s However, the duration of the attestation stage is less than 1 s; that is, the new attestation scheme has almost no obvious performance overhead with traditional VM migration.


Download : Download high-res image (140KB)
Download : Download full-size image
Fig. 9. Latency of migration operations in policy-customized trusted cloud service (PC-TCS). The results show that the new attestation scheme has almost no obvious performance overhead with traditional VM migration.

6. Conclusion and future work
In this paper, we presented a new ABS- and blockchain-based PC-TCS architecture that included an ABS-based remote-attestation scheme and a customized VM-migration protocol. PC-TCS provides cloud customers with three capabilities:

•
Customizing and enforcing the security policies of cloud-computing environments;

•
Validating whether current computing environments or VM-migration operations meet their custom security policies;

•
Auditing the security of their current and historical requests throughout the life-cycles of the VMs with the non-reputable recorders in the blockchain.

To prove the availability of PC-TCS architecture, we implemented the PC-TCS prototype based on the open-source Xen Hypervisor, including PC-RA and PC-MP components. Our evaluation shows that PC-TCS can fulfill the design goals and that its impact on performance is acceptable.

It is possible for PC-TCS to complement and enhance traditional remote attestation in TPM 2.0. The node with PC-TCS can achieve both PC-RA and traditional remote attestation, while the node without PC-TCS can only follow traditional remote attestation by exchanging PCR values.

Despite the benefits of our framework, it faces technical difficulties when applying PC-TCS in the practical cloud. The cloud infrastructure needs to be upgraded to support TPM in the hardware layer. The VMMs then need to be patched to support the PC-RA and PC-MP, which may involve updating to a popular VMM tool, such as Xen, KVM, etc. A trusted blockchain needs to be introduced to the cloud infrastructure. Finally, the way to use the cloud services needs to be changed in the application layer.

In the future, we plan to advance our research on optimizing the performance of ABS and blockchain mechanisms in PC-TCS and redesigning it as a service-level agreement for OpenStack. It is also possible to apply ABS-based remote attestation to containers like Docker. A design like PC-TCS can be used after designing virtual trusted computing inside a container.

