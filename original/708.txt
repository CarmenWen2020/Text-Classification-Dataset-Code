Abstract
Three-dimensional Network-on-Chips (3D NoCs) is a popular design choice due to its low packet latency, low network power consumption and high packing density. However, 3D NoCs suffer from high temperature issues. The 3D stacking of Si-layers elongates heat transfer path from different Si-layers to the heat sink resulting in increase in peak temperature of the chip. Since routers of NoCs have high power densities, a higher router activity may result in signification increase in temperature of the chip. Therefore, a judicious selection of the routing path is necessary to reduce the chip temperature. As the routers placed at the lower Si-layers have higher thermal conductance to the heat sink, a routing path consisting of more number of routers in the lower Si-layers may improve the temperature profile of the chip. In this paper, we have proposed two different thermal-aware routing approaches, which use downward detoured routing for some optimally selected communication paths to reduce the chip temperature. The first technique is a thermal-aware application-specific Mixed Integer Linear Programming based method (named TMD), while the second one is an application-agnostic heuristic approach (named TSD). To predict the effect of detour decisions on the temperature profile of the chip, TMD technique has applied two different thermal models with a constraint on the average packet delay (APD) of the network. Experimental results show that a significant temperature reduction (up to 22∘) can be achieved within minimal performance loss (10% increase in APD) using either of the proposed techniques, compared to the minimal path routing algorithms – XYZ, ZXY and EDGE and the greedy detour approaches – All Detour and Random Detour.

Previous articleNext article
Keywords
3D network-on-chip
Mixed Integer Linear Programming
Thermal-aware routing
Average packet delay

1. Introduction
In 3D NoCs, multiple layers of active devices are vertically stacked over one another and interconnected with through silicon vias (TSVs). Compared to 2D NoC architectures, 3D NoCs deliver better system performance as it increases the packing density and reduces the interconnection wire length. However, three-dimensional stacking of active devices can potentially increase power density leading to thermal problems and creation of thermal hotspots [1], [2], [3], [4]. Thus, introduction of thermal-awareness at different design phases in 3D NoCs is very essential. As mentioned in many of the previous works [2], [4], [5], [6], [7], [8], NoC routers are having comparable thermal impact as the processors and contribute significantly to the overall chip temperature due to their higher switching activity in smaller chip area. Moreover, the routers present in the upper NoC layers (away from the heat sink) are the potential candidates to generate thermal hotspots due to their high power density and long heat dissipation paths to the heat sink. Thermal-aware IC-packaging techniques considering the worst case temperature scenarios, make the fabrication and packaging costs exceptionally high [9]. Therefore, now-a-days application of different thermal management techniques in high-level designs of NoC-based MPSoCs has become a popular research area. This includes thermal-aware core to router mapping [10], [11], [12], [13], task scheduling [14], [15], [16], [17], task migration [3], Dynamic Voltage and Frequency Scaling (DVFS) [18], router throttling [1], [3], [7], [8], [19] and routing algorithm design [1], [2], [4], [5], [6], [19]. In this work, we have focused on the thermal management techniques based on thermal-aware routing. Dynamic power consumption of a router is a function of the traffic load on that router, which also depends on the routing algorithm used in the NoC. Therefore, a routing algorithm, which determines the network power distribution has a significant impact on the temperature profile of the chip. These thermal impacts of routing algorithms have been studied in many of the previous works [1], [2], [4], [5], [6], [19].

Routing algorithms in NoCs can be classified into two major categories - 1. Oblivious Routing Algorithms (ORAs) and 2. Adaptive Routing Algorithms (ARAs). ORAs take the routing decisions irrespective of the network congestion or temperature information. For a particular source and destination pair, one or more minimal and non-minimal paths can exist. While transmitting a packet, a particular path is selected from the set of alternative paths in a random manner, depending on some predefined probability or periodicity. Deterministic routing is the simplest form of oblivious routing, where all packets between a source and destination pair follows a single predefined path (typically a shortest path). Router architectures used in ORAs are simple, consume less power and can easily be made deadlock free. On the other hand, in ARAs, the routing path is selected adaptively depending on the network congestion, temperature profile etc. This is likely to improve the network performance compared to ORAs. However, the adaptive path selection increases the complexity of the routers and makes deadlock avoidance more difficult. Though it is easier to avoid thermally critical routers in case of ARAs, they need a significant power and performance overhead [2], [6], [20]. Extra network power required to implement the following hardware blocks in ARAs: Adaptive Route Computation, Temperature Information Generation, and Temperature Information Communication units may affect the temperature profile of the chip significantly. Although, thermal-aware adaptive routing algorithms have been proposed in many of the previous literature [1], [4], [5], [7], [8], [19], [21], [22], [23], thermal-aware routing path selection in case of oblivious routing has not been explored much. In this work, we have proposed thermal-aware oblivious routing techniques. Compared to the ARAs, the proposed routing techniques, result in simpler router architectures and do not require any additional hardware resources to compute or communicate the run-time temperature or traffic information. On the other hand, compared to the minimal path based deterministic routing methods, the proposed strategy is more flexible, as it considers both the minimal and non-minimal (detoured) routing paths.

The routing techniques proposed in this work attempt to route the packets through a layer closer to the heat sink in order to minimize the temperature of the chip. The proposed methods have been named as, Thermal-aware MILP-based Detour (TMD) and Thermal-aware Selective Detour (TSD). To the best of our knowledge, the proposed routing techniques are the first application-specific detour-based non-adaptive routing in 3D Mesh based NoCs. The present work analyzes the effect of different detour decisions on both the steady-state and transient-state temperature profile of the chip and also discusses the resulting degradation in average packet latency of the network compared to the minimal path routing algorithms. The salient contributions of the current work are as follows.

•
Mixed Integer Linear Programming (MILP) formulations have been presented to optimally select the detour routing layers for all the traffic flows of an application. Using the MILP solutions, routing tables are generated. This is an off-line technique.

•
An in-depth theoretical analysis of the impact of detour path selection on chip temperature profile has been presented.

•
Based on the above analysis, a heuristic based thermal-aware detour routing method has been proposed for applications with unknown traffic patterns. Unlike the MILP-based approach, this is a completely on-line oblivious routing algorithm. Therefore the paper contributes to both on-line and off-line solutions for thermal-aware 3D detour routing problem.

The rest of the paper has been organized as follows: Section 2 presents a brief literature survey. Section 3 contains the problem formulation. Section 4 describes the thermal models used to determine the temperature profile of the chip. Section 5 enumerates the proposed application-specific MILP based detour-routing techniques. Section 6 presents the proposed application-agnostic heuristic detour-routing algorithm. Section 7 presents the results and associated analysis. Section 8 draws the conclusion, also enumerating the scope for future work.

2. Literature survey
High level temperature management techniques in NoCs, can be classified into proactive and reactive ones [1]. In proactive methods, temperature-aware measures are taken in advance to reduce the chip temperature, whereas reactive techniques apply temperature-aware measures once the threshold temperature has been reached for one or more tiles in the NoC. Impact of reactive temperature management techniques on network performance degradation are much more severe, compared to the proactive techniques [24]. Most of the works on temperature-aware adaptive routing techniques use the reactive management, while the temperature-aware oblivious routing techniques use proactive strategies.

2.1. Thermal-aware oblivious routing in NoCs
The work proposed in [6], presents an application specific probabilistic oblivious thermal-aware routing algorithm. It distributes the communication energy evenly among different routers and links in the NoC by considering all possible deadlock free paths between two routers and distributing the total traffic among them using a Linear Programming formulation. [25] has proposed a network congestion-aware application-specific table-based routing algorithm that maximizes the number of alternative paths for a traffic flow. [2] has studied different thermal-aware turn-restricted partially adaptive routing algorithms (e.g. 3D Odd–Even, 4N-First etc.). However, none of the techniques could provide better temperature profile or throughput (under a maximum temperature constraint) compared to a deterministic routing algorithm, EDGE. In EDGE, always the least thermally-resistive shortest path is selected for routing. The work [26] has presented a Mixed Integer Linear Programming (MILP) based aging-aware routing path selection technique which also minimizes the energy delay product of the chip. [20] has proposed a passive aging aware routing algorithm. It divides the 2D mesh into two parts: east and west. Routers in one of the regions (east/west) use -routing, whereas the routers belonging to the other region use -routing. This spreads out the traffic load from the center of the mesh to its boundary and hence more equally distributes the traffic load in the routers compared to the dimension order routing (such as, -routing). This results in an increase in the Mean Time To Failure (MTTF) of the network components. However, as mentioned in [7], balancing the traffic loads of different routers fails to balance the temperature profile of the chip in 3D NoCs due to the heterogeneous thermal resistances of different logic layers.

2.2. Thermal-aware adaptive routing in NoCs
The work presented in [5], has proposed two thermal-aware routing techniques: deterministic / routing in horizontal direction, and a selective -first then  routing in vertical direction, depending on the position of the nodes and the temperature of the chip. [4] has proposed a congestion-aware adaptive routing in a 3D NoC-Bus Hybrid mesh architecture. A traffic monitoring and management network, named ARB-NET, placed at the middle logic layer of the 3D NoC, guides the routers to distribute the traffic in the network uniformly. However, this traffic load balancing technique may not reduce the temperature of the chip always, as it neglects the non-uniform vertical thermal resistances of different 3D layers. [21] has proposed a minimal path-based adaptive routing for 2D NoCs, which tries to minimize the temperature of the chip by balancing the traffic load distribution among different routers. A temperature computing unit used in their proposed router architecture calculates temperature depending on the traffic loads on different routers. However, this temperature calculation procedure ignores the temperatures of the cores and the positional dependency of the thermal resistances (to the heat sink) of different tiles. [22] has proposed an aging-aware adaptive routing, which considers both the delay degradation in links and routers and traffic congestion to determine the best path for an incoming packet. However, they have not mentioned any deadlock avoidance technique, which is very crucial in case of adaptive routing. [23] has proposed a dynamic programming based adaptive routing algorithm for 2D Mesh NoC which considers both lifetime reliability and buffer congestion information of a router for routing packets. They have used west first turn model to avoid deadlock.

2.3. Throttling-based routing algorithms
The works presented in [1], [3], [7], [8], [19], have proposed thermal-aware routing algorithms applicable to Non-stationary Irregular (NSI) mesh topologies generated in throttled 3D NoCs. [7] has presented a proactive traffic-aware downward routing technique, which detours the traffic flows towards the downward direction by a number of logic layers to avoid the throttled routers. While selecting the depth of detouring for a traffic flow, it maintains the aggregated traffic load on each logic layer below the bandwidth of the layer. This prevents congestion in the routers present in the bottom logic layers. [8] has proposed a thermal-aware vertical throttling (TAVT) scheme along with a transport layer assisted Downward-Lateral Adaptive-Deterministic Routing (DLADR) technique. In DLADR, if the presence of a throttled router in the routing path prohibits both the adaptive and deterministic lateral first routings, downward routing is applied to route the packet through the lowest logic layer. [19] has extended the adaptivity of DLADR by introducing cascaded adaptive- routing while routing in the lateral first direction. To increase the path diversity in the downward routing, [19] has used uniform random downward layer selection policy instead of routing all the traffic through the lowest possible logic layer in the NoC.

2.4. Limitations of the existing works
Most of the reported works in thermal-aware routing have used adaptive routing techniques. Though these techniques are flexible in routing path selection, they require extra hardware and suffer from performance degradation [2], [6], [20]. Downward detour based thermal-aware routing path selection strategy has been used in many of the previous works [2], [5], [7], [8], [19]. However, the impact of detouring a routing path on the temperature profile of the chip has not been analyzed in any of the works. Downward detour-routing has been applied irrespective of the  distance between the source and destination routers of the packet. This may increase the chip temperature, as explained in Section 6. Works [2] and [5] have used the shortest routing paths with minimal thermal resistances to route a packet. However, we have proved both analytically and experimentally that further reduction in chip temperature can be possible by using downward detour-routing. In the absence of router congestion, temperature-aware routing algorithm proposed in [7], detours all paths through the lowest logic layer in the chip. Also, the routing algorithm proposed in [8] detours all the traffic through the lowest logic layer, if any of the routers present in the lateral routing path is found to be throttled. Therefore, we have compared our proposed thermal-aware detour routing techniques with a greedy detour routing, named All Detour (), which detours all the packets through the lowest logic layer. It has been observed that the routing algorithm proposed in [19] selects the downward routing layer randomly from the set of non-throttled logic layers, while detouring a packet. We have also compared the proposed routing algorithms with another greedy routing technique, named Random Detour (), which selects the horizontal routing layer of a detour-routing path randomly. The routing algorithms presented in this paper select the horizontal layers of the detoured routing paths judiciously such that the temperature of the chip gets reduced with minimum degradation in average network latency. These algorithms are oblivious in nature, which do not require any extra hardware to generate or communicate the temperature of different tiles present in the NoC. The proposed algorithms can be incorporated inside both proactive and reactive temperature management systems. Moreover, the proposed on-line routing algorithm can be used as a reactive downward routing strategy in a TAVT scheme.

3. Problem formulation
In this section, a formulation has been provided for the thermal-aware routing problem. To start with some important definitions related to the work have been presented. Inputs to the targeted problem are as follows.

1.
Communication Graph of the application (CG(P,E)) [27]: Communication pattern of an application is represented as a directed graph , where each node 
 represents a process of the application. Each edge 
 represents a traffic flow between the processes 
 and 
  and is associated with a weight 
, denoting the bandwidth requirement of the flow.

2.
Topology Graph for the NoC platform (ToG(R,L)) [25]: It is a directed graph, where each node 
 represents a router and each edge 
, signifies a link between the routers 
 and 
. Floorplan of different logic layers present in the NoC is divided into a number of homogeneous rectangular tiles, depending on the size of the NoC. Each tile contains a core, a memory and a router.

3.
Process to Core mapping: The process to core mapping array 
 stores the tile id 
 of the core to which the process 
 has been mapped.

4.
Traffic Flow Graph of the application (TFG(R,E)): Using the process to core mapping (
) and the Communication Graph () of the application, Traffic Flow Graph,  is generated.  is a directed graph, where  represents the set of all the routers present in the NoC. Each edge 
 represents a traffic flow between the routers 
 and 
 and has an associated weight 
 denoting the corresponding traffic flow rate.

With these given inputs, the proposed method finds the optimum thermal-aware routing paths for all the flows present in the , such that no deadlock occurs. As mentioned in [2], selection of the least thermally-resistive minimal routing paths for all the edges in  reduces the temperature of the chip with negligible degradation in the chip performance. This routing technique (mentioned as EDGE in [2]) has been referred to as downward shortest path routing () in this paper. We have considered that the heat sink has been placed at the bottom of the chip. Therefore in , for all the edges  in , when the source router 
 belongs to an upper logic layer than the destination router 
, ZXY routing is applied, otherwise XYZ routing is followed. The routing paths to be followed using  routing algorithm have been shown as solid lines in Fig. 1. However, further reduction in the chip temperature can be achieved, by detouring some of the edges in the downward direction by a certain number of logic layers as shown in Fig. 1. This technique shifts the -routing load of the traffic flow to a layer which is closer to the heat sink. However, the reduction in temperature is achieved at the cost of an increase in the average packet delay of the network as the detoured paths are non-minimal in nature. In this work, we have optimally selected some of the traffic flows in the  to be detoured by an optimal number of logic layers such that the peak temperature of the chip (
) is minimized and a maximum overhead constraint on the average packet delay () of the network is also maintained. For the rest of the traffic flows present in the ,  algorithm has been applied to find the routing path. All the routing strategies proposed in this work are dead-lock free. Fig. 2 shows the turns allowed in our proposed routing method in different geometrical planes — ,  and  planes. It can be observed that none of the turns shown in Fig. 2 results in a cyclic dependency. This ensures that deadlock can never occur. All the alternative detour paths (
 in Table 1) considered in both of the proposed MILP based routing techniques, follow the turn model given in Fig. 2. Hence, these methods automatically become deadlock free without considering any explicit constraint related to deadlock avoidance.


Download : Download high-res image (414KB)
Download : Download full-size image
Fig. 1. Detouring of the routing paths, obtained using .

4. Proposed thermal models
In this section, we have presented HotSpot [28] based compact thermal models (CTM), which work on the duality principle between the thermal and electrical circuits. CTM determines the equivalent electrical circuit (EEC) of the chip from its geometrical and power specifications. This EEC is solved for the node voltages, which are equivalent to the temperature generated at different blocks present in the chip. In this section, we have proposed two different thermal models. The first one, named Simple Thermal Model (STM) which is a one-dimensional approximation of the 2D Compact thermal model of HotSpot. STM considers only the vertical thermal resistances between the layers. In 3-D ICs, the vertical thermal coupling between two consecutive Si-layers is much stronger compared to the horizontal thermal coupling within a single Si-layer [2], [4], [7], [29]. Also, detouring a routing path does not modify the horizontal thermal coupling of the chip as it retains the same horizontal routing path trace. Therefore, we find this model to be very useful in analyzing the effect of detour routing in 3D NoCs. The other thermal model that we have considered in this work is Detail Thermal Model (DTM). DTM considers both the inter-layer vertical thermal resistances and intra-layer horizontal thermal resistances. This is an extension of the steady-state Block Model of HotSpot for 3D ICs by introducing additional thermal resistances for the extra Si- and TI-layers. This model provides more accurate prediction of chip temperature compared to STM. Also, DTM is able to produce almost the same peak temperature, 
, and the corresponding temperature profile of the chip as generated by the Grid Model of HotSpot. However, STM is much simpler and hence takes less computation time compared to DTM. Both of these models can be easily implemented as a set of linear equations.

As in the present work, we have mainly focused on finding the effect of detour path selection on the steady state temperature of the chip, we have neglected the thermal capacitances present in the EECs.


Table 1. List of the variables, constants and symbols used in -.

Name	Type	Description
Real variable	Total traffic load (in flits/s) on the logic layer .
Real variable	Total traffic load (in flits/s) on a logic layer  generated by the edge  in .
Binary variable	
, represents that the  routing path for the edge  in  is to be detoured by  logic layers.
Real variable	Average Packet Delay of the network in number of hops.
Constant	Sum of the traffic flow rates of all the edges present in .
Constant	Average Packet Delay of the network considering  routing paths for all the traffic flows in .
Constant	Maximum allowable overhead on 
Constant	Traffic flow rate of edge  in  (in flits/s).
Constant	Total number of alternative detour routing paths for the edge  in .
Constant	Number of routers present in the th alternative path of edge  that belongs to the logic layer .
Constant	Total number of logic layers (i.e. Si-layers) present in the 3D Mesh NoC.
Constant	Maximum traffic load that the logic layer  can support. It is calculated as the sum of the frequencies of all the routers present in that logic layer.
Constant	Total number of edges present in .
Constant	Average energy consumption of a router to process a flit.
Constant	Frequency of the routers (in cycle/s).
Symbol	An edge in .
Symbol	A logic layer in the 3D Mesh NoC.
Symbol	An alternative detoured routing path id.
Symbol	th alternative path for the edge  in , which is obtained by detouring the  routing path for that edge by  number of logic layers. Thus  denotes the minimal routing path obtained using  routing.
4.1. Simple Thermal Model (STM)
The primary source of heat generation in a chip is governed by the energy dissipation of the tiles present in the silicon layers (Si-layers). This heat, generated in the Si-layers, flows towards the heat sink though the following layers : Silicon layer (Si-layer)  Thermal Interface layer (TI-layer)  Heat Spreader (Hsp)  Heat Sink (Hsk). This heat-flow path is referred as primary heat transfer path (PHTP), which has been depicted in Fig. 3. Fig. 4 shows the equivalent electrical circuit (EEC), obtained using the proposed simple thermal model. As STM neglects horizontal thermal resistances, a node present in the EEC denotes an Si-layer in the chip. Therefore, if there are  number of Si-layers present in the chip, there would be  number of nodes present in the EEC. The magnitude of the current source connected to each node is determined as the sum of the power consumptions of all the blocks present in the corresponding Si-layer. The resistances present in the EEC are equivalent to the vertical thermal resistances of the corresponding layers as described in Fig. 4. According to STM, the maximum temperature of the chip can be calculated as the temperature generated at the top most layer. Considering  for the top most Si-layer, the temperature generated at that layer (
) is calculated as the voltage of the corresponding node (
) present in the EEC, as explained in Eq. (1). (1)
As in this work we have assumed all Si- and TI-layers to have similar dimensions, all the thermal resistances, 
 can be considered to be equal, i.e.  
. Putting this value in Eq. (1), we have obtained the modified peak-temperature — (2)
Eq. (3) represents a simplified version of Eq. (2). (3)
The magnitude of 
 in Eq. (3) is calculated as the total power consumption of the Si-layer . Power consumption of an Si-layer can be expressed as sum of the computation (i.e. 
) and communication (i.e. 
) power consumptions of all the blocks present in that layer. 
 is calculated as the sum of the power consumptions of all the core and memory blocks present in the th Si-layer, whereas 
 is determined as the sum of the power consumptions of all the router blocks present in the layer. Eq. (4) represents the final expression of the peak temperature derived using STM. (4)

4.2. Detail Thermal Model (DTM)
The proposed detail thermal model is an extension of the block model of HotSpot [28] for 3D ICs. In contrast to STM, DTM considers each block present in each layer of the chip to be a node in the EEC. As depicted in Fig. 3, each layer can be divided into several tiles. A 
 3D Mesh NoC contains 
 number of Si-layers and each Si-layer is divided into 
 number of tiles. Each tile contains a core block, a memory block and a router block as shown in Fig. 3. Therefore the total number of blocks present in each Si-layer is 
. Each TI-layer and the portion of the Heat Spreader and Heat sink layers present just below the Si-layers, can be divided into similar 
 number of blocks. Along with those blocks, as shown in Fig. 3, the Heat Spreader layer contains four and the Heat Sink layer contains eight extra peripheral blocks. Therefore, the total number of blocks present in the chip is 
. DTM considers both the vertical and horizontal resistances of each block, represented as 
 and 
 and 
, respectively in Fig. 5. Eqs. (5)–(7) have been used to calculate the horizontal and vertical resistances of each block. (5)
 (6)
 (7)
 
, 
 and 
 in Eqs. (5)–(7) represent the lengths of the block along the ,  and  directions respectively. Thermal conductivity of a particular layer is denoted by 
. As shown in Fig. 5, a current source is connected to each node. The magnitude of the current source depends upon the power consumption of the corresponding block. In order to solve the corresponding EEC, the conductance matrix and power matrix of the circuit are calculated. Each element 
 in the Conductance matrix (
), is calculated as the thermal conductance between the nodes  and  present in EEC. Each element 
 of the power matrix (
) is calculated as the power consumption of node  in EEC. Next, Eq. (8) is solved to determine the temperature matrix 
, containing the temperature values of all the blocks present in the chip. (8)
Each element 
 present in the temperature matrix (
) represents the electrical voltage of node  in EEC, which on the other hand represents the temperature generated at the corresponding block present in the chip floorplan.

5. Thermal-aware mixed integer linear programming based detour techniques
In this section, we have described the proposed Mixed Integer Linear Programming (MILP) formulation for the thermally efficient detour path selection problem under a maximum average packet delay (APD) constraint. Two different MILP formulations have been presented here – - and -, based on the thermal models – STM and DTM, respectively. Input to the MILP formulations is the set of all the alternative detoured routing paths along with the non-detoured (or zero-detoured) routing path (obtained using  routing algorithm) for each edge  in .

5.1. - formulation
The MILP formulation described in this section has used the proposed one dimensional thermal model STM.

5.1.1. Variables, constants and symbols
Table 1 illustrates the list of variables, constants and symbols used in -, along with their types and usages.

5.1.2. Objective function
The objective function of the MILP-formulation is to minimize the peak temperature of the chip. Eq. (4) shows the peak temperature of the chip using STM. It can be noted that the peak temperature depends on both computation and communication power consumption of the logic layers. However, the detouring of routing paths only modifies the communication power of the tiles. Therefore, omitting the computation power consumption related terms in Eq. (4), the objective of the current MILP formulation can be expressed using Eq. (9). (9)
Communication power consumption of a logic layer depends on the traffic load on that logic layer (
) and the energy consumption of each router to process a flit (
). Substituting 
 in Eq. (9) with its value mentioned in Eq. (10), we obtained the modified objective in Eq. (11) (10)
 (11)
Removing the constant term 
 in Eq. (11), and rearranging the rest of the terms, the modified objective becomes — (12)
As shown in Eq. (12), the final version of the objective function contains two terms : the first term in Eq. (12) is generated due to the thermal resistances of the Si- and TI-layers (
), while the second term is due to the thermal resistances of the Heat Sink, Heat Spreader and convection thermal resistance from the bottom of Heat Sink to the ambient (
).

5.1.3. Constraint related to the alternative detour path selection
For any edge  in the , only one of its alternative detour paths should be selected. (13)

5.1.4. Constraint to determine the traffic load on an Si-layer
For all the alternative detour paths of a particular edge  in the , the number of routers belonging to a particular Si-layer has been pre-calculated and stored in the array named 
. This array is used as an input to the proposed MILP formulation. Eq. (14) determines the traffic load 
 on a particular layer resulting from an edge  in the , depending on the selected routing path. (14)
Eq. (15) calculates the total traffic load, 
 on a particular layer  as the sum of the traffic loads on that layer resulting from different edges of the  (i.e. 
). (15)
Eq. (16) is used to avoid congestions in the logic layers by maintaining the total traffic load on that layer below the bandwidth of the layer. (16)

5.1.5. Constraint related to the maximum allowable average packet delay
Eq. (17) determines the average packet delay () of the network as a ratio of the sum of the traffic loads on individual Si-layers in the 3D-IC stack to the total traffic load imposed on the NoC by the application. (17)
Eq. (18) restricts the  of the network within a pre-specified value over and above the minimum Average Packet Delay, 
 of the network. (18)

This completes the MILP-formulation for the detoured routing path selection problem using the Simple Thermal Model (STM). Next, we have described another MILP-formulation for the same problem, using Detailed Thermal Model (DTM), which considers both vertical and horizontal thermal resistances.

5.2. - formulation
Following subsections contain the description of variables, objective function and constraint equations used in the proposed -. It should be noted that the nodes present in the EEC, obtained using DTM, are referred to as thermal-nodes in this section due to the ease of explanation. These thermal nodes are further classified into four categories — core-nodes, memory-nodes, router-nodes and non-power-nodes, depending on the block present at that node position.

5.2.1. Variables, constants and symbols
Table 2 contains list of variables, constants and symbols used in the proposed - along with a brief description of their usages. Along with the parameters mentioned in Table 2, the variables — 
 and , the constants — 
, 
, , 
,  and  and the symbols — , ,  and , described in Table 1, have been reused in -.


Table 2. List of the variables, constants and symbols used in -.

Name	Type	Description
Real variable	Peak temperature of the chip.
Real variable	Temperature of thermal-node .
Real variable	Power consumption of thermal-node  if it is a router-node. Otherwise 
.
Real variable	Total traffic load on router-node . If  does not represent a router-node, 
.
Real variable	Traffic load on the router-node  due to edge  in . If  does not represent a router-node, 
.
Constant	
, if the thermal-node  is a router-node. Otherwise, 
.
Constant	
, if the th alternative path of edge  passes through the router-node . Otherwise, 
.
Constant	Total number of blocks present in each Si-layer of the 3D NoC floorplan, which is calculated as 
.
Constant	Total number of thermal-nodes present in the EEC of the chip, which is same as .
Constant	Element corresponding to the th row and the th column of the thermal conductance matrix generated using modified HotSpot [28], where both .
Constant	Element present in the th row of the power matrix generated using modified HotSpot [28].
Constant	Energy consumption of a router placed at the thermal-node  to process a flit.
Symbol	Represents a node in the EEC generated using DTM for the 3D Mesh NoC.
5.2.2. Objective function
The objective function of the proposed - technique is to minimize the peak temperature (
) of the chip. (19)
The peak temperature of the chip has been calculated as the maximum temperature of the blocks reposed at the topmost Si-layer of the 3D-IC. (20)

5.2.3. Constraint to calculate the temperatures of the thermal-nodes
Eq. (21) calculates the temperatures of the thermal-nodes using the thermal conductance and power matrices extracted from HotSpot [28]. In this formulation, we have considered the power consumptions of cores- and memory-nodes to be constants and the power matrix has been initialized with those values. Therefore, only the power consumptions for the router-nodes (
) have been considered to be variables in this MILP formulation. (21)

5.2.4. Constraint to calculate power consumptions of router-nodes
Power consumption of a router-node is calculated as a function of its traffic load, 
 (in flits/sec) and the energy consumption of the router to process a flit, 
. (22)

5.2.5. Constraint to calculate the traffic loads of routers
If an alternative detoured routing path  for an edge  in the  passes through the router block corresponding to the router-node , it increases its traffic load (in flits/sec) by the traffic flow rate of the edge, 
. This increase in the traffic load of a router by an edge  has been determined using Eq. (23). (23)
Eq. (24) determines the total traffic load (in flits/sec) on the router corresponding to the router-node  as a sum of the traffic loads generated on that router by all the edges of the , passing through it. (24)
Eq. (25) prevents router congestion by limiting the traffic load of a router within its bandwidth. (25)

5.2.6. Constraint related to the alternative detour path selection
This is same as Eq. (13).

5.2.7. Constraint related to the maximum allowable average packet delay
Eq. (26) calculates the average packet delay of the network as the ratio of sum of the traffic loads on each router to the total traffic flow rate of the . (26)
Along with Eq. (26), Eq. (18) of - is also used to restrict the Average Packet Delay of the network within a pre-specified APD-overhead. This completes the description of -.

All the objective and constraint equations of each MILP-formulation have been written in a file with .lp format (mentioned in the CPLEX-manual [30]) using C++. We have used CPLEX MILP solver [30] to solve both the MILP formulations and obtain thermally efficient routing paths for the application. It should be noted that these MILP based routing techniques are applicable only for applications with known traffic pattern. For the applications with unknown traffic pattern, we have proposed an application agnostic routing algorithm, named Thermal-aware Selective Detour (), described in the next section.

6. Thermal-aware Selective Detour (TSD) routing
In this section, we have designed a detour routing algorithm, which takes the detouring decision for a particular traffic flow based on the source and destination router addresses present in the packet header. Before going into the details of the proposed TSD routing algorithm, in the next two subsections, we have described some important theories and propositions related to detour path selection procedure, which have been used to develop the TSD routing algorithm. The theorems have been derived using Simple Thermal Model.

6.1. Necessary condition for detouring a routing path
Let us assume that the -routing portion of the  routing path is reposed on the logic layer 
 and the -routing portion of the target detoured routing path is reposed on the logic layer 
 as shown in Fig. 6. Therefore, to minimize temperature,  should be always less than , i.e. the logic layer 
 should be a layer below 
. Scenarios I, II and III in Fig. 6 represent the  (non-detoured) routing paths (represented using solid lines) and the possible detoured paths (represented using dotted lines) for different positions of the source and destination routers — 
 and 
, respectively. In any case, selection of a detour routing path instead of the  routing path is advantageous only if the increase in the peak temperature of the chip considering the  routing path is higher than the increase in the temperature using the detoured routing path. If we discard the common portions of the detoured and non-detoured routing paths present in Scenarios II and III in Fig. 6, both of the scenarios become equivalent to Scenario I. Therefore, it would be sufficient if we consider only the Scenario I to compare the thermal impacts of detoured and non-detoured routing paths. We have assumed that the incoming packet belongs to the edge  present in the  of the application and 
 is the traffic flow rate for the edge. Eq. (27) (derived from Eq. (12)) has been used to approximate the peak temperature for a selected routing path. (27)
Here, 
 represents the number of routers in Si-layer  forming a part of the routing path selected for the edge . Putting the corresponding values of 
 in Eq. (27), Eq. (28) determines the temperature generated using the  routing path.  represents the number of routers present in the horizontal portions of both the routing paths. (28)
In a similar way, Eq. (29) can be derived from Eq. (27), which approximates the temperature generated using the detoured routing path, obtained by detouring the  routing path by “-” logic layers. The first two product terms in Eq. (29) represent the temperature generated by the horizontal portion of the detoured routing path, whereas the 3rd and 4th terms represent the temperature generated by the vertical portions of the routing path. (29)
Therefore, the condition for choosing the detour path instead of the  routing path for traffic flow  with an unknown traffic flow rate 
, can be expressed by Eq. (30). (30)
Eq. (31) has been obtained by simplifying Eq. (30). (31)
 
Eqs. (32)–(37) show the simplification procedure of Eq. (31), in a step by step manner. The final simplified expression obtained in Eq. (37) shows the necessary condition for detouring a routing traffic flow, obtained using STM. (32)
 
 (33)
 
 
 (34)
 
 
 (35)
 
 
 (36)
 
 
 (37)
 
According to Eq. (37), the decision of detouring a packet depends only on the positions of the source and destination routers and the ratio of the thermal resistance 
 to 
. As 
 
 is a constant dependent on the thermal specification of the chip, the detouring decision for a packet can be taken at the source router itself using the destination router’s address mentioned in the packet header. Eq. (37) only determines whether the packet should be detoured or not. The depth of detour (i.e. “-”) determination procedure has been analyzed in the next subsection.

6.2. Determination of the depth of detour
Eq. (38) denotes the condition to choose logic layer 
 instead of 
 to detour a particular traffic flow with an objective to minimize the peak temperature of the chip. This condition has been derived from the RHS expression of Eq. (31). (38)
 
 
Eq. (39) represents a simplified form of Eq. (38). (39)
 
However, if we replace  in Eq. (39) using the condition of detour mentioned in Eq. (37), Eqs. (40)–(41) can be obtained. (40)
 
 
 (41)Eq. (41) is always true as . As Eq. (41) is valid for any target detour logic layer , it proposes the fact that if detour decision has been taken for a path, it should be detoured through the lowest logic layer present in the chip. Therefore the value of the target detour layer  should always be one as depicted in Fig. 6. Replacing  with one in Eq. (37), we have obtained the modified condition for detour as — (42)
 
Eq. (42) represents the final expression representing the condition for detour, derived using the Simple Thermal Model. However, using the thermal specifications considered in the present work (mentioned in Table 6 in Section 7), the ratio of the thermal resistances 
 and 
 has been found to be 0.28. Eq. (43) has been derived by substituting the value of 
 
 in Eq. (42). (43)As  and  both are integers in Eq. (43), the final expression for the condition of detour is given by Eq. (44). (44)Eq. (44) is valid only for the thermal specification of the chip mentioned in Table 6, whereas Eq. (42) describes the generalized condition for detour. The next subsection describes the routing algorithm devised for the proposed thermal-aware selective detour technique, based on Eq. (44).

6.3. Proposed thermal-aware selective detour (TSD) routing algorithm
Algorithm 1 shows the proposed TSD routing technique. Input to the routing algorithm is the header flit (
) of the packet and the input port id () of the router in which the header flit has arrived. It is assumed that the header flit of an incoming packet contains the address of the destination router (
  ) along with two special purpose bits —  and , which signify whether the detour routing or the  routing has to be selected to route the packet. These two flag bits are set by the source router, depending on the condition mentioned in Eq. (44).  represents the address of the current router at which the packet has arrived. The variables 
, 
, 
, 
, 
 and 
 represent the ,  and  coordinates of the current and the destination routers, respectively.  and  denote input and output ports of the router, respectively. LOCAL and DOWN represent the ports of the router connecting the core present in the same tile and to the router present in the downward direction, respectively. If the current router is the destination, the packet is forwarded to the core port. Otherwise, the incoming port of the packet is checked. If the flit has arrived in the core port of the router, the  and  bits present in the flit are modified.


Download : Download high-res image (276KB)
Download : Download full-size image
It should be noted that the numbering of the logic layers ( and ) in Eq. (44) starts from 1, whereas the  coordinates used in Algorithm 1 starts from 0. If the header flit satisfies the detour condition, the flag bits  and , present in the header flit are set to logic ‘1’ and logic ‘0’, respectively. However, if the header flit does not satisfy the detour condition, the packet is selected to be routed in the downward direction, if the source router is present at a higher logic layer than the destination router. In that case, the flag bits  and  are set to logic ‘0’ and ‘1’, respectively. However, if the source router is present at a lower logic layer than the destination router the packet is routed using simple  routing algorithm. In that case, both the flag bits  and  are set to logic ‘0’. Once the flag bits are set by the source router of the packet, the rest of the routers present in the routing path route the packet following these two bits. If  is found to be ‘1’ in the incoming packet header, the packet is routed towards the downward direction until the lowest possible logic layer in the chip has been reached. Otherwise, if  is found to be at logic ‘1’, the packet is routed in the downward direction till the destination logic layer of the chip has been reached. However, in both the cases, at the end of downward routing, both  and  bits are set to logic ‘0’. Once the packet has reached the lowest logic layer using detoured routing, or the destination router’s logic layer using  routing, simple  routing algorithm is used thereafter to route the packet to the destination. It can be noted that a similar kind of routing algorithm can be used to implement the proposed application-specific routing techniques — - and -. In that case, the only change we need to make in Algorithm 1 is to set the detour flag bit  of the header flit using the outputs of the corresponding MILP formulations. Therefore a routing table should be present in each router, which stores the destination address and the corresponding detour-routing decision (obtained using the MILP formulation) for all the edges emanating from the router in the  of the target application.
The hardware architecture required to implement this routing algorithm is almost similar to that performing  routing. The former one requires one extra flag bit,  in the packet header. Also, the router architecture to implement  requires additional hardware to set the  bit and check its status. As described in [31], a router architecture contains mainly five blocks — (i) Input Buffer (IBuf), (ii) Route Computing Unit (RCU), (iii) Virtual Channel Allocator (VCA), (iv) Switch Allocator (SA) and (v) Crossbar Unit (CU). The proposed routing technique, only requires to modify the RCU present in the router. Therefore, we have designed the RTL of the Route Computing Unit required to implement  routing and the proposed  routing using Verilog. Power consumption of the RCU present in different routers have been determined using Synopsys Design Vision tool, considering 90 nm process technology and 2.66 GHz operating frequency. It has been observed that the proposed RCU architecture requires 430 μW of extra power compared to the RCU of  routing. However, this results in a less than 1% increase in the total router power consumption due to the presence of much more power consuming stages like IBuf and CU in the router architecture. Therefore, for simplicity, we have used the same router power consumption for all the different routing algorithms.

7. Results and discussion
In this section, we have compared the temperature profiles and network performances obtained using the proposed routing methods -, - and , with the minimal path routing algorithms – ,  and  and the greedy detour approaches – All Detour () and Random Detour (). As mentioned in Section 2,  is similar to the temperature-aware downward routings proposed in [2], [5]. On the other hand,  and  use the same detour layer selection techniques as proposed in [7], [8] and [19], respectively. However, it should be noted that, the results reported in this section do not include throttling of the router, as it is out of scope of the current work. Also, the paper does not include network congestion while evaluating the proposed and other strategies mentioned in the literature. Different strategies of handling the network congestion in the context of detour routing have been mentioned in the conclusion section of the paper.

Experiments have been conducted on a 3D mesh based NoC topology. The size of the NoC has been taken to be 8 × 8 × 4, where the size of each layer is 8 × 8, having four Si-layers. We have used system level benchmarks from Splash-2 [32] and PARSEC [33] suites for dynamic evaluation of performances of different application specific and application agnostic routing algorithms, mentioned in this work. We have used SniperSim [34] to obtain the traffic traces for the benchmark applications — , , , , ,  and . Different configuration parameters used in the SniperSim simulator have been presented in Table 3. Along with the benchmark applications, we have used synthetic application — , , , ,  using TGFF [35], a task graph generating tool. The maximum in-degree and out-degree parameters in TGFF have been varied from 4 to 16, to generate graphs with monotonically increasing edge densities. In all the TGFF graphs, the range of the communication bandwidth requirement for edges has been considered to be 10–500 MBps, which is comparable to the multi-media benchmarks mentioned in [6] and [27]. On the other hand, compared to the s obtained for the benchmark applications, the s obtained using TGFF, contains an irregular traffic pattern with fewer number of edges. This gives a fair comparison between the system performance for different routing algorithms, under a wide variety of traffic scenarios.

We have used AccessNoxim 3.0, a cycle accurate 3D Mesh based NoC simulator, to determine the overall network performance, in terms of average packet latency (Lat). We have modified the routing algorithm, in AccessNoxim 3.0 to include — -, -, , ,  and . We have extended the traffic generation section in AccessNoxim 3.0 to accept the traffic traces for different benchmark applications obtained from SniperSim [34] and the traffic patterns of synthetic applications obtained from TGFF tool [35]. The configuration parameters of AccessNoxim 3.0 have been presented in Table 4.


Table 3. Simulation parameters used in SniperSim.

Parameter	Value
System architecture	Xeon X5550 Gainestown
Core frequency	2.66 GHz
Number of cores	256
Shared cache
Data access time	30 cycles
Tags access time	10 cycles
Cache size	8 MB
Cache block size	64 kB
DRAM
Latency	45 cycles
Network
Link bandwidth	32 bits
Hop latency	1
Concentration	1
Next, we focus on the procedure to generate the temperature profile of the chip considering different routing techniques presented in this paper. Average power consumption of the core and memory blocks have been calculated using the idle time information of the core obtained from Snipersim [34] and power density (PD) of Xeon X5550 Gainestown processor. To determine the average power consumption of different routers present in the NoC for different routing algorithms, we have extracted the traffic load for each router in a given 3D Mesh based NoC from AccessNoxim 3.0. Using Eq. (10) mentioned in Section 5.1, traffic load on each router is translated into its corresponding average power consumption. The energy consumption of a router (communication energy) to process a flit, 
 used in Eq. (10), has been calculated using Orion 2.0 power model [36]. Table 5 shows the parameter setting for Orion 2.0. For simplicity, we have used a generic 7 port router for energy evaluation. For the ease of calculation, frequency of the routers 
 used in Eq. (10), has been considered to be same as the frequency of the cores. This has been mentioned in Table 5. Using the power profile of different computation and communication units present in the chip, temperature profile of the chip has been obtained by HotSpot [28]. We have used the grid model of HotSopt [28], with a grid size of 1024 × 1024. Table 6 enlists the geometrical measurements and thermal conductivities of different layers present in the chip, which have been considered in this paper while determining the temperature profile. All the simulations have been run in a host computer with the following specifications —  with   - , .


Table 4. Simulation parameters used in AccessNoxim 3.0.

Parameters	Values
Buffer depth	16 flits
Flit size	32 bits
Packet size	Application dependent
Warmup period	1000 clock cycles
Simulation period	10 000 clock cycles
Routing	User specified

Table 5. Simulation parameters used in ORION 2.0.

Parameter name	Value
Technology	90 nm
Transistor type	NVT
1.0 V
Router frequency	2.66 GHz
Flit width	32
Number of ports of a router	7
Number of virtual channel	2
Input buffer size	16
Number of pipeline stages	4
Wire layer type	Global
Wire width and spacing	DWIDTH_DSPACE

Table 6. Values of some important HotSpot parameters.

Parameters	Values	Parameters	Values
t_chip	0.00015 m	k_spreader	385 W/(m K)
k_chip	149 W/(m K)	s_sink	0.064 m
t_interface	0.00002 m	t_sink	0.0069 m
k_interface	0.3 W/(m K)	k_sink	385 W/(m K)
s_spreader	0.048 m	r_convec	0.1 K/W
t_spreader	0.001 m	T_ambient	25 °C

Table 7. Comparison of peak temperature of the chip 
 resulted using different routing techniques.

PARSEC and SPLASH2 benchmarks
APP	# Cores	# Edges	 [2], [5]			 [19]	 [7]–[8]	-	-	
Temp	APD	Temp	APD	Temp	APD	Temp	APD	Temp	APD	Temp	APD	Temp	APD	Temp	APD
Dedup	256	11 702	371.07	7.42	384.6	7.42	383.7	7.42	368.6	8.65	367.23	9.89	363.92	8.95	363.79	8.73	363.7	8.83
Fluidanimate	256	7950	371.98	7.73	386.25	7.73	383.45	7.73	369.76	8.65	367.33	9.59	365.1	8.97	365.1	8.75	365.1	8.89
Facesim	256	11 702	370.85	7.52	383.48	7.52	383.07	7.52	368.94	8.51	365.97	9.53	363.7	8.86	363.51	8.45	363.7	8.77
Raytrace	256	15 320	371.47	7.33	382.35	7.33	384.2	7.33	369.85	8.38	367.33	9.45	364.7	8.65	364.7	8.41	364.7	8.54
Vips	256	15 328	369.98	7.15	383.29	7.15	382.1	7.15	368.64	8.18	366.55	9.23	363.04	8.42	362.86	8.23	363.14	8.3
FFT	256	15 328	365.91	7.36	379.32	7.36	379.51	7.36	364.14	8.19	362.48	9.01	360.17	8.4	360.54	8.27	360.07	8.32
Swaptions	256	15 328	367.05	7.64	378.08	7.64	378.33	7.64	365.39	8.53	363.19	9.44	361.01	8.82	361.6	8.4	360.97	8.75
TGFF benchmarks
APP	# Cores	# Edges	 [2], [5]			 [19]	 [7]–[8]	-	-	
Temp	APD	Temp	APD	Temp	APD	Temp	APD	Temp	APD	Temp	APD	Temp	APD	Temp	APD
TGFF_256_1	256	436	366.95	7.49	381	7.49	377.52	7.49	364.69	8.53	360.88	9.37	358.98	8.77	358.52	8.51	358.82	8.67
TGFF_256_2	256	565	369.7	7.58	381.79	7.58	383.85	7.58	366.67	8.31	362.67	9.11	360.51	8.6	360.51	8.14	361.01	8.52
TGFF_256_3	256	750	368.91	7.41	384.38	7.41	380.6	7.41	366.7	8.23	364.14	9.11	361.98	8.56	361.64	7.96	361.97	8.5
TGFF_256_4	256	961	369.85	7.46	384.1	7.46	382.64	7.46	368.02	8.28	364.89	9.11	362.83	8.53	362.7	8.22	362.76	8.49
TGFF_256_5	256	1402	370.42	7.54	379.82	7.54	385.27	7.54	367.73	8.37	365.04	9.15	363.35	8.61	363.17	8.18	363.32	8.55
Temp is in K and APD is in Hops.

Table 7 shows the peak temperature of the chip obtained using different routing techniques. It can be observed that among the minimal path routing techniques — ,  and ,  routing technique reduces the peak temperature of the chip on an average by 12.68°compared to the other two routing algorithms for all applications. However, Table 7 shows that further reduction in chip temperature can be achieved using the detour based routing techniques. It can be observed that compared to  routing, the proposed routing methods -, - and  produce 7.07° , 7.12° and 7.07° more temperature reductions, respectively. The average run-time taken by CPLEX [30] to solve - and - is 0.06 s and 11.5 s, respectively. However, it can be observed that - is able to produce almost similar results as -. This is due to the fact that the proposed detouring techniques do not alter the horizontal routing pillars. Therefore, it has very negligible impact on the horizontal thermal coupling. On the other hand, the greedy detour method  can only produce 2.08° more temperature reduction compared to . Though the All Detour () technique is able to achieve 4.7° temperature reduction, it increases the average packet delay of the network significantly. Along with the peak temperatures, the average packet delays (APD is calculated without considering the router-congestion) of the networks using different routing methods are also listed in the corresponding cells. As expected, the shortest path routing techniques — ,  and  require the least APD. It can be observed from Table 7 that the percentage degradation in APD compared to any minimal path routing, obtained using the detoured routing methods — , -, - and  is within 20.61% for all the cases. However, for , this degradation in APD has reached up to 33.28%. This degradation in APD may increase the average packet latency of the network, as APD provides a static prediction of the dynamic packet latencies. Fig. 7 depicts the improvement in temperature obtained using different detour techniques compared to the  routing. It can be observed from Fig. 7 that greater improvement in chip temperature have been obtained for the synthetic applications  and  compared to the other synthetic and benchmark applications (present in SPLASH2 and PARSEC benchmark suites). After analyzing the communication patterns of different applications it has been found that these two synthetic applications have more communication volume between the cores present in the higher Si-layers with the distance between the cores satisfying Eq. (44) mentioned in Section 6.2. Therefore, a greater communication volume has been detoured for the aforementioned synthetic benchmarks using the proposed detour routing techniques and hence more improvement in chip temperature has been obtained. Fig. 8 shows the degradation in average packet latency () obtained for those techniques compared to  routing technique. It can be observed that the average degradation in  obtained using the proposed detour based routing methods are less than 16.2% compared to  results using  routing algorithm for all the applications. On the other hand, the same average packet latency degradation is about 24.97% using the All Detour routing method.


Download : Download high-res image (271KB)
Download : Download full-size image
Fig. 7. Reduction in temperature obtained using different detour techniques compared to  routing.


Download : Download high-res image (279KB)
Download : Download full-size image
Fig. 8. Percentage degradation in average packet latency compared to the average packet latency obtained using  routing.


Download : Download high-res image (933KB)
Download : Download full-size image
Fig. 9. Temperature profiles obtained using different routing techniques.

Figs. 9a and 9b show the temperature profile obtained for different logic layers present in the chip using different minimal path routing techniques (,  and ) and the proposed routing technique , for the applications Dedup and TGFF_256_5, respectively. Si-layer 4 represents the top-most logic layer of the chip, present furthest from heat sink, whereas Si-layer 1 represents the bottom-most one, closest to the heat sink. It can be observed in both of the figures that Si-layer 4 is the hottest one among all the four logic layers due to its high thermal resistance to the heat sink. However, for both the applications, the temperature profiles obtained using the proposed routing algorithm  show the least temperature variance among the different logic layers. This is due to the reason that  distributes the traffic loads among different layers considering their heterogeneous thermal resistances.


Download : Download high-res image (305KB)
Download : Download full-size image
Fig. 10. Comparison of peak temperatures obtained with varying average packet delay overhead using - and -.


Download : Download high-res image (963KB)
Download : Download full-size image
Fig. 11. Peak temperature variation obtained using transient simulation of HotSpot for different applications.

The temperature values reported for - and - in Table 7 have been obtained without considering the constraint on the maximum allowable average packet delay. However, both of the MILP based routing methods take the allowable overhead (
) on the minimum achievable average packet delay (
) as a constraint, while minimizing the temperature. Therefore, next we have conducted a set of experiments to analyze the change obtained in minimum achievable peak temperature for gradually increasing 
. We have chosen one real benchmark application,  and one synthetic application  to perform these experiments. Fig. 10 shows the corresponding results. For lower values of 
, as we increase the allowable 
, the peak temperature obtained using both the MILP formulations reduces. However, after a certain increase in 
, we have obtained the minimum attainable peak temperature mentioned, in Table 7. Thereafter, further increase in 
 does not make any change in the peak temperature of the chip. This is due to the reason that detouring some of the edges in the  may not reduce the temperature, instead it may increase the same. However, from this APD vs. temperature plot, the user can select the minimum value of 
 to attain the threshold temperature of the chip. It can be observed from Fig. 10 that the required 
 in Table 7 to obtain the minimum temperature can be reduced from 20.61% to 15% for - and 17.65% to 15% for - for the application . Similarly, for the application , the required 
 can be reduced from 14.19% to 11% for - and from 8.48% to 8% for -. Therefore, - is able to reach the optimum temperature with lesser latency degradation, compared to -.

To validate the efficiency of our proposed on-line routing technique , we have performed a set of transient simulations using the traffic traces and core power consumption obtained from Snipersim simulator for all the benchmark applications. We have used the 3D grid model of HotSpot to perform the transient analysis. The results, shown in Fig. 11, plot the transient peak temperature values (T signifies the increase in temperature compared to the ambient temperature) of the chip obtained in each HotSpot-cycle. The results are shown up to 350 ms (for 350 HotSpot-cycles, where each cycle is of 1 ms duration) after which the variation in peak temperature stabilizes around the corresponding steady state values. Analyzing the increase in temperature obtained using different routing approaches, it can be observed that compared to  and  routing techniques  routing is much more thermally efficient. On the other hand, the detour methods (,  and ) are more thermally efficient compared to . Also, it can be observed in Fig. 11 that among the detour methods, the proposed online detour based routing technique,  achieves least peak temperature of the chip. The average improvement obtained in peak temperature of the chip using  compared to  is about 7° for all the benchmark applications.

It can be observed that the transient analysis results described above almost completely resemble the steady state analysis results presented earlier in this section. This is due to the fact that detouring a routing path through a lower Si-layer using the proposed detouring methods is always thermally efficient irrespective of the temperature of the other power consuming blocks present in the chip (as described in Sections 6.1 Necessary condition for detouring a routing path, 6.2 Determination of the depth of detour).

8. Conclusion and future work
The routing techniques proposed in this work optimally detour some of the traffic flows, by a number of logic layers in the downward direction closer to the heat sink, such that the peak temperature of the chip reduces. We have analyzed both theoretically and experimentally that detouring all the traffic flows present in the  of the application through the lowest Si-layer or a randomly selected Si-layer present in the chip may not reduce chip temperature effectively. Also, detouring all the traffic flows may result in a significant degradation in average packet delay of the network. Therefore, in this work, we have presented off-line application-specific Mixed Integer Linear Programming (MILP) techniques — - and - and on-line application-agnostic routing algorithm,  to optimally select the detour paths, such that the chip temperature can be reduced with minimum degradation in the network performance. We have conducted a large number of experiments with real and synthetic benchmark applications. Experimental results show a significant reduction in both steady- and transient-state peak temperature of the chip using the proposed detour based routing methods compared to the other approaches following minimal path and greedy detour. Also, it has been observed that the proposed methods are able to produce more temperature improvement with less degradation in average packet latency for all the applications. However, none of these proposed routing techniques consider the traffic congestion. In case of router congestion, oblivious routing strategies proposed in [6], [25] or [20] may be used to overcome such situation. Congestion can also be avoided by applying traffic load balancing adaptive routing techniques [4], [5], [21] in the lowest Si-layer. Another way of handling this traffic load is by considering modification in the underlying NoC architecture such as increasing buffer size, number of virtual channels, port- and link-widths etc. of the routers present in the lowest logic layer compared to the routers present in the other layers. This heterogeneous NoC structure may enable the lowest NoC-layer to handle the additional packet loads of detour routing without causing traffic congestion. However, each of the above mentioned approaches to reduce router congestion has their own trade-offs e.g. increase in power and area due to additional hardware requirement, need for deadlock management strategies etc. Therefore the plan for future work is to amend the proposed detour routing techniques by applying a suitable congestion-management strategy, with detail analysis of the performance and trade-off factors.