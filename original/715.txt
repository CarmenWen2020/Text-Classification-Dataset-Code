Abstract
We note that a recently described data structure, the Neighborhood Grid, is equivalent to a data structure developed in the mid-1980s called the Monotonic Lagrangian Grid (MLG). The MLG was originally developed to support high-performance molecular and fluid dynamics simulations on both supercomputer and vector processing architectures and still finds use in those and other areas. In this paper we emphasize that the rediscovery of the MLG offers benefits to users of the Neighborhood Grid in the form of an existing literature with results relevant to its efficient implementation in various contexts while users of the MLG similarly benefit from new theoretical results obtained for the Neighborhood grid.

Previous
Next 
Keywords
MLG

Monotonic Lagrangian grid

Near-neighbor algorithms

Neighborhood Grid

Spatial data structures

1. Introduction
One of the significant challenges in science and engineering is maintenance of communication between disciplines which have common underlying problems. For example, the need for algorithms and data structures for storing spatial objects so that proximity queries can be efficiently supported is shared by a wide variety of applications. In particular, any application involving the modeling and/or simulation of interacting spatial objects will need a means for efficiently detecting pairs of objects that are physically near enough to each other to influence their respective states, e.g., kinematic trajectories.

From a computer science perspective the class of so-called “near-neighbor” problems has been examined in terms of worst-case computational complexity for specific types of queries: range queries, which ask for all objects within a specified spatial region, and nearest-neighbor queries, which ask for the object of minimum distance (according to a given metric) to a given query object. These queries are well understood and algorithms with provably optimal computational complexity have been developed [10]. However, these theoretically optimal algorithms and data structures are not necessarily the most efficient in practice when implemented on highly specialized high-performance architectures.

In the mid-1980s the Monotonic Lagrangian Grid (MLG)1 was developed at the Naval Research Laboratory (NRL) to allow sets of 2- and 3-dimensional spatial particles to be efficiently mapped onto vector and parallel processing architectures for large-scale simulations of molecular and fluid dynamics systems [1], [7], [8]. The MLG was developed as an alternative to algorithms already in use for those applications and likely would not have occurred if not for the fact that at that time the field of molecular and fluid dynamics as a whole was unaware of the relevant computer science literature. This is interesting because while the asymptotically optimal computer science algorithms provide more rigorous performance guarantees, it is unlikely they would have provided significantly better (if at all) practical performance due to the implementation challenges they posed compared to the relatively simpler MLG.

In this paper we discuss the MLG and provide pointers to its literature (along with clarification of potential misconceptions therein) and its recent rediscovery as the Neighborhood Grid (NG).

2. MLG and the neighborhood grid
The problem of finding proximate pairs (or groups) of objects in a spatial dataset is computationally challenging because the naive brute-force approach of comparing every element of the dataset to every other element scales quadratically with the size of the dataset. This complexity is not a problem for small datasets, and in fact the brute-force approach was widely used on supercomputers of the 1980s because it could be easily “vectorized” to exploit the pipeline parallelism provided by, e.g., the Cray X-MP and later the Cray Y-MP. However, as dataset sizes increased it became clear that more effective algorithms were needed.

Grid-based methods, e.g., due to Hockney & Eastwood [3], were among the earliest data structures developed specifically for high-speed simulation of particle systems. A limitation of these methods was that the number of particles per grid cell was not fixed, so additional data structure overhead was required to dynamically maintain the grid as the set of objects associated with each cell changed during the course of the simulation. This variable number of objects per cell proved to be an obstacle to the efficient mapping of information onto a fixed memory layout, or configuration of processors, and therefore significantly diminished the extent to which the special features of a given supercomputing architecture could be exploited.

The MLG addressed many of the limitations of conventional grid methods by mapping a set of  2-dimensional points/particles to distinct cells in a  grid such that the  coordinates of points in every row are in sorted order and the  coordinates in every column are also in sorted order. The fact that such a mapping always exists may at first seem surprising until one recognizes that it can be constructed simply by finding (in  time) the  points with the smallest -coordinate values, placing them in the first column, and then sorting them according to their -coordinate values. Repeating this for the remaining columns produces the desired MLG order in  time. The attractive feature of the MLG is that the  points can be mapped to a rectangular array with no grid-related overhead. (This feature would later be exploited for mapping 3-dimensional point sets onto the grid-configured MIMD architecture of the massively-parallel -processor Connection Machine [2] at NRL in the late 1980s.)

The effectiveness of the MLG was demonstrated in a variety of physics-based simulation applications in which particles would tend to be uniformly distributed within a rectangular region/volume during the course of the simulation. When applied to more general distributions, however, the MLG proved somewhat less effective because the mapping of the distribution to a fixed grid would often lead to significant deviations between their spatial proximity and their proximity in MLG index-space. In other words, points which may be spatially close to each other are not necessarily mapped according by the MLG ordering to nearby grid cells. Despite this observed behavior, various properties have been mistakenly attributed to the MLG, e.g., that the nearest neighbor to a given object will be mapped to an adjacent grid cell in the MLG or, more generally, that the geometric/spatial adjacency of two points is guaranteed to be preserved in the form of MLG grid-cell adjacency [9]. In fact the two points that are closest to each other in a given dataset, i.e., their separation is less than that between any other pair of points, can be mapped to grid cells that are arbitrarily far apart in MLG order.

Some intuition about how the MLG mapping may become degenerate can be seen from the case of a dataset with nearest-neighbor points  and  having the smallest separation distance, , among all pairs of points in the dataset. Suppose the remaining points have  and  coordinates that fall within the semi-infinite horizontal strip: , ,  or the semi-infinite vertical strip: , , , as shown in Fig. 1. This configuration forces the MLG indices of  and  to become widely separated in both their  and  coordinates.

Note that the above construction can be easily generalized to apply to non-square grids (or their higher-dimensional analogs) to force the nearest-neighbors  and  to be mapped to MLG grid cells with separation that is a function of the size of the dataset. It should not be surprising that there exist spatial distributions that cannot be mapped to a regular grid in a way that preserves the spatial relationships among all of the points [6], [11], [12], but it must be recognized that even when the distribution does conform to the dimensions of a regular grid, the maximum MLG index separation between points and their nearest neighbors will tend to increase with increasing dataset size and there is no a priori fixed radius of search that can guarantee that the nearest neighbors for all points can be found efficiently. However, the MLG literature also shows that these theoretical limitations do not necessarily preclude its effective use in many practical applications.


Download : Download high-res image (29KB)
Download : Download full-size image
Fig. 1. This construction causes the two nearest neighbors in the dataset,  and , to be widely separated in the MLG mapping. This happens because all of the x-coordinates of points in the vertical strip are between those of  and , and the same is true for the y-coordinates of the points in the horizontal strip. Thus in MLG coordinates  and  will not be proximate in either coordinate. Note that this construction can be trivially extended to any size dataset.

In 2009 the basic MLG data structure was rediscovered under the name Neighborhood Grid (NG) in the context of an application involving large-scale crowd simulation [4]. Interestingly, it was later successfully applied to the animation of fluids [5], which brings the original motivation for the MLG – fluid dynamics simulation – full circle. The purpose of this paper is to draw attention to the equivalence of the MLG and NG so that the insights and applications of each can be jointly leveraged in future works.

3. Summary
The renewed recognition of the benefits of the MLG/NG data structure for processing spatial data on parallel and other high-performance computing architectures has motivated new applications as well as new theoretical analyses that go well beyond what has been produced for the MLG [13]. For this reason users of both the MLG and NG stand to benefit from their unified literature.