Abstract
With the increasing viability of Internet of Things (IoT), more devices are expected to be connected in a smart city environment. It can provide many benefits for people’s daily life, but is also susceptible to many security threats in practice. Intrusion detection systems (IDSs), especially signature-based IDSs, are one of the most commonly adopted security mechanisms to safeguard various network environments like IoT-assisted smart city against cyber attacks. The process of signature matching is a key limiting factor for a signature-based IDS, and the exclusive signature matching (ESM) was designed based on the observation that most network packets would not match any IDS signatures. However, exclusive signature matching like the single character frequency-based ESM may be vulnerable to some attacks in a hostile environment. To mitigate this issue, in this work, we propose a blockchain-enabled single character frequency-based ESM, which can build a verifiable database of malicious payloads via blockchains. In the evaluation, we investigate the performance of our approach under flooding and character padding attacks in both a simulated and a real IoT network environment. The results demonstrate the effectiveness of our approach in enhancing the robustness of single character frequency-based ESM against malicious traffic.

Previous
Next 
Keywords
Intrusion detection

Exclusive signature matching

Blockchain

Internet of Things

Smart city

1. Introduction
With the rapidly growing number of digital devices, Internet of Things (IoT) enables these devices to be connected with each other as well as with the Internet [19]. The IoT environment involves different kinds of devices like smart sensors that can be remotely monitored and controlled. According to a report from Gartner [10], the IoT market would grow to 5.8 billion endpoints by the end of 2020, compared with an expectation of 4.8 billion IoT devices in use by 2019, resulting in a 21% increase. In addition, Statista research estimated that the global market for end-user solutions especially IoT connected electronic devices is expected to grow to 212 billion U.S. dollars in size by the end of 2019, and finally reach around 1.6 trillion by the year of 2025 [11].

The IoT can provide many benefits to people’s daily life, and it is also important to help construct smart cities. In particular, smart cities can deploy various IoT devices like connected sensors to help collect and analyze data, and improve infrastructure, e.g., public utilities and services. For example, Daintree Networks released a survey, indicating that almost 60% of building managers in the U.S. are familiar with the IoT, and 43% of them believe the IoT would shape how they operate their buildings in the next two to three years [15]. Therefore, there is an increasing trend of developing IoT-assisted smart cities, by leveraging the connection capability and intelligent technologies.

However, IoT is facing many security threats at present, making IoT-assisted smart cities vulnerable as well. According to a survey performed by i-SCOOP with over 100 IoT leaders, security threat ranks top 2 among all major IoT concerns [18]. It is easily imagined that an attacker has a chance to remotely control your front door and enter your home if your IoT controller has been compromised. Symantec’s Threat Report also reported that the overall IoT attacks around the world still remained very high in practice [48].

To defend IoT and smart cities against attacks, intrusion detection systems (IDSs) are a basic and essential security solution to help identify a variety of computer and network attacks such as worms, Trojans, DoS attacks, etc. Generally, an IDS can be classified into two categories: signature-based IDS and anomaly-based IDS. The former like Snort [41] detects an attack mainly through comparing current local or network events with its stored signatures and patterns. This kind of detection is also known as misuse detection and rule-based detection. The latter like Bro [38] attempts to figure out an intrusion by identifying a great deviation between current event and the predefined normal profiles, which is mainly used to model the normal behavior of protected assets for a period of time.

In practice, in comparison with anomaly-based approaches, signature-based detection often has a wider adoption due to its lower false alarm rate [44]. While the process of signature matching (or called string matching) is a big bottleneck, in which the workload is at least linear to the size of the target string [40]. For example, Snort is a lightweight signature-based IDS, which has the ability to perform real-time traffic analysis, content matching and packet logging on Internet Protocol (IP) networks [41], [43], [45]. It often spends abut 30 percent of its total processing power in conducting signature matching, whereas the CPU burden would be significantly increased to over 80 percent when deployed in a intensive web-traffic environment [6], [7]. This will cause Snort to drop many packets, which may cause many security risks and severely degrade the whole security level of a network.

In an IoT-assisted smart city environment, a distributed orcollaborative IDS (DIDS/CIDS) [22] can be implemented to provide better protection over a single IDS, in which there could be a set of detectors to exchange required information and data. In such environment, the detection effectiveness will be limited by the expensive signature matching. Hence there is a need to adopt a more efficient signature matching process.

Motivation. In the literature, Markatos et al. [29] first proposed an exclusion-based signature matching algorithm called ExB, in which the basic idea is to check whether an input string contains all fixed-size bit-strings of a signature. Then Meng et al. [32] extended this idea and proposed exclusive signature matching (ESM). They particularly developed a scheme of single character frequency-based ESM, which consists of four statistical tables and uses a decision algorithm to output a single character with the purpose of finding a mismatch. However, its performance may be greatly degraded under a hostile environment, i.e., an attacker can launch a character padding attack [31] by padding required characters into a forged packet.

Contributions. In recent years, blockchain technology has been widely studied in various areas especially IoT [8], [9], [42]. The use of blockchains can allow untrusted entities connecting with each other in a verifiable manner without the need of a trusted centralized entity. Due to this merit, many studies have tried to combine it with intrusion detection [23], [49]. Motivated by this, in this work, we try to combine blockchain technology with single character frequency-based ESM under IoT environments like IoT-assisted smart city. Our approach can help protect the process of signature matching in hostile environments, i.e., under character padding attack, by applying blockchains to incrementally building a verifiable database of malicious payloads. Our contributions of this work can be summarized as follows.

•
We first design a prototype on how to implement the single character frequency-based ESM in practice, and detail our blockchain-enabled single character frequency-based ESM, by integrating with blockchain technology.

•
The effectiveness of ESM is heavily based on the observation (named as PackSig observation) that the majority of network packets would not match any IDS signatures. We validate this observation in different network environments.

•
We evaluate the performance of our approach under two hostile environments, where an attacker can launch flooding attack and character padding attack to degrade the effectiveness of ESM. The results indicate that our approach can help enhance the robustness of single character frequency-based ESM under adversarial scenarios.

Roadmap. The rest of this paper is organized as follows. Section 2 introduces related studies on signature matching improvement in intrusion detection, as well as blockchain background and its applications in DIDS/CIDS. Section 3 presents the background of single character frequency-based ESM and the prototype, and introduces our proposed blockchain-enabled approach. Section 4 validates the PackSig observation under both a simulated and a real network environment. Section 5 evaluates the performance of our approach under flooding attack and character padding attack in two distributed environments. Section 6 discusses some limitations and challenges. We conclude our work and present an outlook to future work in Section 7.

2. Related work
In this section, we introduce the main literatural methods of improving signature matching process, explain the blockchain background and present relevant research studies on the combination of blockchains and collaborative intrusion detection.

2.1. Signature matching improvement
To improve the performance of signature matching, one direct method is to design more efficient signature matching algorithms to find an exact match; and the other method is to design a signature matching scheme that identifies a mismatch.

For the first method, a lot of algorithms have been proposed. For example, Boyer and Moore algorithm [3] is the most widely used single pattern matching algorithm to reduce the number of searches in the matching process by performing the search beginning from the rightmost character of a target string. Then, Horspool [14] improved the Boyer–Moore algorithm by using only the bad character heuristic to further improve its speed. For multi-pattern matching, Aho and Corasick [1] designed a multi-pattern matching algorithm to search all strings at the same time by means of a deterministic finite automaton (DFA) without the need of an additional search structure. Wu and Manber [52] improved the Aho–Corasick algorithm by using hash tables and bad character heuristic to search patterns in the matching process.

In the field of intrusion detection, Fisk and Varghese [7] first proposed a string matching algorithm for NIDSs called Set-wise Boyer–Moore–Horspool. Their experimental results demonstrated that their algorithm performed faster than previous Boyer–Moore and Aho–Corasick algorithm when dealing with the medium-size pattern sets. Chen et al. [4] then proposed a system by combining fingerprinting with pattern matching techniques aiming to accelerate pattern matching for an IDS. In the programming phase of fingerprinting, this system can generate a short digest for each pattern. Then, it computes the digests of incoming packets to match those patterns and finally uses the Boyer–Moore algorithm to perform exact pattern matching. Vakili et al. [50] developed a pattern grouping algorithm for heterogeneous bit-split string matching architectures to estimate the correlation between strings. They showed that the proposed algorithm can achieve an average of 41% reduction in memory consumption compared to other approaches. Several related work can be referred to regular expression [26], [39], [46] and parallel matching [13], [20], [27].

Another way of speeding up the signature matching process is to identify a mismatch during the matching process. In the literature, Markatos et al. [29] first proposed a multiple-string matching algorithm designed for NIDSs, called ExB. For each incoming packet,  first creates an occurrence bitmap to guarantee that each fixed-size bit-string exists in the packet. Then, the bit-strings for each signature are matched against the occurrence bitmap. Later, they presented an algorithm called  [28], which improves ExB by involving cells and supporting case-sensitive matching. These two schemes were implemented on hardware and a time reduction rate between 10% and 36% could be achieved. However, hardware-based techniques are expensive and hard to reconfigure.

Then, Meng et al. [32] proposed an exclusive signature matching scheme based on single character frequency to improve the process of signature matching, which was implemented on software. They further evaluated the scheme of single and two-length consecutive characters in a distributed network [30]. The experimental results indicated that a time reduction rate ranged from 11% to 37% could be achieved. In addition, they studied the impact of character length and developed an adaptive character frequency-based exclusive signature matching scheme (named ACF-EX) that can improve the process of signature matching in a distributed network [33].

However in practical implementation, the effectiveness of ESM like the single character frequency-based ESM could be degraded under a hostile environment, where an attacker can launch a type of character padding attack by padding required characters [31]. Motivated by this challenge, in this work, we focus on single character frequency-based ESM and propose a blockchain-enabled scheme to enhance its robustness against character padding attack. This also differs our work from the previous work [31].

2.2. Blockchain background
In the year of 2008, Satoshi Nakamoto described a ‘purely peer-to-peer version of electronic cash’ known as Bitcoin [36], which motivates the adoption of blockchain technology. The network timestamps transactions can be hashed into an ongoing chain of hash-based proof-of-work, constructing a record that cannot be changed without re-running the proof-of-work.

In other words, the transaction ledger will be maintained simultaneously across a network of nodes, which contains a continuous and complete record (the chain) of all transactions performed that are grouped into blocks. A block often contains four pieces of information: the ‘hash’ of the previous block, a summary of the included transaction, a time stamp, and the consensus mechanism on how to add a block. A transaction can only be verified and added if all the nodes on the network confirm that the transaction is valid.

In recent years, blockchain technology has drawn much attention from both industry and academia. For example, there are many research studies on investigating its use in IoT environments [5]. Fortune also reported that there was a surge of investment and discovery from enterprises to estimate how blockchain could impact supply chains, healthcare, insurance, transportation and so on. Around 15% of big banks are currently using blockchain technology [2].

Generally, a blockchain can be categorized as two groups: public blockchain and permissioned blockchain. The former allows anyone to join and contribute to the network like Bitcoin [36], while the latter only allows verified entities to join the network with certain activities like Hyperledger [17]. Consensus algorithms (or mechanisms) are important in blockchains, in order to ensure an agreement from all nodes. Taking proof of stake (PoS) as an example, miners have to solve a difficult mathematical problem with an extraordinary amount of computing power. The first miner to solve the problem can get a reward and then the verified transaction is stored on the blockchain. Another well-known method of reaching consensus is the proof-of-work (PoW), which requires miners to spend large computational power to solve a puzzle and form a new block.

2.3. Blockchain in collaborative intrusion detection
With the development of IoT, collaborative intrusion detection has been widely studied, which can help defeat advanced attacks like DDoS attack, through exchanging data (e.g., alerts) among various nodes. A typical CIDS often includes a detector, a collaboration component, a physical connection component and a trust-aware component.

While such distributed architecture may also be vulnerable to insider attacks. How to build a trust relationship among internal nodes remains a challenge. As blockchains can allow building a relationship among untrusted entities in a verifiable manner without the need of a trusted centralized entity, many research studies have explored its use in the field of intrusion detection. Meng et al. [34] firstly provided the insights on how to integrate blockchains with an IDS, especially with a distributed/collaborative IDS. They figured out that blockchains can help enhance the robustness of IDSs by building a verifiable trust management and data sharing in IoT environments.

Then Golomb et al. [12] described a framework of CIoTA, which uses blockchains to do anomaly detection in a distributed manner for IoT devices. For signature-based detection, Li et al. [23] demonstrated how to use blockchains to enhance the performance of collaborative signature-based IDSs via building a verifiable rule (pattern) database. Then Li et al. [24], [25] focused on trust management, and designed a blockchained challenge-based CIDN framework that attempts to combine blockchain technology with challenge-based trust mechanism. Hu et al. [16] proposed a similar blockchain-based detection approach for Multimicrogrid (MMG) systems.

On the other hand, some studies also investigated how an IDS can help protect blockchain applications from security threats. For instance, Steichen et al. [47] introduced an OpenFlow-based firewall named ChainGuard, which can examine traffic and help identify malicious behavior to protect blockchain-based Software-Defined Networking (SDN). Li et al. [21] also provided a survey on how to apply blockchains with SDN platforms.

Discussion. Different from our previous studies like [31], [32], this work attempts to propose a blockchain-enabled single character frequency-based ESM, through combining blockchains with exclusive signature matching. In the evaluation, we examined the performance of our approach under both a simulated environment and a real IoT environment by collaborating with healthcare centers and IT organizations.

3. Blockchain-enabled single character frequency-based ESM
In this section, we introduce the background of single character frequency-based ESM and how to implement it (with a prototype). Then we illustrate our proposed blockchain-enabled single character frequency-based ESM.

3.1. Single character frequency-based ESM
The main idea of exclusive signature matching is to identify a mismatch rather than confirm an accurate match during the process of signature matching. As shown in Fig. 1, this scheme mainly contains four statistical tables: The table of stored NIDS signatures (denoted SNS), Two tables of character frequency (denoted SCQ1, SCQ2), The table of matched NIDS signatures (denoted MNS) and one functional component: decision component. These four tables are responsible for calculating character frequency and recording relevant statistical data. SCQ1 aims to count the single character frequency according to SNS while the SCQ2 is used to compute the single character frequency based on MNS. In a network, the character frequency would be different in these tables. The single characters in both SCQ1 and SCQ2 tables are arranged in descending order from most frequency to less frequency.

The Decision component is responsible for deciding the most appropriate single character from the two SCQ tables in comparison with incoming packet payloads. Usually, SCQ2 could be firstly checked as it can be adaptive to a specific environment (i.e., the matched IDS signatures in SCQ2 can maintain up-to-date). In a real scenario, IDS signatures are usually organized into a decision tree divided by packet type and packet port number. Therefore, signature matching is mainly conducted between a packet payload and one/several IDS signature(s), rather than compare with all NIDS signatures. The decision procedure can be performed as below [32]:

1.
Input a signature  and a packet payload ; Set round number .

2.
For each single character . Finding the least frequent single character  (from single characters that have not been output) in the table SCQ2.

•
If  does not exist, then go to step 4,

•
If  exists, then go to step 3.

3.
The decision component outputs . Checking whether  is contained in .

•
If  is not contained in , then the exclusive signature matching is completed. Signature  is not contained in packet payload .

•
If  is contained in  and , then , return to step 2; else if  is contained in  and , then go to step 5.

4.
Finding the least frequent single character  in the table SCQ1. The decision component outputs . Checking whether  is contained in .

•
If  is not contained in , then the exclusive signature matching is completed. Signature  is not contained in packet payload .

•
If  is contained in  and , then , return to 2; else if  is contained in  and , then go to step 5.

5.
All single characters in signature  are contained in packet payload . Then using a traditional signature matching algorithm (e.g., Aho–Corasick) to check whether it is true or not.

It is found that when the scheme identifies that at least one character is not contained in a packet payload, then the matching process would be ended immediately. However, if no mismatch is detected, a traditional matching algorithm should be used to confirm that there exists an exact match. To conclude, in the best scenario, the scheme can identify a mismatch using only one round, but in the worst scenario, a traditional signature matching algorithm should be applied. In [32], the experimental results show that the time reduction rate could be achieved in the range from 16% to 32.5%.

3.2. Implementation and prototype
To implement the single character frequency-based ESM, Fig. 2 shows how to build a packet filter prototype based on ESM. The major functions are described as below.

•
Statistical tables. There are four tables: SCQ1, SCQ2, MNS and SNS. To establish SNS and SCQ1, we can input signatures by clicking the button of Input Snort Signature Files, while for MSN and SCQ2, we can prepare them using the button of Preparing Matched Signatures. After clicking on relevant buttons, the information of these tables can be shown in the interface.

•
Selection of signature matching schemes. Our prototype can provide two main options for signature matching. One is the regular matching based on Boyer–Moore algorithm (with the button of Regular Matching) while the other is the single character frequency-based ESM (with the button of EX-Matching).1

•
Result display. To evaluate the performance of different signature matching schemes, our prototype interface can output the result in the aspects of filtration rate and running times at the bottom.

The prototype system was developed in Java and can be compressed to a jar file; thus, it is scalable to different java-enabled operating systems. In the above interface, we give a simple example to illustrate the performance of single character frequency-based ESM by means of a small packet dataset (including only 31 packets). Assume there are totally 8 signatures while 3 of them are matched. Four statistical tables are also shown in the interface. When choosing EX-Matching, it indicates that the single character frequency-based ESM can complete the matching within 176 millisecond and a reduction rate of about 32.5% can be achieved.


Download : Download high-res image (299KB)
Download : Download full-size image
Fig. 2. The interface prototype of the implemented single character frequency-based ESM.


Download : Download high-res image (340KB)
Download : Download full-size image
Fig. 3. The blockchain-enabled single character frequency-based ESM.

3.3. Our blockchain-enabled scheme
As mentioned earlier, the effectiveness of single character frequency-based ESM depends heavily on the PackSig observation. That is, most network traffic will not match any IDS signatures in a real network environment. However, the previous work [31] identified that the scheme performance could be degraded under a hostile network, i.e., attackers can launch a character padding attack. In this work, we consider the following threat model.

Threat model. An attacker can send malicious traffic to affect the performance of single character frequency-based ESM. Especially, attackers can launch a character padding attack to significantly degrade the scheme performance by padding required characters into a manipulated packet.

The malicious traffic (or packets) generated by the character padding attack can greatly decrease the possibility of finding a mismatch, and thus cause the ESM to be ineffective. To address this issue, blockchain technology can be used to verify the packets by leveraging the knowledge among a set of IDS nodes, and to improve the matching process. Fig. 3 shows how to deploy the blockchain-enabled single character frequency-based ESM in a network environment like a CIDS or an IoT-assisted smart city.

•
CIDN layer. In this layer, different IDS nodes can exchange required information and data to ensure the detection performance. Each IDS node can be comprised of a detector for detection, a P2P communication component for building network connection with other nodes, a collaboration component for exchanging required information, and a trust management component for identifying malicious internal nodes. For signature-based detection, an IDS node can adopt the single character frequency-based ESM to accelerate the signature matching process, in collaboration with regular signature matching schemes.

•
Blockchain layer. This layer attempts to build a consortiumblockchain that allows each IDS node to verify malicious traffic. According to the decision procedure in Section 3.1, if all characters are found in a payload, then this packet needs to be examined by a regular matching scheme like Aho–Corasick. This situation is the worst case and could be exploited by intruders to degrade the performance of ESM. In our blockchain-enabled scheme, a malicious payload can be shared with the chain and other nodes can verify the situation. For instance, up to 2/3 of all nodes must sign a block to be appended to the blockchain. Then, all malicious payloads would be added to the chain, and the detector can directly apply a regular signature matching scheme for those packets contained the chained payload, in order to reduce the occurrence of worst cases.

The use of this layer can facilitate the migration from traditional CIDS framework. For a CIDS, in order to build a consortium blockchain, each node has to get a unique proof of identity (like a public and a private key pair) via a trusted authority. This is widely used in many CIDS types like challenge-based CIDSs [25].

4. The effectiveness of ESM
4.1. PackSig observation validation
This section aims to verify the PackSig observation under two network environments. One is a college network while the other is a company network (including about 100 personnel). The generic network structure of these environments are summarized in Fig. 4. We mainly evaluate the performance of single character frequency-based ESM in three levels: router level, server level and terminal level.

Table 1 shows the packet rate in each level for the two different network environments. It is easily visible that the packet rate in the router level is the highest, as nearly all traffic would go through it. Then, the packet rate in the server level is generally higher than that in the terminal level. For different networks, it is found that the packet rate in the company network is often larger than that in the college network. One major reason is that many transactions would be completed online by the company.


Table 1. The packet rate for different levels and networks.

Levels/packet rate (packets/s)	College network	Company network
Router level	6500–8000	5000–1,2000
Server level	4000–6800	4600–8000
Terminal level	1500–2400	1700–3030

Table 2. The packet filtration rate and time saving rate for different levels and networks.

College network	Filtration rate (%)	Time saving rate (%)
Router level	42.42	33.5
Server level: Point A	34.23	24.3
Server level: Point B	42.92	34.6
Terminal level A	47.82	35.5
Terminal level B	41.35	32.3
Terminal level C	32.42	21.5
Company network	Filtration rate (%)	Time saving rate (%)
Router level	35.76	28.1
Server level: Point A	24.10	19.4
Server level: Point B	33.14	22.5
Terminal level A	23.20	18.8
Terminal level B	35.72	24.4
Terminal level C	39.32	29.8

Table 3. The results of average packet filtration rate for different levels and networks.

Average filtration rate (%)	College network	Company network
Router level	73.42	78.57
Server level (3 points included)	68.3	73.18
Deviation	5.3	4.8
Terminal level (50 points included)	72.3	68.32
Deviation	3.3	6.8

Download : Download high-res image (145KB)
Download : Download full-size image
Fig. 4. The generic structure of network environments.

To investigate the effectiveness of single character frequency-based ESM, we randomly deployed it into several end-points in each level across different networks. Full Snort signatures are used (version 2.9.3.1). The results regarding packet filtration rate and time saving rate for a whole day are shown in Table 2.

The table shows that for the college network, the single character frequency-based ESM could achieve a filtration rate ranged from 32.4% to 47.9%. For the company network, the filtration rate was ranged from 23.2% to 39.4%. We find that the specific filtration rate depends on the incoming packet payloads. Usually, a longer payload may contain more characters, which may decrease the performance of the single character frequency-based ESM, while some special characters in a signature like ‘/’ can enable the matching process to be completed more quickly.

Regrading the time saving rate, the single character frequency-based ESM could achieve a rate in the range from 21.5% to 35.5% and from 18.8% to 29.8% for the college and company network, respectively. On the whole, the filtration performance achieved here is similar, but better than the results in [32]. By considering the filtration rate and saving time in each environment, we consider that the single character frequency-based ESM can perform well in a regular network.

PackSig observation verification..
In [30], this observation can be described more formally as below:

•
Suppose a packet payload  and a set of IDS signatures . The observation is that the possibility of  containing  is very small. That is, most network packets will not match any IDS signatures in a real deployment.

To verify this observation, based on the same environments above, Table 3 shows the results of filtration rate using the regular matching. Full Snort signature database was used. It is visible that the average filtration rate is generally over 70%, which is much higher than the results using ESM. Note that the deviation is small, which indicates that the filtration rate should vary with a specific network. To conclude, the results validate that most packet payloads would not match IDS signatures in practice.


Table 4. The packet rate in the data center.

Levels/packet rate	Data center (packets/s)
Main router level	1,6500–1,8000
Server level	6000–1,4800
4.2. Heavy traffic situation
In this section, we attempt to evaluate the single characterfrequency-based ESM in heavy traffic network environments. In this work, we define ‘heavy traffic’ for a matching scheme as the situation that the incoming traffic exceeds its handling capability. As a study, we performed this evaluation by cooperating with a small data center, where the packet rate is considered as larger than traditional network environments. For privacy reasons, as shown in Table 4, we only provide some information about the packet rate in this center.

•
Fig. 5 shows the filtration rate in the heavy traffic network, it is seen that the filtration rate could range from 23% to 36% and from 21% to 35% for server and main router level, respectively. Fig. 6 depicts the CPU workload versus the packet rate, it is found that the workload becomes heavier with the increase of packet rate. In particular, when the packet rate reached over 11,000 packets/s, the scheme cannot provide any advantages.

•
In the evaluation, it is found that the prototype did work during this heavy traffic environment, but the filtration performance would be greatly limited when the packet rate increases. The major reason we identified in the experiment is that the probability that a payload contains all single characters of a signature would be largely increased in such a heavy traffic network.

To conclude, the single character frequency-based ESM can improve the performance of traditional signature matching, but it still needs to be further improved in a heavy traffic environment.

5. Evaluation in hostile environments
In this section, we evaluate our proposed blockchain-enabled single character frequency-based ESM in a simulated CIDS environment and a real IoT environment, in collaboration with both a healthcare center and an IT organization. The consortiumblockchain was deployed in a mid-end computer with Intel(R) Core (TM)i6, CPU 2.5 GHz with 500 GB storage. In this work, we assume that 2/3 of all nodes have to sign a block to be appended to the blockchain.

5.1. Simulated CIDS environment
In this experiment, we constructed a CIDS environment with 47 nodes that are randomly distributed in the simulated CIDS environment with a 10 × 10 grid region, as shown in Fig. 7. In particular, Snort [43] was deployed in each node as the detector, and Wireshark [51] was used for collecting traffic information. A node can build a partner list by communicating with other nodes after a time period. Then we launch two attacks to investigate the scheme performance: (1) a flooding attack with malicious traffic that targets on the network environment; and (2) a character padding attack that targets on the single character frequency-based ESM by padding required characters.

Flooding attack. After the CIDS became stable, we launched the flooding attack via a traffic generator [37], in order to consume the network resources. In particular, the malicious traffic was generated for 13 h from 4th hour to 16th hour. In order to avoid bias and unexpected events in the environment, we use an average value by running the experiment for 5 times. The results are shown in Fig. 8.

Similar to the previous work [31], it is observed that the filtration rate could be affected under malicious traffic, i.e., the rate decreased from 35% at the 3rd hour to 26% at the 4th hour, and to 17% at the 7th hour. This is because in a hostile environment, malicious traffic can decrease the possibility of finding a mismatch. As a result, the single character frequency-based ESM would be affected under a hostile network.

By contrast, our blockchain-enabled ESM scheme could work better by improving the filtration performance, especially from 10th hour to 16th hour. This is because the chain needs sometime to be built and make an impact on the filtration process. When the database of malicious patterns is established via blockchains, our scheme could speed up the filtration.

Character padding attack. This type of attack aims to particularly compromise the single character frequency-based ESM. The attackers have knowledge about the character frequency in the ESM and can manipulate a packet with all required characters, resulting in the worst case for ESM. For example, as the manipulated packet involves all characters, ESM cannot find a mismatch and has to perform a traditional matching again. Similarly, we use an average value to avoid bias by running the experiment for 5 times. The attack was launched from the 4th hour to the 16th hour, and the results are depicted in Fig. 9.

It is observed that the character padding attack could make a larger impact on the filtration performance than the flooding attack, i.e., the filtration rate decreased from 32% at the 3rd hour to 24% at the 4th hour, and below 10% during a period of 9th–14th hour. This is because such attack contains all characters and causes the ESM unable to find a mismatch. Thus, the filtration process needs to do a regular signature matching again.

In a comparison, our blockchain-enabled scheme could greatly enhance the filtration performance. When the malicious payloads were chained and shared via blockchains, the traffic examination process can quickly shift to regular signature matching, which can reduce the occurrence of worst cases for ESM. Hence the filtration performance can be enhanced.

5.2. Practical network environment
In this experiment, we investigate the performance of our scheme under a medical smartphone network (MSN), by collaborating with a healthcare center located in South China and an IT organization. The use of smartphones can provide various benefits for the diagnosis and treatment of patient, and these devices construct a special kind of IoT network. It is also considered as an important subcomponent of smart cities. The MSN environment can connect with the Internet via a firewall, as shown in Fig. 10. Due to privacy concerns, our approach was deployed with a total of 35 nodes under the cooperation from the IT managers between the healthcare center and the IT organization.

As a comparison, our blockchain-enabled scheme could outperform the original scheme. In the beginning, the filtration rate could also decrease due to the attack impact and time needed by building chains. While from the 11th hour, the filtration rate started increasing and kept the trend until the attack was completed. In the worst case, the filtration rate was still over 15%. Our results indicate the effectiveness of our approach in enhancing the robustness of single character frequency-based ESM. Such observation was also confirmed by the managers from participating organizations.

6. Discussion
This is an early research study on discussing how to use blockchains to benefit the signature matching process. There are some open challenges and limitations can be considered in our future work.

•
ESM scheme. This work mainly considers the single character frequency-based ESM, but adaptive character frequency-based ESM could also be a solution to improve the filtration performance. This is an interesting topic in our future work.

•
Character padding attack. In this work, we mainly consider the character padding attack that can make up characters into a malicious packet. However, there could be many more advanced attacks on CIDS environments, i.e., an attacker can use some infected nodes to send untruthful information to gradually establish a biased character table. Our future work plans to involve other types of attacks.

•
Matching schemes with GPU. To accelerate the process of signature matching, one promising way is to use a graphics processing unit (GPU). For instance, Mitani et al. [35] introduced a tribrid parallel method for bit-parallel algorithms like Wu–Manber algorithm and used a GPU to implement a GPU-friendly memory access pattern that maximizes memory read/write throughput. This could be our future plan to investigate the use of GPU in our scheme.

•
Consortium chain. In this work, we mainly consider a consortium chain, in which the identity of each participant should be verified. This kind of blockchain has been widely adopted in the domain of intrusion detection like [12], [16], [23]. In our future work, we plan to further study the performance difference between a permissioned and permissionless blockchain.

•
Blockchain PoC. To test the feasibility, this work only uses a proof-of-concept (PoC) implementation of blockchain. It is an interesting direction to validate our results by using a real chain. In our future work, it is also an interesting topic to explore some kinds of blockchain attacks.

•
Trust management and insider attacks. Many CIDSs are likely to deploy at least one trust-based mechanism to help identify insider attacks, where such mechanism can also cooperate with matching process and blockchains to provide better performance. In this work, insider attack detection is out of the scope, but it could be an important direction for our future work.

7. Conclusion and future work
In the era of IoT, many more devices start being connected, and IoT-assisted smart cities are under development to address growing urbanization issues. To secure the smart environment, the single character frequency-based ESM can be used to improve the process of signature matching for collaborative intrusion detection. However, such ESM scheme may be vulnerable to hostile environments, i.e., under character padding attack. In this paper, we focus on this challenge and propose a blockchain-enabled single character frequency-based ESM. In the evaluation, we test our approach under both a simulated CIDS environment and a real MSN environment. Our results validate that PackSig observation often holds in most cases, and that the performance of single character frequency-based ESM could be degraded in a hostile network. The results also indicate that our blockchain-enabled scheme can enhance the robustness of original scheme by reducing the occurrence of worst cases.

To the best of our knowledge, our work is an early study in discussing and evaluating the blockchain-enabled single character frequency-based ESM. There are many potential directions for future work, including formalizing the model of character padding attack and testing its impact on other exclusive matching schemes.

