Abstract
This paper provides a true-concurrency approach for the specification and verification of systems of concurrent communicating agents with durable actions. We present high-level Petri nets with durable actions (DaHL) to cope with various details in such complex systems. We define a DaHL module as an open variant of time-dependent colored Petri nets. A DaHL system is a fused set of modules for systems consisting of concurrent agents which can interact with each other. We also introduce hybrid-based reachability graph that covers the entire state space of DaHL systems with a true-concurrency semantics. We show that such reachability graph allows us to check important properties such as deadlock-freeness, liveness, home space, and reversibility, and also to predict timing properties prior to real implementation. A case study is used to model and analyze a simple scenario where autonomous vehicles are able to transport containers freely in an enterprise environment.

Keywords
Systems of concurrent communicating agents
Petri nets
Reachability
True-concurrency semantics
Verification

1. Introduction
Nowadays, systems involving concurrent agents that communicate with each other are becoming increasingly common and important in several fields such as healthcare, military devices, transport, etc. For instance, the wide spread of coronavirus across the world showed a pressing need to autonomous vehicles, as concurrent communicating agents, that can be used to transport goods and medical supplies to medical staff and the public in endemic areas [31], [32], [18]. Unfortunately, while many concurrent systems must be working correctly from the very beginning, the development of such systems is still quite a challenge due to being complex and non-deterministic, and therefore difficult to analyze and debug. Hence, building a suited formal model for such systems was (and still is) of the utmost importance. Models assist by providing insight that enable the checking and enhancement of system designs prior to real implementation.

Petri nets [25] are a well-established formalism to model the dynamic behavior of concurrent and distributed systems in a simple and intuitive way. This formalism is executable and supported by many analysis techniques. However, in their basic form, Petri nets do not cope with complex and large systems unless the system is modeled at an extremely high level of abstraction. Therefore, one needs the recourse to extended Petri nets. Actually, Petri nets can be extended either for a specific system (like nested Petri nets [19], [20] for multi-agent systems and hybrid Petri nets [1], [7] for technical hybrid systems as well as biological systems [21]), or to cover a specific perspective, e.g., data perspective [24]. Colored Petri nets [12] are a well-known extension of standard Petri nets where resources are typed (colored tokens). Such formalism allows to define data types, to model data and data manipulation, and to create compact models. The time perspective also plays a key role in a broad range of concurrent systems. The proper functioning of real-life concurrent systems is critically dependent on time taken by activities and also the ability to manage with delays and safety distances of time between these activities [27]. The two main extensions of time-dependent Petri nets, describing temporal properties, are timed Petri nets [28] and time Petri nets [23]. In timed Petri nets, a time delay is associated with each transition, representing the time duration of firing, i.e., the duration of the action or process modeled by this transition. In time Petri nets, firing itself takes no time but transitions are associated with time intervals in which enabled transitions fire. Moreover, the interaction perspective is also important because contemporary concurrent systems, in general, contain lots of complex interactions among their components where a considerable number of issues may arise from these interactions [16]. Therefore, modeling systems of concurrent communicating agents requires an expressive modeling language to deal with the overwhelming amount of detail.

The underlying semantics and the analysis of formal models can be decided by means of low-level models like region graphs and zone graphs for timed automata [3], [2] and reachability graphs for Petri nets. Such low-level models can be used not only to show the behavior of the modeled system and to verify its correctness, but also to improve processes with respect to time, cost, or quality and to check the conformance of the modeled behavior and the observed (real) behavior [29].

Constructing the state space of Petri nets is a subject of much research (e.g. [30], [4], [5], [17], [11], [15]). However, state-of-the-art approaches are limited either in terms of different perspectives like time, interaction, and data, or in terms of the underlying formal semantics (the use of the interleaving semantics). In Petri nets, actions are implicitly concurrent unless explicitly synchronized [13]. To express concurrent executions of actions and processes, most formal modeling languages consider the interleaving semantics. This semantics attracts researchers because of its simplicity. Unfortunately, to use the interleaving semantics advisedly, actions must be assumed indivisible and instantaneous causing that their parallel execution is interpreted as their interleaved execution. An example is two processes  (concurrent actions) and  (executing a and b in random sequence). Since the interleaving semantics expresses the parallel execution of two actions by their alternating execution, E and F are behaviorally equivalent (cf. Fig. 1). E strongly bisimulates F. This bisimilarity is, however, not preserved under action refinement. Therefore, if in two equivalent Petri nets the same substitutions of actions are made, the resulting Petri nets will be not equivalent. The behaviors of E and F will be entirely different if we suppose a as a process executing two actions 
 and 
 sequentially (cf. Fig. 2). Also, the bisimilarity is not preserved when we consider timed actions. If  and  are, respectively, time durations of actions a and b, then process E takes  time units whereas F takes  time units.

Fig. 1
Download : Download high-res image (6KB)
Download : Download full-size image
Fig. 1. Behavior of both E and F.

Fig. 2
Download : Download high-res image (21KB)
Download : Download full-size image
Fig. 2. Behavior of E and F under action refinement.

In this paper we provide a true-concurrency approach to specify and verify systems of concurrent communicating agents with durable actions. We present high-level Petri nets with durable actions (DaHL) to cope with various details in such systems. A DaHL system is a fused set of modules for systems consisting of concurrent agents which can interact with each other. We define a DaHL module as a time extension of colored Petri nets where each transition is associated with a firing interval (time interval) and a timed action. An enabled transition may fire only in a specific firing interval (time interval). Such time constraint may specify delays and safety distances of time between activities. On the firing of a transition, reserved tokens are produced (put on the right side of post-places) indicating a beginning of the action or process modeled by this transition. A token is called reserved as long as the action is running. It becomes free (put on the left side) at the end of this execution. In addition to the data and time perspective, DaHL modules are supported by input and output ports (interface places) for asynchronous message passing between partners.

In order to express the concurrent behavior of actions, DaHL are coated by maximality semantics [8], [6] — a true-concurrency semantics expressing timed actions in a natural way without splitting actions into their beginnings and their endings. A split of actions leads to the state space explosion problem. Maximality semantics considers events that represent the beginning of timed actions. The ends of actions are deduced implicitly by the corresponding time durations. To Illustrate the concurrent behavior of DaHL, we introduce hybrid-based reachability graph (hRG), that covers the entire state space of DaHL systems, and we present an algorithm for generating this reachability graph. In hRG, nodes correspond to states of the system where each state coincides with a start of an action. A state is a pair, where the first component is a Petri net marking, and the second describes time. We show that such reachability graph allows us to predict timing properties prior to real implementation, and to check some important properties like deadlock-freeness, liveness, home space, and reversibility.

We show the importance of a DaHL system and the corresponding reachability graph through a simple case study. This case study analyzes a DaHL system of a simple scenario where autonomous vehicles are able to transport containers freely in an enterprise environment.

The remainder of this paper is organized as follows. In Section 2, we present a motivating example of a DaHL system describing a simple scenario of autonomous vehicles. Section 3 contains definitions of DaHL. Section 4 is devoted to construct a reachability graph for DaHL systems. In Section 5, we propose a case study considering the scenario presented in Section 2, where we verify some desirable properties. Finally, the paper is concluded in Section 6.

2. Motivating example
The benefits of autonomous vehicles are widely recognized [9]. As a motivating example, we consider a simple scenario where the system is composed of some autonomous vehicles and controllers. Vehicles are able to transport containers freely in an enterprise environment provided that missions are accomplished on time while complying to rules and avoiding conflicts [26]. While a vehicle moves, it periodically sends messages to the controller. A message contains the coordinates (position) of the vehicle and a corresponding priority. The controller receives and analyzes messages to avoid collisions among vehicles.

Modeling and verification of autonomous vehicles requires an expressive modeling language to deal with the overwhelming amount of detail in these systems. Fig. 4 shows a DaHL system consisting of two modules. One of those is for a controller, and the other is for an autonomous vehicle. DaHL systems are well suited for a compositional specification of timed systems consisting of concurrent components which interact with each other. Ports (interface places), that have the same label, are fused. To simplify the pattern, we use read arcs which are unfolded to loops (cf. Fig. 3). Also, we add the object Obj which is a special place of another DaHL module. Obj contains information about coordinates and priorities of vehicles that are moving in the environment.

Fig. 3
Download : Download high-res image (9KB)
Download : Download full-size image
Fig. 3. Graphical convention — Read arcs.

When the DaHL system depicted in Fig. 4 is activated, the vehicle starts (
) within the time interval  that may represent the amount of time it takes for the vehicle to specify a mission and to start its engine. On the firing of transition 
, a colored token, including information about position and priority, is produced and added to the right side of the post-place p indicating the beginning of the corresponding action start. A token is called reserved (put on the right side) as long as the action is running. It becomes free (put on the left side) at the end of execution. In our case, the vehicle takes 1 time unit (duration of action start) to reach the required velocity. After that, transitions 
 and 
 are used to analyze the colored token (information about position and priority). If the vehicle reaches the required (final) position (FP = T), the initial place will be re-marked. Else, after a period between 10 and 11 time units, the vehicle (using 
) keeps a copy of its new coordinates and its priority in place p and sends another copy to the controller. On the firing of 
, the communication place (port) α, of both controller and autonomous vehicle, will be marked with a reserved token. The vehicle takes 1 time unit (duration of action send) to transmit a message to the controller. Thus, after 1 time unit, the token, holding information about position and priority, becomes free. 
 and 
 are used to analyze such information. The controller decides either to stop the vehicle (
) for some time or to confer the priority on it (
).

Fig. 4
Download : Download high-res image (82KB)
Download : Download full-size image
Fig. 4. A DaHL system consisting of two modules — a controller and an autonomous vehicle.

The specification of such simple scenario, shows the importance of data flow, time restrictions, and interactions for an efficient and safe autonomous vehicle. However, the question that arises is how to analyze the correctness of such complex systems by means of DaHL systems, and is it possible to predict some important timing properties such as the average lead time over cases and the remaining processing time of actions.

3. High-level Petri Nets with durable actions
In this section, we provide formal definitions of high-level Petri nets with durable actions (DaHL) — an open variant of time-dependent colored Petri nets. DaHL are proposed to deal with the large amount of details in systems of concurrent communicating agents. A preliminary version of this formalism was stated in [22] to specify WS-BPEL [14] processes.

We denote by  the set of all natural numbers and 
 stands for non-negative real numbers. Let S be a set. A  over S is a mapping . In other words, a multiset is a collection of elements, each of them with certain multiplicity, e.g., , and ∅ are multisets over S. 
 denotes the set of all multisets over S. Let 
 be sets and let 
 be multisets over 
, respectively. The disjoint union of 
, denoted by 
, is the multiset whose domain is 
, such that 
 for every .

Definition 1 Petri net

A Petri net is a triple , where P is the set of places, T is the set of transitions, , and  is the set of directed arcs (flow relation).

A marking in a Petri net  is a multiset over the set of places P. A marked Petri net 
 is a Petri net together with its initial marking 
.

Pictorially, P-elements are represented by circles, T-elements by boxes, and the flow relation F by directed arcs. Places may carry tokens represented by filled circles. A current marking M is designated by putting  tokens into each place .

For a transition , an arc , is called an input arc, and an arc  — an output arc. For each node , we define the pre-set as  
  and the post-set as 
.

We say that a transition t in a Petri net  is enabled at a marking M if and only if  
 . An enabled transition may fire, yielding a new marking 
 (denoted 
). A marking M is called reachable if there exists a (possibly empty) sequence of firings 
 from the initial marking to M.

A reachability graph of a Petri net  presents detailed information about the net behavior. It is a labeled directed graph, where nodes are reachable markings in 
, and an arc labeled by a transition t leads from a node n, corresponding to a marking M, to a node 
, corresponding to a marking 
 if and only if 
 in N.

For modeling complex systems, one can use colored Petri nets (CP-nets) [12]. In CP-nets, tokens are attached with values belonging to different domains (color types). Let  be the set of these different domains. Then, each place in a CP-net is typed with a domain in  indicating the type of tokens it contains. Arcs in CP-nets are annotated with expressions from a language  as defined in [12]. Transitions are also allowed to have a guard (Boolean expression).

Definition 2 colored Petri net

A colored Petri net is a tuple  where:

•
 is a Petri net;

•
 is a place-typing function;

•
 is a guard (partial) function that assigns guards (Boolean expressions) to transitions;

•
 is an arc expression (partial) function. , if e is adjacent to a place , then the type of  corresponds to the type of p.

Let  be a CP-net over a set of domains . A marking M in CPN is a function that maps each place  into a multiset of tokens 
.

A binding b of a transition t is a function that assigns a value  to each variable v occurring in the transition variables (variables that occur in the guard and the expression of the arc involving t) that satisfies the transition condition (guard). An evaluation  determines token demands (multiset of tokens) on p for t to be enabled with the binding b, and the multiset of tokens that the transition t removes from the place p when t occurs with the binding b.  determines the multiset of tokens added to a post-place p. A transition is enabled in a marking M w.r.t. a binding b if and only if for all , . An enabled transition fires in a marking M yielding a new marking 
, such that for all places p, 
.

High-level Petri nets with durable actions (DaHL) are time-dependent colored Petri nets where each transition is associated with a firing interval (time interval) and a timed action. Besides these time constraints, each transition has a real-valued clock that starts measuring the time as soon as the transition is enabled. If the transition is disabled, its clock is reset to zero. Also, all tokens carry real-valued clocks that start measuring the time so that for every token its clock shows the time elapsed since the action, associated with the producing transition, started.

Furthermore, DaHL are well suited for a compositional specification. We define a DaHL system as open nets, called modules, for systems consisting of concurrent agents which can interact with each other. Each agent should be modeled, at least, by a DaHL module. The latter is a special case of a DaHL system. It has an interface for asynchronous message passing among partners. It is graphically surrounded by a dashed frame with input and output ports (interface places). Each port models a channel to send (receive) messages to (from) partners. For the system, we fuse all ports that have the same label, that is, output ports are fused with the corresponding input ports. We define the behavior of a system to be the behavior of its fused modules.

In DaHL, all transitions are disjointed. Places are also disjointed, except ports. All places are drawn as circles with vertical divider, in which tokens reside on the left or the right side. Tokens on the left side are called free tokens whilst tokens on the right side are called reserved tokens. Whereas the distribution of tokens, i.e., a Petri net marking, do not describe the full current situation of time-dependent nets, a state of DaHL is a pair, where the first component is a Petri net marking, and the second describes time (time durations and clocks).

Now we define firing rules for a DaHL module. A transition is enabled if its pre-places hold enough free tokens (on the left side). If the firing interval of a transition t is 
, t cannot fire immediately after being enabled. At least 
 time units must elapse before t may fire and it has to fire no later than 
 time units, unless it has meanwhile become disabled by the firing of other transitions. The firing of t consists thereby of two steps:

-
First, the following stages occur instantaneously, indicating the start of the corresponding action:

•
For each pre-place of the transition, the input arc enabling free tokens with respect to a corresponding binding are dropped.

•
For each post-place of the transition, the multiset of tokens of the evaluated output arc expression is added to the right side of the post-place as reserved tokens.

-
Then, reserved tokens remain on the right side as long as the action associated with this transition is running. They become free, put on the left side, at the end of execution.

As an example, Fig. 5 describes Firing rules for a DaHL module. The module consists of one transition t associated with a firing interval [2,4] and a time duration of 5 time units. Therefore, t will fire during the time interval [2,4] indicating the start of action a. Instantaneously, token b is dropped from the left side of 
 and it is added to the right side of 
 as a reserved token. DaHL keeps b in the right side of 
 as long as the action a is running, i.e., for a duration of 5 time units. b becomes free, put on the left side, at the end of execution, i.e. during the time interval [7,9] ([2+5,4+5]).

Fig. 5
Download : Download high-res image (62KB)
Download : Download full-size image
Fig. 5. Firing rules for a DaHL module.

Definition 3 DaHL module

Let A be a finite set of actions. A DaHL module is a tuple , 
 where:

•
 is a colored Petri net;

•
 are input and output ports such that , 
 and , 
;

•
 is an action labeling function;

•
 is a function that assigns to each action a static duration;

•
 is a function that assigns to each transition a static firing interval, where for each , with 
 it holds that 
.

Let Δ be a set of time durations and H — a set of real-valued clocks associated with tokens. A timed marking, M, of a DaHL module is defined as follows: 
 
 such that

A timed marking  of a place p is a pair 
 such that 
 and 
 respectively denote the multiset of free tokens and the multiset of reserved tokens in place p. Obviously, the total number of tokens in p equals the total number of both free and reserved tokens: 
.

A transition t is enabled in a marking M, w.r.t. a binding b, if and only if the marking of each of its pre-places contains (at least) the multiset of tokens indicated by the arc expression evaluated for the binding b. Formally:

Note. The determination of bindings guarantees that the guard is satisfied. A binding b of a transition t is a function that assigns a value  to each variable v, occurring in the transition variables (variables that occur in the guard and the expression of the arc involving t) that satisfies the guard.

An enabled transition may fire in a marking 
, yielding a new marking 
, such that for all places p:

Definition 4 DaHL system

A finite set of DaHL modules 
 over the same set of actions is called a DHaL system if and only if:

•
all transitions are disjointed;

•
all places, except ports, are disjointed;

•
ports that have the same label are fused, s.t. for each fused ports 
 in a place p, 
 and 
.

For a system consisting of a set of modules 
 for 
 
, we define a behavior to be the behavior of these fused modules. 
, 
, and 
 are respectively places, transitions, and flow relation of the system.

We distinguish two kinds of steps in DaHL systems:

Start step: let  be a transition associated with a timed action a. A start step ↑t fires transition t according to the standard rules, expect that all tokens produced by this firing become reserved and are kept on the right side of the output places. This firing indicates the starting of action a. The execution of this step in marking M w.r.t. binding b, producing a new marking 
, is denoted by:

Completion step: let  be a transition associated with a timed action a. A completion step ↓t is a transfer of a reserved token from the right side of a place p, to be free in the left side of this place, indicating the end of action a. The execution of this step in marking M, producing a new marking 
, is denoted by:

For the purpose of preserving true-concurrency in a natural way and avoiding the state explosion problem, we consider only start steps, while completion steps can be deduced implicitly by the corresponding durations. We define a state of a DaHL system by a reachable timed marking that coincide with a starting of an action. A state 𝓇
 is a pair 
, where 
 is a Petri net marking, and 
 describes time (time durations and clocks). In what follows, by 
 we denote a start step which gives state 𝓇
, and by Ψ the set of all start steps.

Let  be a DaHL system. A sequence of start steps 
 in , is called a run if and only if, for some natural number , there exist timed markings 
 and bindings 
 such that:
 
 
 
 The set of all possible runs is called the behavior of . A marking M is called reachable if there exists a run from the initial marking to M. A place p in a DaHL system is called bounded if and only if for every reachable marking M the number of free and reserved tokens residing in p does not exceed some fixed bound , i.e. 
. A DaHL system is bounded if and only if all its places are bounded. Otherwise, it is unbounded.

We define local clocks associated with tokens by time intervals. This is done because transition firings in DaHL are controlled by firing intervals. An example is two concurrent transitions 
 and 
 that became enabled at the same moment. 
 is associated with a timed action a and a firing interval [1,2] whereas 
 is associated with a timed action b and a firing interval [2,3]. When action a starts, a reserved token is created with a clock 𝒽 initialized to [0,0]. By the start of b, 𝒽 shows the time elapsed since a started. Actually, we cannot know the exact value of 𝒽. It is between 0 (2-2) and 2 (3-1) time units. However, such time interval is useful, for instance, to deduce the remaining processing time of actions. If θ is the time duration of action a, then its remaining processing time, when action b starts, is within the time interval .

We represent each local clock 𝒽 by a time interval 𝒽𝒽. Let  be a transition associated with a timed action a,  — the time duration of action a, and 𝒽 — a local clock associated with a token k which is produced by transition t. We deduce the following:

•
if 𝒽, then k is reserved;

•
if 𝒽, then k is not reserved;

•
if 𝒽𝒽, then k is sometimes reserved and sometimes not reserved.

A token which is not reserved in a place p is either free or it is consumed by firing another transition. In what follows, we denote by ϕ-tokens the set of tokens that are not indicated exactly, in a specific state, whether they are reserved, free or consumed.
Furthermore, whereas transition firings in DaHL are controlled by firing intervals, we cannot specify the exact time at which a start step occurs. A start step can occur within a time interval called start-event interval representing the minimum and maximum time in which the system can reach a certain reachable state. A start-event interval in which the system reaches state 𝓇
 is denoted by 
 where 
.

A state change from 𝓇
 to 𝓇
 means that 
 occurs after 
, unless there is a junction between the corresponding start-event intervals where 
 and 
 can occur at the same time. An example is shown in Fig. 6. Here  and  are two start-event intervals in which the system can reach 𝓇
 and 𝓇
, respectively. Therefore, either 
 occurs after 
 (e.g. 
 at 2 and 
 at 3) or both start steps occur at the same time.

Fig. 6
Download : Download high-res image (19KB)
Download : Download full-size image
Fig. 6. ψk never occurs before ψj.

4. Constructing a reachability graph for DaHL
In this section, we define a reachability graph for DaHL systems, called a hybrid-based reachability graph (hRG). It is a labeled, directed graph composed of reachable states linked by edges. Edges represent start steps associated with start-event intervals. Nodes represent states of the system that coincide with the starting of actions. Each state contains a marking (free tokens, reserved tokens and/or ϕ-tokens). In order to find out the execution status of all running actions, any reserved token or ϕ-token is associated with a duration and also its real-valued clock (time interval). An example is 
 denoting a token k, in place 
 where the corresponding clock has a value between 1 and 2 time units and the associated duration is 5 time units. Thus, we can deduce that k will be free after a period between 3 () and 4 () time units.

Fig. 7 illustrates an example of a hybrid-based reachability graph showing two possible scenarios with four states each. Let us consider, for instance, the first scenario 𝓇
𝓇
𝓇
𝓇
. First of all, the execution begins with marking 
 and 
 with free tokens 
 and 
, respectively. The start step 
 occurs within a time interval 
. The result is state 𝓇
 associated with one free token (
) in 
 and three new-created reserved tokens (
) in 
, 
 and 
. The reserved tokens are associated with the duration 𝒹
 and the clock value  (new created tokens). Next, a start step 
 occurs in a start-event interval . The result is state 𝓇
. Finally, 
 occurs in a start-event interval  resulting with state 𝓇
 with one free token is in 
 and one reserved token is in 
.

Fig. 7
Download : Download high-res image (103KB)
Download : Download full-size image
Fig. 7. An example of a hybrid-based reachability graph.

Definition 5 Hybrid-based reachability graph

Let  be a DaHL system. The hybrid-based reachability graph of  is the graph  with:

•
 is a set of reachable states;

•
 is an edge in  if there is a start step , w.r.t. binding b, such that 
;

•
 is a function labeling each edge by a start step;

•
 is a function that assigns a start-event interval to each step;

Verification and analysis of DaHL systems can be decided by means of their finite reachability graph. If a DaHL system contains an unbounded place, this implies that the state space is infinite (as is the case with basic Petri nets). Even if all places are bounded, a DaHL system may have an infinite number of reachable states. There will be a cyclic behavior, if the system starts in some state 𝓇
 and ends over time in another state 𝓇
 with the same timed marking. We write 𝓇
𝓇
. To cope with this problem in bounded DaHL systems, we relate 𝓇
 to 𝓇
 using an inference arc. It is a special edge labeled by an interval , where 
 and 
. x and y are added to the subsequent start-event intervals continuously. As an example, without using an inference arc, hRG of Fig. 8 is infinite. Note that the marking in 𝓇
 is infinitely repeated (𝓇
, 𝓇
, etc.). The same thing for 𝓇
 and 𝓇
. By the use of an inference arc, the problem is resolved in Fig. 9 where an inference arc has the label  (
 and 
).

Fig. 8
Download : Download high-res image (107KB)
Download : Download full-size image
Fig. 8. Infinite hRG constructed without using inference arcs.

Fig. 9
Download : Download high-res image (56KB)
Download : Download full-size image
Fig. 9. Finite hRG using an inference arc.

Now we can introduce a generation algorithm to construct a hybrid reachability graph which is finite for bounded DaHL systems and infinite for unbounded DaHL systems. Using Algorithm 1, the initial state is created when initial places are marked with enabling free tokens. Next, the while loop repeats as long as there exists a transition that can directly fire from a leaf state. In this step, for any possible binding of these transitions, we create a new state (reserved tokens cannot be concerned with any new valid binding unless they become free). If a new created state 𝓇
 has the same timed marking and the corresponding start-event interval of another state 𝓇
, we say that these states are doubled and we write 𝓇
𝓇
. We can replace 𝓇
 by a dashed state with the same name of 𝓇
. It represents a copy of 𝓇
. This graphical convention allows to minimize the state space as well as to simplify the model. Also, the algorithm uses inference arcs to overcome the cyclic behavior problem and to minimize the state space.

Algorithm 1
Download : Download high-res image (125KB)
Download : Download full-size image
Algorithm 1. Generation of hybrid-based reachability graph.

Fig. 11 illustrates a hybrid-based reachability graph which is generated using Algorithm 1. It shows the true-concurrency in the DaHL of Fig. 10. The graph illustrates two possible scenarios. In the first scenario, both start steps 
 and 
 occur at the same time. This is shown in 𝓇
 by two clocks having the value [0,0] and one of them was created and initialized in 𝓇
. In the second scenario, because any reachable state cannot be reached before its predecessor, we know that the action associated with 
 cannot start before 
. In both scenarios, a concurrent execution of 
 is possible. Further, the reachability graph provides lots of information. For instance, by the start-event 
, b becomes reserved in 
 indicating that some resources become unavailable in the start-event interval [5,6]. Also in state 𝓇
, by the start-event 
, f becomes reserved in 
, but d is either free or it was consumed, i.e. some resources are either available or unavailable in this state. This is shown by the duration and the clock associated with token d in 𝓇
.

Fig. 10
Download : Download high-res image (49KB)
Download : Download full-size image
Fig. 10. High-level Petri nets with durable actions.

Fig. 11
Download : Download high-res image (167KB)
Download : Download full-size image
Fig. 11. Hybrid-based reachability graph for the DaHL in Fig. 10.

In order to clarify the timestamp, we add two schemas. The first schema (cf. Fig. 12) illustrates the timestamp in the first scenario whilst the second one (cf. Fig. 13) is devoted to the second scenario. A real-valued clock associated with a token k, where k is produced by a transition t in a reachable marking 𝓇
, is denoted by 𝒽
𝓇
. In these schemas, blue lines represent start-event intervals. Each blue line is associated with the corresponding start step and a time duration. Red lines represent a time interval in which the actions end, i.e., completion steps. For instance, in Fig. 12 let us consider the elapsed time, from the initial state, is between 8 and 11 time units. In this time interval, the start step 
 occurs and therefore 𝒽
𝓇
 is initialized to . The action associated with 
 lasts 4 time units, thus its execution will be ended when the elapsed time from initial state is between 12 and 15 time units. This is represented by the red line.

Fig. 12
Download : Download high-res image (52KB)
Download : Download full-size image
Fig. 12. First scenario — DaHL of Fig. 10.

Fig. 13
Download : Download high-res image (49KB)
Download : Download full-size image
Fig. 13. Second scenario — DaHL of Fig. 10.

5. Case study
The case study analyzes the DaHL system illustrated in Fig. 4. Such analysis enables the verification of some desirable properties and the prediction of timing properties before implementation.

We proposed a simple scenario where autonomous vehicles are able to transport containers freely in an enterprise environment provided that missions are accomplished on time while avoiding conflicts. According to the system illustrated in Fig. 4, the vehicle starts within the time interval  that may represent the amount of time it takes for the vehicle to specify a mission and to start its engine. While a vehicle moves, it periodically sends messages to the controller. This latter receives and analyzes messages to avoid collisions among vehicles. In case the vehicle reaches the final position, it takes 1 time unit to be available again and a period between 4 and 5 time units to specify a new mission and to start its engine. So, the return to some states is essential to the vehicle to take a new mission and to send messages periodically. The example showed that the control flow, data flow, time, and communications are necessary for empowering efficient and safe transportation of goods.

To improve the reliability of processes, one must first get assurance that the process model satisfies desirable properties. Some important desirable properties are deadlock-freeness, liveness, the existence of home space, and reversibility. Deadlock-freeness means that it is always possible to execute some activity. A stronger activity is liveness. A system is live if from any reachable state, the system never loses the possibility to execute any activity. Another desirable property for a reliable system is the existence of a home space — a set of home states. A reachable state 𝓇 is called home state if from any reachable state, there is a sequence of start steps leads to 𝓇. This property is desirable because it is inextricably related to properties such as ergodicity, of significant importance in the context of performance analysis and system simulation [10]. If the initial state is home state, the system is reversible. Reversibility is an important property that may be used, for example, to guarantee the return to the initial state in case of an erroneous situation.

By applying Algorithm 1, we have generated the hybrid-based reachability graph shown in Fig. 14. It is finite and contains twenty-three states consist of reachable markings and time information, thus the corresponding DaHL is bounded. Also, we can easily deduce that the process model, depicted in Fig. 4, is deadlock-free since there is no leaf states. A closer look allows us to know that the home space of the process model is the whole reachable states even the initial one. The initial state is home state therefore the system is reversible. Finally, the process model is live because all transitions are present (by the corresponding start steps) and the home space of the process model consists of all reachable states without exception.

Fig. 14
Download : Download high-res image (261KB)
Download : Download full-size image
Fig. 14. Hybrid-based reachability graph for the DaHL system in Fig. 4.

Furthermore, the generated hRG enables the prediction of some timing properties before implementation. For example, Both states 𝓇
 and 𝓇
 are reached by starting the same action . An inference arc, connecting state 𝓇
 to state 𝓇
, is associated with the time interval . Thus, one can predict that the time lapse between sending two messages, from vehicle to controller, is between 11 and 12 time units. In addition, we can predict the maximum time for a vehicle to reach a final position. The longest path from 𝓇
 to the start step 
 (start of action send) takes time laps between 16 and 19 time units, and action send has a duration of 1 time unit. Therefore, the maximum time for a vehicle to reach a final position is 20 () time units.

6. Conclusions and future work
The control flow, data flow, communications, time, and concurrency are necessary for empowering safe and efficient systems of concurrent communicating agents with durable actions. Time durations are crucial for such systems and therefore a true-concurrency semantics is really needed. In that light, expressing the true-concurrency in a natural way, we defined DaHL systems as a fused set of modules for systems consisting of concurrent agents which can interact with each other. Each module is a time-dependent colored Petri net supported by an interface for asynchronous message passing among partners. Transitions are characterized by a time duration where every action takes some amount of time. Also, transitions are labeled by time intervals that may specify delays and safety distances of time between actions.

Verification of Petri nets can be performed with the help of a finite reachability graph. We introduced hRG, with a true-concurrency semantics, as a hybrid means of describing the entire state space of DaHL systems. A state in DaHL systems is a pair where the first component is a Petri net marking and the second specifies time characteristics. We showed that such reachability graph allows us to predict timing properties prior to real implementation, and to check some desirable properties. A generation algorithm was introduced to construct hRG which is finite for bounded DaHL systems. As a case study, we proposed to model and analyze a simple scenario where autonomous vehicles are able to transport containers freely in an enterprise environment. The case study showed the applicability of our approach for the modeling and verification of systems of concurrent communicating agents.

In the near future, we aim to check the conformance of DaHL systems and event logs of systems of concurrent communicating agents with durable actions. Conformance checking, which is one of the three pillars of process mining, allows to detect deviations by checking how well modeled behaviors conform reality and vice versa.

CRediT authorship contribution statement
Khalil Mecheraoui: Conceptualization, Methodology. Irina A. Lomazova: Supervision. Nabil Belala: Supervision.