Abstract
The Internet of Things (IoT) becomes a leading field of computer science, which simplifies the life of human beings. The IoT, devices can interconnect and communicate with each other, in a fully autonomous mode. This autonomy has made the IoT network vulnerable to various security threats. However, due to this autonomy, there is a strong need for reliable security and storage mechanism for authentication to exchange data between IoT devices. To solve this problem, we propose an efficient method known as SCAB-IoTA, which ensures identification and authentication of IoT devices and also provides secure communication in the open environment. Along with authentication and secure communication, the scheme also ensures data integrity. SCAB-IoTA used the blockchain and hybrid cryptosystem (the combination of Advanced Encryption Standard (AES) and Elliptic Curve Digital Signature Algorithm (ECDSA) cryptographic techniques) to enhance the security of IoT applications to prevent various attacks along with less computational, and storage overhead. Furthermore, we have a secure cluster of IoT devices based on angular distance (AD), so that devices can securely communicate without any interruption. A secure and robust trust mechanism has employed to build these clusters, where each IoT device has to authenticate itself before joining the cluster. The obtained results satisfy the IoT security requirements with 60% reduced computation, storage and communication cost compared with state-of-the-art methods. The security analysis illustrates that SCAB-IoTA withstands against various cyberattacks such as impersonation, message replay, man-in-the-middle, and botnet attacks.

Previous
Next 
Keywords
Secure IoT cluster

Hybrid cryptosystem

Smart contract

Angular motion

1. Introduction
The IoT can transform the lives of human beings and can also provide enormous financial and social benefits [1]. IoT can make essential applications for our future smart cities, such as intelligent waste management, a monitoring system for environment, smart and intelligent transportation systems, smart and advanced parking systems, intelligent traffic management, and many other applications [2], [3]. The concept behind IoT and its various forms is the ubiquitous of things, where they can communicate and interact for designing a wide area of services. Latest improvements in the IoT helped the advancement in smart city development. Hence, for the interrupt free functioning of the IoT, it must be accessible only to authenticated and authorized devices. Otherwise, it becomes a target of various security risks such as information stealing, data variation, and identity theft [4], [5]. Conventional security mechanisms alone are not sufficient for IoT to safeguard information integrity due to its high demand for computation. Additionally, the architecture of IoT is considerably different from the Internet since IoT devices are low powered and have less computational capacity [6]. Therefore, it restricts the adoption of traditional cryptographic security mechanisms. Directly increasing computational demand for IoV is neither scalable nor practical [7], [8]. The state-of-the-art schemes proposed by the different researchers (briefly explained in the literature review section) are not suitable for real-time applications due to the high computational overhead [9], [10], [11]. The schemes are not suitable for devices which operate on very low energy. To solve the above problem, SCAB-IoTA employed lightweight cryptographic functions AES and ECDSA for signature and verification of information for authentication and secure communication, and SHA256 to ensure information integrity. We have also employed the Ethereum based blockchain concept to provide a robust, secure storage system.

1.1. Why blockchain in IoT?
The IoT network is different from the internet network. The security of IoT can be improved with decentralized security solutions instead of centralized solutions. The state-of-the-art solutions of IoT were centralized, which was not very much sufficient. Hence we have employed the blockchain concept into the IoT. Blockchain is one of the technologies that can resolve the security challenges of the IoT networks [12], [13], [14], [15]. It is a scalable, distributed, and tamper-proof ledger that keeps uniform records of information at varying locations and has the potential to deal with the information security affair in IoT networks [4]. Blockchain can deal with the severe security issues of IoT, particularly the integrity and reliability of the information, and authentication [16], [17]. Blockchain has earned popularity very quickly and is used widely for applications, including smart contracts [18], distributed storage, and digital assets [19]. The security requirement of IoT achieved with blockchain technologies at a very extent. Decentralization, Integrity, and Anonymity are the prominent characteristics of blockchain that increases the integrity of IoT applications and also improves the IoT security [20]. Using the benefits of blockchain and it's resiliency, we propose an effective and decentralized method for authentication and authorization of IoT devices where a group of devices creates a secure zone (cluster) to communicate with each other securely and efficiently. We have used the Ethereum blockchain and smart contracts. The smart contracts provide the accessibility and association of IoT device to device and to other entities.

1.2. System components and framework
In the proposed mechanism, there are three types of devices Blockchain Server (BS), Cluster Head (CH), and Cluster Member (CM). The BS manages the record of data, which is shared with members of the cluster. All the CH have an identical copy of the blockchain. The CH has the high processing power and energy-efficient amongst all the devices (cluster member) of the cluster, due to this property, the CH controls every cluster, thus we name it as the controller. The IoT devices (CM) are smart devices, such as smart bulbs, speakers, specialized medical equipments, Air-conditioners, and many others. Every cluster is created with a verification process so that no malicious devices could be a part of the cluster, and all the devices (cluster members) can communicate with each other in a secure environment. Fig. 1 shows the framework of our scheme and also the interaction between components. The scheme is divided into two parts, first cluster creation and device authentication, and second secret-key generation and M2M (member to member) communication. In the first part, the secure cluster is created, and the device is authenticated to become a cluster member. After joining the cluster, every CM gets the batch ID, which is being used in the communication. In the second part, a one-time secret-key is generated for a member to member communication. However, intra-cluster communication is not allowed in the system. We have used the hybrid cryptosystem, i.e., a combination of the secret key and public-key cryptography. For the public-key cryptography, we have used the ECDSA, and a 192-bit AES is used for secret-key 
 cryptography. The CH and BS have the key pair of the public and private keys. The public key of the blockchain (
) is shared with the CH because only CH has the right to create the block and store it at the blockchain server and the public key of CH (
) is shared with the CMs. The secret key is the one-time session key, which is created and assigned by CH to CM.

Fig. 1
Download : Download high-res image (203KB)
Download : Download full-size image
Fig. 1. Overview of SCAB-IoTA mechanism.

1.3. System model description
The proposed scheme is a two-phase process, first is cluster creation and member authentication, and second is the secret-key generation and M2M communication. In the cluster creation and member authentication phase the clusters are created based on the angular distance (AD), i.e., the device which wishes to join the cluster and become CM, first it needs to be at a certain distance from the CH (called cluster radius R). Once the device is in the range of CH, it sends a request (which contains device ID 
) to join the cluster. CH verifies the device, and after the verification, it sends its public-key 
 to the device. After getting the cluster ID and CH's public-key, the device becomes the cluster member. The CH also creates the block at the blockchain server, which contains device ID. In the secret-key generation and M2M communication phase, the M2M communication is secured with AES encryption using secret-key 
. Any member who wants to communicate with another member must have the secret-key, generated by the CH. At first 
 (
 member) sends a request for communication to 
 (
 member). 
 sends a second request to CH for verification of 
 and 
 generation. CH verifies the member's identification through the blockchain server if the member's block exists, which means the member is authentic. Otherwise, a warning message is generated by CH to the requesting device. After verifying the 
, CH generates a one-time secret-key 
 and sends to both the members, i.e., 
 and 
. After getting a one-time secret-key, now both members communicate using symmetric key encryption. We used a hybrid cryptosystem with blockchain technology, which tremendously reduces the communication time as well as the computational cost. The proposed algorithm also gives good results in terms of storage and energy efficiency.

The rest of the paper is organized as follows. Section 2 summarizes the literature review of various existing work. Section 3 defines our motivation and contribution of the proposed work, and section 4 defines the preliminaries. Section 5 describes the proposed work in detail. We explain performance measures and result analysis in section 6, and in the end, section 7 is the conclusion and future work.

2. Literature review
In this section, we reviewed the previous work of various researchers and identified some strength in their work as well as some flaws which need to be addressed. We divide it into two categories, i.e., security with blockchain and security without blockchain. The details are given below.

2.1. Security in IoT without using blockchain
Some researchers have derived some security mechanisms for IoT like energy-constrained devices. In that way, Jain M.A. et al. [21] proposed a device authentication scheme for IoT environments. They have used the constrained application protocol (CoAP) for the communication of IoT devices. The condition specified resource allocation scheme is used to reduce energy consumption and computation time. It is a four-way authentication handshake protocol of IoT devices. However, the scheme is vulnerable to attacks such as Sybil attack, device tampering. Yao X. et al. [22] derived a lightweight certificate-less public key cryptography system based on ECC, which reduced the drawbacks of existing certificate-less public-key cryptography schemes. The scheme is meant to reduce the computational and communication overheads. Though the scheme reduces the computational and communication overheads, the scheme is not storage efficient, and there is no clause for the secure data storage and secure sharing of data. Roman R. et al. [23] proposed a cloud computing and edge-computing based immune security system known as a virtual immune system (VIS). Threat intelligence is one of the components of VIS, which allows it to adapt to new threats. Alqahtani F. et al. [24], also proposed a cloud computing-based service authentication method for communication in the IoT network. It is an intelligent agent-based trust monitoring scheme to protect IoT communication from the various threats. Wazid M. et al. [25] proposed a cloud-based lightweight authentication mechanism for IoT environment. An authenticated user can access the data of the IoT sensor network. However, the proposed scheme is motivated by day-to-day life problems faced by IoT application users. Still, it faces some vulnerabilities from some cyber-attacks such as fake node injection, non-repudiation. Hence all state-of-the-art schemes suffer from either cyber attacks or computation, storage and communication overhead (Table 1).


Table 1. Aspects of comparison of security in IoT without using Blockchain.

Characteristics	Jan M. A. [21]	Alqahtani F. et al. [24]	Wazid M. et al. [25]	Garg S. et al. [26]
Objectives	A lightweight device authentication and resource observing scheme for IoT environments	cloud computing and intelligent agent based service authentication method for communication in IoT network	cloud based lightweight authentication mechanism for IoT environment.	multi-staged anomaly detection for augmenting the security in IoT applications.

Security mechanism	Advance encryption scheme (AES).	Elliptic curve cryptography (ECC).	Cryptographic hash function.	Cryptographic hash function.

Advantages	Less computation overhead compared to other schemes.	learning-based algorithm for packet authentication to reduce communication and computation time.	An authorized user can access the IoT sensor data remotely.	The scheme performance is good in terms of communication for smart cities.

Main Usage	Smart Homes	Smart Homes	smart Homes	Smart cities

Security measures	Vulnerable to Man-in-the-middle attack, Sybil attack, device tampering.	Vulnerable to Sybil attack, fake node injection.	Vulnerable to fake node injection, traffic analysis attack, Non-Repudiation.	Vulnerable to Non-Repudiation, Sybil attack.

Performance Measure	Energy consumption, computation time, bandwidth utilization.	Energy consumption, maximum response time, bandwidth utilization.	Real-or-Random (ROR) model, communication time, computation time.	Eps (maximum radius of the neighbourhood), MinPts (minimum number of points in Eps neighbourhood).
2.2. Security in IoT using blockchain
Though many researchers have proposed many schemes for security in IoT, there are still many areas, which also need to be improved, such as decentralized storage, lightweight, secure communication, device authentication mechanisms. So for these areas, some researchers came up with blockchain-based security solutions for IoT applications. Interoperability is an important issue of IoT infrastructure. Shen et al. [27] propose one scheme named as secure SVM (support vector machine). They have used the blockchain technique to construct a durable and reliable data distribution platform. Hammi M.T. et al. [28] also proposed a scheme for IoT application using blockchain concept called bubble of trust, which creates a secure bubble before making the communication. However, the scheme has high computation demand as compared to SCAB-IoTA, and also there are possibilities of DDoS and man-in-the-middle attack. Tang B. et al. [29] proposed a scheme called IoT passport. The primary objective of the scheme is to enable cross-platform collaboration, which is highly needed in IoT infrastructure. In addition to this, it is a trust framework that comprises blockchain-based authentication, authorization, and trust. The deficiency of the scheme is it has a high probability of Sybil and botnet attack. Viriyasitavat W. et al. [30] also proposed a blockchain-based architecture for inseparability in a decentralized environment for the services of IoT. The author defined the smart contract for device registration and authentication to provide a trust architecture. To further strengthen the secrecy and authenticity, Beini Zhou et al. [31] proposed scheme, which is the combination of blockchain with identity-based encryption. In this scheme, the private key assigned to the participating objects. To be very specific, the key generation centre (KGC) is developed for obtaining authentication mechanisms, which are classified into three sections. This scheme was applied in blockchain to counter the KGC attacks. Due to the involvement of the third entity KGC the communication and computation overhead is high, and the scheme also vulnerable to man-in-the-middle attack and replay attack. Ali Dorri et al. [32] has proposed a scheme for lightweight devices. In that scheme, the blockchain used to accomplish decentralization as well as peer-to-peer privacy and security. The scheme is a two-tier process, i.e., the first tier is a smart home environment, and second-tier is an overlay network creation. To control both the tiers, symmetric encryption is used. The given scheme is not computationally feasible as it takes much time, which is not suitable for low powered devices and a time-constrained environment. Lei Zhang et al. [33] proposed a scheme where the Internet of Vehicle (IoV) partitioned into several divisions. However, when a fake message is detected, various objects collaborate in identifying the real identity of the sender. If the advertisement message is later determined to be compromised, then the real identity of the sender can be recovered. Therefore, the proposed mechanism blocks the reception of a fake message. The Ruinian Li et al. [34] proposed a scheme for IoT data storage protection based on blockchain. They have used the distributed hash table (DHT) for data storage and the concept of Edge computing to perform the computation of IoT devices. However, the author does not explain how the scheme protects from device spoofing attack, man-in-the-middle attack, and botnet attack. Regio A. Michelin et al. [35] proposed a scheme called speedy chain, which is blockchain-based data storage for smart cities. They have used the permissioned blockchain, whereas the other authors above used the permissionless blockchain. The proposed scheme mainly focused on the security of Intelligent Transportation Systems (ITS), and the given scheme is not suitable for a heterogeneous environment but a homogeneous environment. Biswas S. et al. [36] proposed a lightweight consensus algorithm for IoT business blockchain called as proof of block and trade (PoBT) to reduce the computation time. The author has also presented the ledger distribution mechanism to reduce the memory requirement of the IoT devices. Mirsky Y. et al. [37] proposed the anomaly detection for IoT applications using the blockchain concept. It is a training based scheme where a system is trained to detect the security vulnerabilities in collaboration with the IoT devices. The purpose of the framework is to perform anomaly detection on themselves and to collaborate to find the anomaly detection model autonomously. Zhao Q. et al. [38] proposed a scheme to check the integrity of the remote data for the IoT information system. The design goal of the scheme was correctness, privacy, dynamic updating and public verification. There is one central entity named key generation centre (KGC) to generate secret credential, due to this the scheme is more prone to the single point failure, DDoS attack. Khalid U. et al. [39] proposed a decentralized authentication scheme for IoT systems. The mechanism is based on fog computing and public blockchain concept. Table 2 shows the comparative study of various methods derived by many researchers.


Table 2. Aspects of comparison of security in IoT using Blockchain.

Characteristics	Ali Dorri et al. [32]	Lei Zhang et al. [33]	Beini Zhou et al. [31]	Ruinian Li et al. [34]	Regio A. Michelin et al. [35]
Objectives	Distributed Time-based Consensus algorithm (DTC) to reduce mining overhead and delay,	Secure data sharing using blockchain on the Internet of Vehicles	key generation the centre is built on the blockchain for achieving multiple authority mechanisms	large-scale IoT data storage and protection, incorporate edge computing to perform computations for IoT devices	Allow smart vehicles to share their data while keeping secrecy, integrity, flexibility, and non-repudiation in a decentralized manner.

Security mechanism	Used public Key infrastructure	Used public Key infrastructure	Used blockchain with the identity-based encryption	Used Certificateless cryptography	Used key update interval (KUI)

Advantages	suitable for low resource devices, secure from various attacks	Improving intelligent transportation system	Punishment for fake announcement message, Low latency for new transaction	Reduces drawbacks of Identity-based encryption	Reduced computational time using Edge computing

Main Usage	Smart Homes	Smart Cities	NA	Various, Not mentioned	Smart Cities

Security measures	DoS/DDoS, Blockchain modification, Sybil attack, Consensus period attack:	Authenticity, privacy, rogue key attack.	Prevent the KGC attacks, replay attacks, DoS attacks	Authentication, privacy, Traceability and Accountability, Blockchain Security	Non-repudiation, data integrity and resilience
3. Motivation and contribution
Security is the main issue that restricts the adoption of IoT in social life. However, many researchers have been working to make the IoT a more reliable and secure technology, so that it can be entirely adopted in society to make human life more manageable and convenient. Since there are many schemes and methods developed by researchers, developers, but due to the constrained environment (low computational power, low energy) of IoT, those techniques are not feasible. Thus, an efficient and secure information transmission scheme is required to exchange meaningful information in IoT applications. Blockchain technology is being considered a powerful tool for enabling trusted interactions between various components in a decentralized way. Despite, some challenges emerge during the integration of blockchain technology with IoT, such as high computation, storage and communication cost. Many researchers are working to solve the security related issues of IoT. Therefore, it is necessary to find the current status and difficulties with the existing security methods and techniques. So, Focusing on secure communication, efficient authentication, and performance metrics, in this paper (SCAB-IoTA), we proposed an efficient security scheme for secure communication and authentication, that is based on blockchain. So, the major contributions of this paper are as follows:

•
We have proposed a blockchain-based lightweight authentication and secure communication scheme for IoT using hybrid cryptosystem with lightweight cryptographic functions such as AES, ECDSA and one-way hash function.

•
Implemented the scheme (SCAB-IoTA) on Desktop PC as well as on Raspberry Pi (considering as lightweight IoT device).

•
Measured different performance measures, such as communication cost, computational cost, storage cost, energy consumption, and exhibits comparative analysis with various state-of-the-art methods.

•
Performed security analysis for various critical security attacks such as a man-in-middle attack, Sybil attack, message replay attack, impersonation attack, data theft, botnet attack, non-repudiation, spoofing attack, blockchain modification, etc.

4. Preliminaries
Before moving to the proposed method, first understand the taxonomy of the framework, ECDSA and AES, angular distance, Merkle-root-tree, and smart contract. After that, we present our proposed scheme.

4.1. Layered architecture
The proposed system is a layered architecture that has three layers, i.e., device layer, controller layer, and storage layer. The device layer comprised the physical devices of the IoT applications, which sense data and share with other IoT devices. The next layer is the controller layer, which is managed by the cluster head. The controller layer is responsible for device authentication, block creation and cluster creation, and secret-key 
 generation. Fig. 2 shows the layered architecture of the SCAB-IoTA scheme.

Fig. 2
Download : Download high-res image (170KB)
Download : Download full-size image
Fig. 2. Layered architecture of SCAB-IoTA scheme.

4.2. Elliptic Curve Digital Signature Algorithm (ECDSA) and Advanced Encryption Standard (AES)
ECDSA: It is a public-key cryptography mechanism. ECDSA is a modification of the Digital Signature Algorithm (DSA). If 
 wants to send a message message then it first signs the message and sends it to 
. 
 verifies the signature then only communication is possible.

AES: It is the symmetric key cryptography. The only single key is used for encryption and decryption. It uses three-bit combinations, i.e., 128/192/256-bit keys. In SCAB-IoTA, the cluster member to member communication is secured with AES cryptography. In our scheme, we have used a 192-bit key.

4.3. Angular Distance (AD)
The angular distance used to calculate the absolute distance between two objects. Here in our scheme, we used AD to calculate the distance between the IoT device, which wants to join the cluster. To find the angular distance, angular matrix  
  is used. If a CM moves with θ angle w.r.t. original coordinate, then the new coordinates of the CM can be calculated using equation 1. However, if the device is first entered into the cluster, then the angle would be zero degrees because there is no previous coordinate. After calculating the new coordinate, the distance is calculated using equation 2. Now let's assume IoT device is at coordinate 
, after movement new coordinate is 
, and the CH's coordinate is 
 then the AD calculated as follows:(1)
 
 
 
(2)
 Note: Here  is the absolute difference.

4.4. Merkle-root-tree
Merkle tree is the tree of hashes of different transactions in the blocks, i.e., the summary of all the transactions in a block. Because of that, it is also known as Hash Tree. It helps in effective and secure verification of the contents in a block. It also provides consistency of the content of the blocks. Bitcoin and Ethereum both use the Merkle tree structure for the transactions. Fig. 3 illustrates the typical representation of the Merkle root tree. In SCAB-IoTA, the communicating messages are treated as transactions. The controller collects all these transactions and creates Merkle-root to create the next block to add into the blockchain.

Fig. 3
Download : Download high-res image (130KB)
Download : Download full-size image
Fig. 3. Illustration of Merkle root tree.

4.5. Smart contract
A smart contract is typically an if-then-else based conditional computer program that autonomously controls the transfer of digital assets or secret information between two parties. It is very similar to a physical world contract, but it is in the digital form stored inside a blockchain. They are automatically executed when some predetermined conditions are triggered. The basic idea of a smart contract is quite simple, which can be understood as follows:

1.
IF this condition true, THEN this action should be taken.

2.
IF this thing exists THEN take this action. That is, it is a conditional statement, where an action is taken according to the condition, which could be true or false.

5. SCAB-IoTA: secure communication and authentication for IoT applications using blockchain
We gave a formal description of our proposed scheme in the introduction section. Here we presented a more detailed description of the scheme. We employ a trust mechanism to create the clusters, which is highly scalable so that a device can join and leave the cluster more efficiently. Before joining the cluster, every device has to go through a secure authentication mechanism, and then only it can make communication to other cluster devices. We have used hybrid cryptography to provide a reliable security mechanism. The public-key cryptography used for cluster member (CM) to cluster head (CH) communication, which is ECDSA based encryption/decryption method. Secret-key cryptography used for M2M communication, which is an AES based encryption/decryption method. Table 3 exhibits all the symbols and notation which we have used in the scheme.


Table 3. Symbol Table.

Symbol	Description
E(K(X))	Encryption of X using key K
D(K(X))	Decryption of X using key K
H(X)	SHA256 hashing of X
Did	Unique Identity of ith device
ni	Pseudo random number of i component
R	Cluster Radius
⊕	Bitwise XOR operation
‖	Concatenation Operation
Sk	One-time secret key
BKpri,BKpub	private and public key of Blockchain server
CKpri,CKpub	private and public key of controller
△Ti, 	Threshold time
κ, ξ	Intermediate variables used to share secret information
Ti, 	Timestamp
⁎
 	Current timestamp
Xd,Yd	Coordinates of device
Xch,Ych	Coordinates of controller
di,j	Angular distance between i and j
5.1. Cluster creation and device authentication
The clusters are created based on the angular distance (AD), i.e., the device which wishes to join the cluster and become CM, first it needs to be at a certain distance from the CH (called cluster radius R). Once the device is in the range of CH, it sends a request (which contains device ID 
) to join the cluster. CH verifies the device, and then, it sends its public-key 
 to the device. After getting the CH's public-key, the device becomes the cluster member. The CH also creates the block at the blockchain server, which contains device ID.

The process of Cluster creation and device authentication is illustrated in Fig. 4. The process is as follows:

1.
The device 
 has the device ID 
, device coordinates 
, timestamp 
 and a nonce 
. Then 
 do the computation to create a request to join the cluster as 
, 
 and send 
 to the controller CH.

2.
After receiving the request, CH first check if 
 is true, otherwise discard the request. If condition holds true then controller compute the distance using the angular distance (see Algorithm 1), if the device is in the proper range of controller then it proceed further and compute 
⁎
, then check whether 
⁎
, if so then it do the computation as 
= 
, 
 (using merkle root tree concept), then it create block at the blockchain (using the PoS (proof-of-State) concept) as 
. After that it encrypt the created block using the public key 
 of the blockchain server as 
 and send 
 to the blockchain server to share with other controllers. Also, CH compute κ and ξ as 
, 
 to share it public key with requesting device. Then it sends 
 to device 
.

3.
Blockchain server receives the encrypted new block from the controller. First it check if 
 is true or not, if true then it decrypt the CT using its own private key 
 as 
, then it securely broadcast this new block to all the controllers.

4.
After receiving response from the controller device 
 first calculate if 
 is true or not, if true then 
 retrieve the public key of controller from the received response as 
, 
, and store the 
 for future communication. This procedure is followed by other devices also, and we create a secure cluster of devices where every device is authenticated from CH.

Fig. 4
Download : Download high-res image (253KB)
Download : Download full-size image
Fig. 4. Cluster creation and device authentication.

5.2. Secret-key generation and M2M communication
Communication between two devices is secured using a 192-bit AES symmetric key cryptography. The cluster head generates the shared secret key after requesting the member device for the communication. Communication between member device and cluster head is secured using the ECDSA asymmetric key cryptography. Hence, we have used the hybrid cryptosystem for enhanced security with low computational time and high level of security. Any member who wants to communicate with another member must have the secret-key, generated by the CH. The process of secret key generation is explained in Algorithm 2, and the M2M communication is illustrated in Fig. 5. The process of this phase is as follows:

1.
Cluster member 
 (
 member) sends a request as 
 to 
 (another cluster member) for the communication.

2.
Member 
 receives the request and first checks if 
⁎
 is true or not, if true then, to check the authenticity of the member 
 and one-time secret key generation, it sends a request to the CH as 
 and waits for the response.

3.
After receiving request from the 
, first it checks 
⁎
 is true then CH verifies both member, i.e., 
 both, from the blockchain database. After verifying both members first it generates the one-time secret key 
 using Algorithm 2 and sends the response to both members as 
, 
 to 
 and 
 respectively. If either of the requesting members is not found by CH, then a warning message is generated, so that other controllers get notified.

4.
Member 
 compute the received response and get the one-time secret key 
 as 
 and then check if 
⁎
 is true or not, if true then compute 
, and store it for the communication. Similarly the member 
 also retrieves the one-time secret key 
 from the received response.

5.
The 
 sends a response to 
 as 
 as an acknowledgement i.e. it is ready to accept the next message.

6.
Now 
 creates message  and encrypts it using a one-time secret key (using AES encryption technique) as 
 and sends to the 
.

7.
 receives the encrypted message and decrypts using the same key 
, then it creates a message  and sends it to the 
 after encrypt it as 
. Similarly, the communication proceeds between two cluster members.

Algorithm 2
Download : Download high-res image (68KB)
Download : Download full-size image
Algorithm 2. Secret-key-generation.

Fig. 5
Download : Download high-res image (117KB)
Download : Download full-size image
Fig. 5. Secret-Key creation and M2M communication.

Algorithm 2 used to generate the secret key. In this algorithm, first, we generate two random numbers 
 and 
 and then check whether they are prime numbers or not. If they are prime numbers, then both numbers are subtracted by one and get multiplied to each other. After that, we generated a random number and took mod with 1000 as , then computed the secret key as 
 and it is to be shared with the members. After getting a one-time secret-key, both members communicate using symmetric key encryption.

6. Implementation and analysis
6.1. Implementation environment
In this section, we define the implementation environment of Desktop as well as Raspberry Pi 4, on which we performed our implementation.

6.1.1. Desktop PC
The implementation of the proposed scheme is done on a Windows 10 machine with the hardware configuration as Intel 64-bit Core i5 at a frequency of 4.1 GHz and 8 GB DDR4 RAM, and software configuration as Netbeans 8.2 and Java 8. We implemented this whole process as an implementation where we created one blockchain server, two cluster heads, and ten IoT devices.

6.1.2. Raspberry Pi
We have also implemented our scheme on Raspberry Pi 4 chip, considering it as the lightweight device. The hardware configuration of Raspberry Pi is Broadcom BCM2711, Quad-core Cortex-A72 1.5 GHz and 4 GB RAM, and software configuration is a Linux based Operating system called Noobs v3.3.1, Netbeans IDE 11, and java 8. Fig. 6 shows the implementation setup of Raspberry Pi 4.

Fig. 6
Download : Download high-res image (133KB)
Download : Download full-size image
Fig. 6. Showing the implementation environment on Raspberry Pi 4.

6.2. Results and comparison analysis
6.2.1. Computational cost
Computational time is the time taken by the simulator for the execution of the whole framework. The measuring unit is milliseconds and represented as 
. We illustrate the computational cost (also known as execution time) based on the operational cost for calculating AD, authentication, verification, and communication. We have used different cryptographic functions such as ⨁: bitwise XOR, 
: AES encryption 192-bit, 
: AES decryption 192-bit, 
: EC encryption, 
: EC decryption, 
: One way hash function 256-bit. The time taken by all these operators is based on the implementation environment, which we have defined in the previous section. Table 4 shows the execution time of different cryptographic functions. The value of △T can be fixed according to the system environment, and the value of R depends on the range of the cluster head (CH). The Computational time (on desktop) of our scheme expressed as follows;(3)


Table 4. Execution time for different cryptographic functions.

Types of function	On desktop	On raspberry Pi 4
0.1546 MS	1.824 MS
59.6413 MS	77.13 MS
16 MS	39 MS
80 MS	170 MS
Note: MS = Milliseconds

The scheme proposed by Hammi et al. [28] takes 1669.6 MS in the whole process, i.e., association time and data message time; the scheme proposed by Yao X. et al. [22] takes 1566.8 MS for the authentication, encryption, decryption and signature verification. Ali Dorri A. et al. [32] proposed a Consensus algorithm, based method that takes 1250MS. Regio A. Michelin et al. [35] proposed a scheme (speedy chain) that takes 863MS. Ruinian Li et al. [34] proposed a scheme that takes 1040MS. However, the SCAB-IoTA takes only 630MS collectively in all three phases. Fig. 7 summarizes the comparative computational analysis on desktop PC and on raspberry Pi 4.

Fig. 7
Download : Download high-res image (89KB)
Download : Download full-size image
Fig. 7. Comparative computational analysis in Milliseconds on Desktop PC and Raspberry Pi 4, Yao X. et al. [22], Hammi et al. [28], Dohri A. et al. [32], Ruinian Li et al. [34], Regio A. Michelin et al. [35].

6.2.2. Energy consumption
The SCAB-IoTA comprises many operations to carry out the authentication and secure communication process, and to execute these operations, the system is expected to consume some energy. The energy consumption is calculated as(4)
⁎
⁎ where EPI is the energy consumed per CPU instruction (82 W for desktop pc and 6.4 W for Raspberry Pi 4 B model), 
 is CPU computational time, and X is the CPU clock frequency (2.4 NS for desktop pc and 6.7 NS for Raspberry Pi 4 B model). We have calculated the computational cost in the previous section. Here we are calculating the energy consumption. The energy consumption is the energy consumed by the system to perform the operations of the scheme. We have calculated the energy consumption on two platforms, i.e., on desktop PC and raspberry Pi 4. The energy consumption to perform these operations is given in equation 4. Fig. 8 shows the comparative analysis for the energy consumption on the desktop pc and raspberry Pi.

Fig. 8
Download : Download high-res image (83KB)
Download : Download full-size image
Fig. 8. Comparative Energy consumption analysis in Milliseconds on Desktop PC and Raspberry Pi 4, Yao X. et al. [22], Hammi et al. [28], Dohri A. et al. [32], Ruinian Li et al. [34], Regio A. Michelin et al. [35].

6.2.3. Storage cost
Storage cost refers to the storage required for storing the values such as secret key, hash value, and other parameters at candidates and controller side in the authentication and communication phases. The measuring unit for storage cost is also bytes and represented as 
. The proposed system requires some memory to perform some operations and also for data storage. Generally, a Key 
 requires 10B (B=Bytes), EC encryption/decryption takes 32Bs, AES encryption/decryption takes 16B, a timestamp requires 10B, a hash function (SHA-256 bit) needs 32B, and a signature  and verification  requires 30B . In the proposed scheme, there are 4 hash 
, 1 AES encryption/decryption 
 and 3 EC encryption and decryption operations 
 are computed. Hence, the Storage cost is represented in the following form. (Assuming that XOR operations take very negligible time compared to other operations)(5)
 Table 5 represents the comparative storage cost of the proposed scheme with other methods. Fig. 9 shows the comparative analysis of storage costs with state-of-the-art techniques.


Table 5. Storage cost SCAB-IoTA vs Other methods.

Scheme	Storage cost as operations	
[22]	5TH(.) + 4TEC + 2Tk	308
[28]	2TH(.) + 4Tk + 4Sign + 4Veri	344
[32]	4TH(.) + 2TEC + 2Sign + 2Veri + 2Tk	332
[34]	3TH(.) + 4Sign + 4Veri + 4Tk	376
[35]	3TH(.) + 4Sign + 4Veri + 4Tk	376
SCAB-IoTA	4TH(.) + 1TAES + 3TEC + 2Tk	260
Fig. 9
Download : Download high-res image (100KB)
Download : Download full-size image
Fig. 9. Comparative Storage and Communication analysis, Yao X. et al. [22], Hammi et al. [28], Dohri A. et al. [32], Ruinian Li et al. [34], Regio A. Michelin et al. [35].

6.2.4. Communication cost
Communication cost refers to the storage required for storing the communicating variables such as hash code, cipher-text, and other parameters. The measuring unit is byte and represented as 
. The operations and the variables which have been used in communication between device and cluster head and between the device to device is a hash function, AES encryption/decryption, and EC encryption and decryption. As discussed above, the memory required for communication costs for different operations and variables represented in the following form.(6)
 The scheme compared to other existing schemes for the communication cost. Table 6 represents the comparative communication cost of the proposed scheme with other existing schemes. Fig. 9 shows the comparative analysis of communication costs with state-of-the-art techniques.


Table 6. Communication cost SCAB-IoTA vs Other methods.

Scheme	Communication cost as operations	
[22]	3TH(.) + 2TEC + 2Tk	180
[28]	3Sign + 3Veri	180
[32]	2TH(.) + 2Sign + 2Veri + 2Tk	212
[34]	3Sign + 3Veri + Tk	202
[35]	3Sign + 3Veri + 2Tk + Data	242
SCAB-IoTA	1TH(.) + 2TAES + 3TEC	160
6.2.5. Security analysis
Here, we briefly explain how the proposed scheme can withstand multiple attacks and the security level of the suggested scheme.

•
Identification theft: Identity theft is the conscious use of someone else's identity, usually as a method to gain an advantage and other benefits in the other's identity. Each member of the cluster is identified by the cluster head, which assigns its public key 
 for the future communication as 
, 
, and the device which receives response do computation as 
, 
 and get the public key of the controller i.e., only the identified member can communicate to other members as well as from CH. Along with the public key of CH, CH also generates the one-time secret-key 
 for M2M communication, which is only assigned to identified members. Hence our scheme can withstand identification attack.

•
Message integrity: It is a kind of attack when the integrity principle of security is violated, i.e., when someone can modify the content of the message in transit. The integrity of the message is retained because the interaction between members is secured with a one-time secret key i.e. encryption 
 and decryption 
 , and interaction between member and CH is secured with public-key encryption 
. The CH generates a one-time secret, so there is no secret-key compromising.

•
Non-Repudiation: When a sender of the message denied the sending of the message is called non-repudiation. It means that in a security system, a sender of the message can not deny after sending the message. In proposed scheme, the controller generates this one time secret key and sends it to only intended recipients as 
, and 
 to 
 and 
 respectively. Therefore a candidate device can not deny after sending the messages since they are encrypted using the secret key 
, which is only known by the candidate itself, and only the owner can use it.

•
Sybil attack: A Sybil attack is a new kind of threat in the cyber world, especially in IoT, where one entity (device or person) tries to take over the network by creating multiple accounts, nodes, or computers [40]. In our scheme, each member device ID is stored at blockchain server 
, 
. Hence, the device can have only one identity, and each member can have only one key at a given time. All communicating messages are secured by the secret key 
 associated with this member ID 
. Moreover, all the participating members must be authenticated by the CH. Thus, an attacker cannot use fake identities.

•
Spoofing attack: Unlike the Sybil attack, the attacker spoofs the identity of a recognized device to gain access to his/her rights. As we have already mentioned in our scheme that the CH does the authentication of participating devices and distribute the key for communication, i.e., send (κ and ξ), where 
, and 
. Hence, an attacker cannot spoof another member's identity since he needs to be authenticated by the CH.

•
Message replay attack: In this attack, the attacker sends the same message to the victim as was already used in the victim's communication. The message is not modified and correctly encrypted. Therefore its receiver treats it as a valid request and takes actions desired by the attacker. This attack is not possible because we have used the timestamp and a threshold value for the message. So, if the attacker sends duplicate messages, the receiver discards them as the condition 
 will not hold. Hence the reply attack is not possible in our scheme.

•
Blockchain Modification: Blockchain is immutable, and it is complicated to modify any content in the blockchain with the blockchain property. If an attacker wants to modify any block, it has to change every subsequent block, which is nearly impossible to do so. In addition to this, if any block is modified, then this modification is discarded by the other controllers as the blockchain is identical to all the controllers. We have also used the keypair (
) for the blockchain server so that only the blockchain server can decrypt the block, to distribute all the controllers.

•
Botnet: A botnet works under the command and control of the botmaster. It is a network of compromised machines (or bots) that run malicious software. Botnets have a broad spectrum of wicked purposes, including email spamming, DoS/DDoS attacks, password guessing, key-logging, and crypto-currency mining [41]. The proposed scheme is protected with the botnet attack because the device becomes a member of the cluster only after the proper authentication. Also, using a hybrid cryptosystem gives it more strength. Table 7 shows the security comparison of different attacks.


Table 7. Comparative security analysis.

Types of attacks	[22]	[28]	[32]	[34]	[35]	SCAB-IoTA
Identification	✓	✓	✓	✓	✓	✓
Message integrity	✓	✓	✓	✓	✓	✓
Non-Repudiation	✓	✓	✓	✓	✓	✓
Sybil attack	✓	✓	✓	✓	✓	✓
Spoofing attack	✓	✓	✓	✓	✓	✓
Message replay attack	✓	×	✓	✓	×	✓
DoS/DDoS attack	✓	✓	✓	✓	✓	✓
Blockchain Modification	✓	×	✓	✓	×	✓
Man-in-Middle attack	✓	✓	✓	✓	✓	✓
Botnet attack	✓	×	×	×	✓	✓
RF Interference/Jamming	✓	✓	✓	✓	✓	✓
Fake node injection	✓	✓	✓	✓	✓	✓
Traffic analysis attack	×	✓	✓	✓	✓	✓
RFID spoofing	×	✓	✓	✓	✓	✓
RFID unauthorized access	✓	✓	×	✓	✓	✓
Tampering	✓	✓	×	✓	×	✓
Note: ✓: Protected, ×: Not Protected.

7. Conclusion and future scope
The IoT, as a concept, is captivating and inspiring, but it faces one of the challenging aspects of having a secure and efficient ecosystem. Blockchain enables IoT devices to enhance security and bring transparency to IoT ecosystems. Blockchain offers a scalable and decentralized environment to IoT devices, platforms, and applications. Therefore, we have proposed a scheme that provides lightweight authentication and efficient communication for different IoT applications. We have analyzed our scheme in terms of some performance parameters like computation, storage, and communication cost, and energy consumption. With these stats, the proposed schemes performed better than other methods. We have also analyzed SCAB-IoTA against various security attacks and also compared with more competitive existing schemes, and it clearly shows that SCAB-IoTA performed better than those schemes.

In the future, we will implement this scheme in real-world scenarios like smart cities, industrial IoT (IIoT), smart agriculture, where multiple physical devices can communicate with each other securely in an open environment.