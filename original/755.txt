Abstract
Industrial data plays a key role in the industrial internet, and its secure collection problem has been highly valued by researchers. As Industrial Internet of Things (IIoT) devices are geographically dispersed and difficult to link, blockchain technology is usually introduced to solve the security management problem of industrial data. Unfortunately, the IIoT device is not stable, and it may leave incorrect messages in the blockchain, which will be permanently stored with potentially catastrophic consequences. As an effective solution, the redactable blockchain technology can allow people to modify the data on the blockchain. However, the existing redactable blockchain cannot guarantee industrial data security in the industrial internet due to requirements of trusted third parties, large overheads or lack of accountability mechanism. In this paper, we propose a trustworthy industrial data management scheme based on redactable blockchain in the industrial internet. To avoid additional burdens on industrial blockchain systems, a double-blockchain architecture is established to separate trapdoor management transactions. Distributed chameleon hash parameter generation and trapdoor recovery methods can avoid the security problems faced by the centralized organization. The fault-tolerant trapdoor recovery mechanism based on verifiable secret sharing technology as an alternative enhances the security of the system. The blockchain will record various information in the trapdoor management process and use it as evidence for accountability when disputes arise. The theoretical analysis and experiments show that the approach can effectively deal with malicious behaviors and has acceptable overhead.

Previous
Next 
Keywords
Industrial data management

Redactable blockchain

Trapdoor management

Accountability

Security

1. Introduction
Over the past few years, the Internet of Things (IoT) has overwhelmingly changed the manners people connect with things in the surroundings [33]. Nevertheless, it can also be applied to industrial areas, including machines, control systems, information systems and so on, which is the so-called Industrial IoT (IIoT) [8], [21]. IIoT aims to bring a revolution to the traditional manufacturing and take us into an intelligent era where machines are highly connected. In order to achieve this goal, industrial data should be gathered and then used to enhance the production performance and management efficiency. However, due to the geographical distribution and inconsistency of standard, it is not easy for IIoT devices to be connected [15]. Meanwhile, the security problem of the large amount of data generated by the device has also caused people’s concerns.

The security of the industrial data involves the entire link of the manufacturing process of collecting, transmitting, storing and analyzing data. In the industrial internet, once the data security issues happen, machines and equipment may be attacked, and the production process will be stopped [20], [22]. For example, in 2015, a malicious attack on the Ukrainian power system caused a large-scale blackout [32]. In 2017, the Wanna Cry virus attacked many industrial companies around the world [26]. Therefore, how to ensure industrial data security and credibility in a complex and changeable industrial environment will be a huge challenge.

Fortunately, the emergence of blockchain and smart contract technology makes it possible to solve the above problems [34], [35]. Based on distributed data storage and chain structure, blockchain technology has the characteristics of decentralization, tamper-resistance, and reliability, are introduced to solve the above problems in recent researches [37], [39]. Compared to traditional schemes, blockchain helps manage distributed devices and gather data in a low-cost way [14], [29]. However, owing to the exponential growth of the equipment performance, some security problems begin to show in the blockchain. Powerful attacks, such as the 51% attack, will lead to the wrong data being recorded on the blockchain and then result in catastrophic consequences [3]. Attacks on a single IIoT device may also cause it to leave the incorrect information on the blockchain. Under this circumstance, Ateniese et al. [4] proposed the redactable blockchain, which is capable of editing the previously produced blocks. By adopting the chameleon hash function, a redactable blockchain can easily delete the malicious or wrong contents, which ensures the security of industrial data and the normal operating of the machines.

By now, many redactable blockchain technologies have already been proposed [13]. Most of them are based on the chameleon hash function, and can be divided into centralized approaches and distributed approaches according to their trapdoor management methods. The centralized redactable blockchain approaches use a trusted central organization to hold trapdoors and modify block content [17], [28]. Although this type of scheme has great advantages in terms of performance and effectiveness, there may not be a trusted third party in the decentralized industrial internet, and it is susceptible to some security problems such as single-point failures and performance bottlenecks. Therefore, these approaches are difficult to protect industrial data security in industrial internet. Meanwhile, distributed schemes that do not rely on a central organization usually divide a trapdoor into multiple parts and is held by multiple privileged nodes, thus avoiding attacks caused by the trusted third party [14], [19]. However, during the trapdoor recovery process, if the attacked trapdoor holder maliciously provides the incorrect trapdoor fragments or fails to respond in time, these schemes will consume a lot of computing resources to restore the complete trapdoor, and it is difficult to trace and arbitrate the malicious trapdoor holder.

Motivated by the above challenges faced by blockchain systems in the industrial internet, this paper proposes a trustworthy industrial data management scheme based on redact-able blockchain. The scheme introduces the blockchain to realize the distributed chameleon hash parameter generation and trapdoor recovery process. With the help of the block-chain, trapdoor holders can gradually generate the public key of the chameleon hash using their trapdoor fragments. The blockchain will record this process and serve as evidence of accountability. When a block needs to be edited, the trapdoor holder will gradually disclose its trapdoor on the blockchain, and the smart contract will verify the correctness of the trapdoor fragment. In order to prevent malicious trapdoor holders from hindering trapdoor recovery, we also design a fault-tolerant trapdoor recovery mechanism based on verifiable secret sharing technology as an alternative method. By adding backups of trapdoor fragments, our approach can restore the complete trapdoor without collecting all the trapdoor fragments. In addition, we separate the trapdoor management from the daily affairs of the blockchain, and all trapdoor management transactions will occur on another supervision blockchain, thereby minimizing the burden of the IIoT devices in the original blockchain system. Summarily, the main contributions of our approach are summarized as follows.

•
We provide a trustworthy industrial data management scheme for blockchain-based industrial systems. By introducing the redactable blockchain and improving the public key generation algorithm of the chameleon hash function, our scheme enables industrial data to be effectively maintained and avoids the security risks associated with traditional centralized management.

•
We design a dual-blockchain architecture to separate data management from other transactions in blockchain-based industrial systems. The proposed industrial data management process will be executed on the supervising blockchain without the need for industrial devices to participate in the whole process.

•
We propose a blockchain-based trapdoor recovery accountability mechanism. The blockchain is used to record various data during the setup process of the redactable blockchain, which helps us use the smart contract to verify the correctness of the trapdoor fragment published by the trapdoor holder, thereby making it reliable to achieve accountability.

•
Theoretical analysis and experiments show that the approach can effectively manage data in blockchain-based industrial systems, and deal with various malicious behaviors. The cost of the scheme is acceptable.

The rest of this article is organized as follows. Section 2 introduces some related work. Section 3 gives the background knowledge required for the project. We define the system model and threat model of the approach in Section 4 and Section 5. Section 6 introduces the scheme in detail. Section 7 and Section 8 respectively analyze the security and evaluate the performance of the scheme. The last section summarizes our approach.

2. Related work
Some recent literature points out that the current centralized industrial data management applications have flaws in security and efficiency [1]. Driven by this problem, in industrial fields, such as manufacturing, energy and supply chain, many blockchain-based industrial data management approaches have been proposed. Liu et al. [24] proposed the concept of industrial blockchain, using blockchain as middleware to decentrally manage the life cycle of industrial products. [31] used blockchain technology to promote machine to machine (M2M) interaction in the context of the chemical industry. [7] gave the concept of a traceable supply chain based on the blockchain. Benefit from the decentralization, traceability, and anti-tampering functions of the blockchain, there are already many approaches that use the blockchain to ensure the security of industrial data in the process of collection, storage and sharing. However, these studies did not consider the impact of malicious information on industrial blockchain systems. It is also necessary to manage the data on the blockchain in time.

Undoubtedly, redactable blockchain technology is extremely important for blockchain management. At present, there has been a lot of researches aimed at realizing the modification of blockchain in different scenarios. Nakamoto discussed the issue of redactable blockchain when he proposed the Bitcoin blockchain in 2008 [27]. Subsequently, the first redactable blockchain scheme based on the chameleon hash function was proposed in 2016 [4]. The chameleon hash function is a special one-way trapdoor function. The trapdoor holder can easily find hash conflicts using the trapdoor. This scheme uses the chameleon hash function to generate the hash value of the block, and uses a trapdoor to find out the hash conflict of the original block, So as to avoid changing the hash value of the block while modifying the block content. Most of the existing data management schemes of blockchain-based systems use a centralized architecture and modify the data on the blockchain through a trusted entity. Palm et al. [28] designed an editing decision-making mechanism for the content of the block, so that the nodes in the blockchain can continuously detect the content on the blockchain and mark whether it is redundant information or important information, so as to decide whether to edit or not through a consensus mechanism. However, the detection process of this scheme will bring greater overhead. Alfaidi et al. [2] gave a redactable medical blockchain based on the chameleon hash function to realize the sharing of medical data and error information modification. Xu et al. [36] provided an identity management scheme based on the redactable blockchain, which implements a lightweight user authentication using blockchain and enables users to log out their identity information after exiting the network. In terms of the industrial internet environment, Huang et al. [15] proposed an improved chameleon hash algorithm and a public key signature algorithm to allow authorized IIoT devices to edit the blockchain. In addition, there are also some distributed data management schemes. Li et al. [19] proposed a distributed redactable blockchain solution, which distributes trapdoors to multiple trapdoor holders and generates editing decisions through voting. But if a trapdoor holder is attacked, the security and efficiency of the scheme will be greatly affected. Deuber et al. [9] proposed a dual-blockchain architecture in the public blockchain environment. This solution keeps a blockchain executing normally, while the other blockchain records the editing information of the previous blockchain, so as to realize the data management without touching the existing blockchain. The similar redactable blockchain approaches were also proposed in [18], [25].

However, most of the above schemes use a trusted central organization to manage trapdoors and change blocks. Such a central organization may not exist in the industrial environment and faces the risk of being attacked. In addition, some schemes that use distributed trapdoor management methods require more resources during the trapdoor recovery process, which brings a greater burden to industrial devices, and it also need to be more secure. Therefore, it is necessary to study a secure and accountable industrial data management scheme based on the redactable blockchain.

3. Preliminaries
In this section, we introduce some necessary background knowledge of our approach.

3.1. Blockchain and smart contract
Blockchain is a technology that enables multiple participants who do not trust each other to agree on some data. It was first used in the Bitcoin project as a distributed digital ledger [27]. As a distributed P2P data storage system, blockchain has features such as decentralization, traceability, anti-tampering, etc., and is now widely used in the Internet of Things, healthcare and other fields [5], [12], [23], [38].

A typical blockchain structure is shown in Fig. 1. The blockchain is composed of multiple blocks, and each block contains a block header and a block body. Data is recorded in the block body in the form of transactions. And the block header records the hash value of the previous block (except the first block), the hash value of all transactions in this block, the timestamp, etc. Among them, the hash value of the previous block can be regarded as a pointer to the previous block. In this way, all the blocks are linked together by the hash value. Changing any data in a block will make the hash value of the entire block change, thus affecting subsequent blocks. At the same time, each node in the blockchain network will store a copy of the blockchain data locally, and the consensus mechanism will ensure the consistency of the data stored by each node. These designs ensure that the blockchain is difficult to tamper with.


Download : Download high-res image (145KB)
Download : Download full-size image
Fig. 1. The blockchain structure.

Smart contracts, program codes that run on the blockchain, greatly expand the capabilities of the blockchain. Ethereum was the first project to use smart contracts in the blockchain in 2013 [11]. The blockchain nodes in Ethereum deploy the Ethereum Virtual Machine (EVN) locally. The instruction set of the EVM is Turing complete, and the EVM is designed to run the same code exactly as expected. Once the smart contract is broadcast into the blockchain, all nodes will run the program in the EVM and agree on the outcome of the program through a consensus mechanism. Therefore, users are able to build smart contracts to implement functionally complex decentralized applications on the blockchain.

3.2. Chameleon hash function
A chameleon hash function is a hash function with trapdoors. It is collision-resistant for outsiders, but if a trapdoor is known, it is easy to find collisions. This means that trapdoor holders can find an 
 that satisfies Hash () = Hash (
), while it is almost impossible for anyone else without a trapdoor to find a collision. The earliest chameleon hash scheme was proposed by Krawczyk and Rabin [16]. The basic structure of the chameleon hash is as follows.

(1)
Setup. Input the security parameter , output two large prime numbers  and  that satisfy , and output a generator  of a  order multiplicative group 
.

(2)
KeyGen. According to the system parameters  and the randomly selected private key 
, output the public key 
.

(3)
Hash. For the random number  and public key , the chameleon hash value of message  can be calculated as 
.

(4)
Forge. Input the new message 
, the random number , the private key  and the origin message , we can generate 
 satisfying 
.

The correctness of the chameleon hash function can be proved as follows: (1)

The collision resistance of the chameleon hash function is based on the discrete logarithm problem. If the security parameter is large enough and the attacker does not know the trapdoor, there is no known polynomial time algorithm that can obtain the collision of the hash function [10].

3.3. Verifiable secret sharing
The verifiable secret sharing scheme was first proposed by Shamir [30]. This scheme divides the secret into  parts, even if some of them are damaged, the system can recover the original key by collecting  secret fragments. It consists of the following steps.

(1)
Setup. Randomly select two large prime numbers  and  satisfying . Let  be the -order element,  be the number of secret holders and  be the threshold value.

(2)
SecretGen. The secret distributor secretly chooses coefficients 
 to construct the following equation, where 
 is the secret to be kept. (2)
For each secret holder, the secret distributor choose 
 and calculate 
. The secret fragment 
 will be sent to  holders.

(3)
Reconstruct. If the secret holders decide to restore the secret, each holder will publish their secret fragments it keeps to other holders. After collecting at least  correct secret fragments, holders can obtain all coefficients of  through the Lagrange interpolation polynomial, and 
 is the recovered secret.

Mathematical challenges based on discrete logarithms and Lagrange interpolated polynomials can be used as a guarantee of computational safety. Finding p and q for sufficiently large prime numbers can be a guarantee of increased computational difficulty. In terms of Lagrange interpolation polynomial safety, Even a t-1 person with unlimited computational power cannot crack the polynomial, which is relatively safe for the available computational power [6].

4. System model
In order to realize secure industrial data management in the industrial internet based on blockchain, we design a secure and distributed management method for redactable blockchain. There are four main kinds of entities in the system: system manager, key generation center, trapdoor holder and executor. Their definitions are as follows.

•
System Manager is an entity used to deploy blockchain and generate system parameters. After completing the initialization task, he will be offline and no longer participate in subsequent blockchain operations.

•
Key Generation Center (KGC) is a trusted third party used to generate trapdoors. It is only called when a trapdoor needs to be generated, and will send trapdoor fragments to the trapdoor holder as required.

•
Trapdoor Holders are some entities with good reputation and capability. They join the redactable blockchain and the supervision blockchain, and are responsible for storing trapdoor fragments. He can be served by edge devices in industrial environments.

•
Executor is a special trapdoor holder who is responsible to reconstruct the blockchain after recovering the complete trapdoor.

Our trustworthy industrial data management scheme consists of seven algorithms, their definitions are as follows.

(1) Setup. Based on the security parameter , the algorithm generate some necessary system parameters and initializes the redactable blockchain and supervision blockchain.

(2) TrapdoorGen. In this algorithm, KGC sets up a complete trapdoor. KGC also fragments the trapdoor and calculates the backup of the trapdoor fragments.

(3) PKGen. This algorithm enables a trapdoor holder to generate a public key fragment of the chameleon hash.

(4) CHash. According to the random number, public key and system parameters, the algorithm calculates the chameleon hash of a message.

(5) VerRestore. The trapdoor holders call this algorithm in turn to restore the complete trapdoor. The algorithm outputs 0 for failure and 1 for success.

(6) AltRestore. As an alternative, this algorithm enables trapdoor holders to restore a complete trapdoor based on partial trapdoor fragments if the previous algorithm fails.

(7) Forge. The algorithm gets as input the old message, the old random number, the chameleon hash value, the trapdoor information and the new message, outputs a new random number to make the chameleon hash value of the new message unchanged.

In the life cycle of the system, Setup only needs to be executed once at the beginning. Subsequently, the system checks whether the data on the blockchain needs to be modified after a period of time. In a modification cycle, TrapdoorGen and PKGen will be executed once, and the two trapdoor restore algorithms will be executed at most once, CHash and Forge may be executed multiple times.

5. Threat model
In this section, we define the threat model of our approach. Our research mainly focuses on managing data in industrial systems based on blockchain, especially the modification of data on the blockchain. Therefore, events such as trapdoor holder selection are out of our scope. We assume that there are some pre-selected trapdoor holders, which can be authorized nodes in the consortium blockchain or nodes with a good reputation. Similarly, the cross-blockchain technology required in the approach is also reliable, and some existing mature cross-blockchain schemes can be adopted.

On this basis, we assume that trapdoor holders may be attacked. They may lose trapdoor fragments or send wrong trapdoor fragments, thereby preventing the management of industrial data on the blockchain. Meanwhile, we assume that a reasonable number of trapdoor holders are set up in the system, and the attacker cannot attack most trapdoor holders at the same time.

In addition, we assume that most nodes in the blockchain are honest, and the consensus mechanism of the blockchain is secure. These mean that the blockchain is reliable in the scheme, it can effectively save the data, and the smart contract can also get the correct operation result. Blockchain technology can protect our system from DDoS attacks. Attacks on blockchain infrastructure are no longer within our consideration. We also assume that the blockchain system will not be attacked before the formal operation, that is, in the initialization and setup phases, each entity can honestly generate parameters according to our approach.


Download : Download high-res image (543KB)
Download : Download full-size image
Fig. 2. The overview of the trustworthy industrial data management scheme.


Table 1. Notations.

Notation	Description
Large prime
Large prime
Generator
Number of trapdoor holders
Serial number of trapdoor holders
Trapdoor fragment
Backup of the trapdoor fragment
TH
Trapdoor holder
Complete trapdoor
Number of trapdoor fragments
Coefficient of , 
Public key
Public key fragment
Original block message
Original random number
New block message
New random number
6. Approach
In this section, we detail the proposed trustworthy industrial data management scheme and provide basic notations which are necessary to understand our approach in Table 1 (see Fig. 2).

6.1. Overview
This article proposes a trustworthy industrial data management scheme to manage data in blockchain-based industrial systems. The framework of the proposed scheme is shown in Fig. 3. The industrial system is deployed on a redactable blockchain, and a supervision blockchain is introduced to credibly supervise the management operations on the redactable blockchain. By separating data storage from data management, this dual-chain architecture can effectively reduce system coupling.

Our scheme is mainly composed of three phases: off-chain setup, on-chain setup, and industrial data management phase. In the off-chain setup phase, the system manager deploys the blockchain system and set the system parameters. Meanwhile, KGC generates and distributes trapdoor fragments and backups to each trapdoor holder. Then, trapdoor holders use their own trapdoor fragments to jointly generate the public key of the chameleon hash through the supervision blockchain. After setting up, industrial devices began to use the redactable blockchain to realize various functions. The system regularly checks the correctness of the data on the blockchain, and the scheme enters the data management phase when the system detects incorrect data. Nodes on the supervision blockchain will first make joint editing decisions. Subsequently, trapdoor holders successively publish the trapdoor fragments on the blockchain and the smart contract will verify their correctness. If the trapdoor holder is attacked and the trapdoor fails to be restored correctly, the remaining trapdoor holders will publish their backups on the supervision blockchain and restore the complete trapdoor. Finally, the executor uses the trapdoor to modify the block information as requested.

6.2. Off-chain setup phase
In this phase, the system manager calls Setup algorithm to generate some necessary system parameters. Then, KGC calls TrapdoorGen algorithm to generate a trapdoor of the chameleon hash function, and sends the trapdoor fragments to the preselected trapdoor holders. The two algorithms are constructed as follows.

Setup. Given a security parameter, the system manager generates some system parameters and deploys the redactable blockchain and the supervision blockchain.

•
With the security parameter , the algorithm generates system parameters , in which  and  are two large prime numbers satisfying , and  is an element of order  in 
.

•
The system manager deploys the supervision and the redactable blockchain. System parameters  and  are recorded on the smart contracts of these two block-chain. Then, trapdoor holders and other nodes are added to the supervision blockchain for on-chain setup.

After the Setup algorithm is executed, the system manager will be off-line and no longer participate in the subsequent setups of the scheme.

•
For  preselected trapdoor holders {TH
, TH
, …, TH
}, KGC secretly chooses  random numbers {
, 
, …, 
} as trapdoor fragments, in which 
 and . Then it computes 
 as the complete trapdoor of the chameleon hash function.

•
According to the security parameter , KGC secretly generates a polynomial of degree  as follows: (3)
in which 
 ( [0, -1]) is the coefficient of the polynomial, and 
.

•
For each trapdoor fragment 
, KGC calculates 
 and sends 
 to the TH
 through an off-chain secure channel, in which 
 is the backup of 
.

In this algorithm, trapdoor fragments are distributed in a manner similar to verifiable secret sharing, and  honest trapdoor holders can reconstruct the complete trapdoor through their 
. Finally, KGC goes off-line until a new trapdoor needs to be generated.

6.3. On-chain setup phase
To achieve verifiability in the subsequent trapdoor restore process, it is also necessary for the trapdoor holders to jointly generate the public key of the chameleon hash function through the blockchain. The public key generation algorithm PKGen can be defined as follows.

PKGen. Based on the trapdoor fragments saved by each trapdoor holder, the algorithm generates the public key of the chameleon hash function.

•
The first trapdoor holder TH
 calculates the following equation: (4)
in which 
 is the first public key fragment and 
 is TH
’s trapdoor fragment. Then TH
 publishes 
 on the supervision blockchain.

•
After receiving 
 from supervision blockchain, TH
 calculates second public key fragment 
 based on the 
 it has saved as follows. (5)
Then TH
 also publishes the calculation result on the supervision blockchain.

•
Similar to the previous steps, subsequent trapdoor holders calculate new public key fragments and publish them on the supervision blockchain until all trapdoor holders have completed the calculation. Specifically, a trapdoor holder TH
 calculates 
 as follows. (6)

Finally, the complete public key 
.  will be sent to the redactable blockchain as public parameters through a secure cross-blockchain channel. The chameleon hash function will replace the traditional hash function in the redactable blockchain. In other words, in the redactable blockchain, the hash value stored in the block header is the chameleon hash value.

6.4. Data management phase
After all settings are completed, industrial users can use the redactable blockchain to store industrial data. The operations in this phase mainly include recording data and modifying data on the redactable blockchain.

6.4.1. Storing data
Similar to other blockchain systems, when users use the blockchain to store industrial data, these data will be stored in blocks. But the difference is that our scheme uses the chameleon hash function instead of the traditional hash function. blockchain nodes can use the CHash algorithm to calculate the hash value of the block to generate and verify a new block. The CHash algorithm is defined as follows.

CHash. Given a message , the public key  and system parameters  and , the blockchain node chooses a random number 
 and calculates the chameleon hash of the message as: (7)

In order to save data on the blockchain, blockchain nodes will broadcast their data in the form of transactions. Then the miners select some transactions from the transaction pool, pack them into a block and broadcast. The chameleon hash value and the random number of these transactions will be stored in the block header. After receiving a new block, the blockchain node will use the chameleon hash function to verify the correctness of the block. Finally, after the consensus of most nodes, the data is stored on the blockchain.

6.4.2. Editing data
In our scheme, the data on the redactable blockchain will also be checked regularly. After detecting the wrong data, trapdoor holders can use the VerRestore or AltRestore algorithms to restore the trapdoor, and let the executor use the Forge algorithm to modify the data. The execution process of these algorithms is explained as follows.

VerRestore. Based on the trapdoor fragments saved by each trapdoor holder, the algorithm generates the complete trapdoor of the chameleon hash function.

•
The first trapdoor holder TH
 publishes its 
 and 
 on the supervision blockchain. Considering that the trapdoor holder may have disclosed wrong information, we label the trapdoor fragments it discloses as 
 and 
.

•
After receiving 
 and 
 from blockchain, other trapdoor holders compute the following equation: (8)
Then they verify whether 
 is established to determine the correctness of 
, in which 
 has been stored in the blockchain in the on-chain setup phase. If the verification is passed, the scheme will continue. Otherwise, the node who finds the error will report it to the smart contract, and the smart contract will check the error in the subsequent steps.

•
After TH
 discloses 
, subsequent trapdoor holders will disclose their key fragments in turn. Specifically, if the previous trapdoor holder TH
 publishes the correct trapdoor, then the next trapdoor holder TH
 calculates 
, where 
 is the trapdoor fragment it saved, and 
 is the calculation result of the previous trapdoor holder. TH
 publishes 
 and 
 on the supervision blockchain.

•
Similarly, after receiving 
 and 
 from TH
, other nodes will check the correctness of the published information by the following equation: (9)
And the nodes will trigger the smart contract for verification when 
.

•
After receiving a report that the trapdoor fragment issued by TH
 is wrong, other trapdoor holders will calculate Eq. (9) and determine whether 
 is equal to 
. Each trapdoor holder’s verification result will also be published on the blockchain, and the smart contract will recognize the result of the majority as the final result. If it is correct, the supervising blockchain will record the reported node as a false accusation. Otherwise, the smart contract will mark the TH
 as malicious and terminate the algorithm.

If the scheme executed without a problem, the algorithm outputs a complete trapdoor . Otherwise, the remaining honest trapdoor holders will execute the alternative AltRestore algorithm to restore the trapdoor.

AltRestore. According to  backups of trapdoor fragments, the algorithm generates the complete trapdoor of the chameleon hash function.

•
First, if there are some honest trapdoor holders who have published their trapdoor fragments and backups, the remaining trapdoor holders who have not yet published will publish their saved trapdoor backups on the blockchain in turn.

•
Each trapdoor holder chooses  backups of the trapdoor fragments. These backups can be regarded as the  secrets in the verifiable secret sharing protocol, and the trapdoor holder can use the following equation to calculate the possible trapdoor. (10) 
 
  The trapdoor calculated by each trapdoor holder will be published on the blockchain.

•
The smart contract counts the possible trapdoors published by each trapdoor holder, and the final consensus result of the majority is the correct trapdoor.

After recovering the complete trapdoor, the executor will trigger the Forge algorithm to modify the error message.

Forge. Given a trapdoor , a block information to be modified, the algorithm generates a new block to replace the original block.

•
For an error block message , the executor needs to modify it to 
 as required and keep the hash value of the block unchanged. For this, he needs to find a specific random number 
 that satisfy CHash() = CHash(
). 
 can be obtained as follows. (11)

•
The executor will broadcast 
 and 
 on the redactable blockchain to other trapdoor holders. These trapdoor holders will verify whether 
 meets the request and whether the new hash value is consistent. If the verification is passed, the above content will be further broadcast to other nodes in the redactable blockchain. The node will change the locally saved  to 
 and finish the blockchain editing work.

7. Security analysis
Based on the discrete logarithm (DL) problem, we first prove that nodes in the blockchain cannot obtain the trapdoor fragments of others, and then prove that no node can obtain the complete trapdoor fragment, thus ensuring the security of our scheme. Finally, we also analyze that our scheme can handle all kinds of malicious behaviors correctly.

Assumption 1 Discrete Logarithm Problem

Given 
 where  is a cyclic multiplicative group of prime order , 
 and  is a generator of , there is no probabilistic polynomial time algorithm that can compute  with non-negligible probability.

According to Assumption 1, we deduce the following theorems:

Theorem 1

If Assumption 1 holds, for an adversary who knows  and 
, there is no polynomial time algorithm (PPT) for finding a trapdoor fragment 
.

Proof of Theorem 1
According to the method of generating public key fragments, all public key fragments are generators of 
. Therefore, solving 
 based on 
, 
 and  is a DL problem, and the adversary cannot obtain trapdoor fragments based on the above information alone. Then we consider the impact of the remaining elements on solving the above DL problem. The public key fragment before 
 has nothing to do with 
, so it cannot help solve the above DL problem. Meanwhile, the public key fragments after  are all exponential operations based on 
, which is also not helpful for solving the above DL problem. Therefore, there is no PPT adversary can find 
 in a limited time.  □

On this basis, we demonstrate that the introduction of block chain does not expose the trapdoor. We have proved in Theorem 1 that the adversary cannot obtain the trapdoor fragment 
, so he cannot calculate the complete trapdoor by obtaining trapdoor fragments. As for the scenario where the adversary directly obtains the trapdoor, that is, the adversary tries to obtain the complete trapdoor through the 
, 
,  published on the blockchain, this is also a DL problem. Therefore, no adversary can obtain a complete trapdoor through the information on the blockchain.

Theorem 2

Our approach can detect the false trapdoor fragment published by the malicious trapdoor holder.

Proof of Theorem 2
According to our approach, the trapdoor holder 
 will publish the trapdoor fragment 
 on the blockchain, and the smart contract will verify the correctness of 
 by calculating 
 where 
 and 
 are saved on the blockchain in the previous step. Therefore, the malicious trapdoor holder can only cheat in this process by forging a fake 
 that satisfy 
. When we set a large enough , this constitutes a discrete logarithm problem. According to Assumption 1, there is no algorithm that can find 
 that meets the conditions in a limited time, so the smart contract can find the false trapdoor fragment.  □

On this basis, we further analyze how our approach deals with various malicious behaviors. According to the threat model, a trapdoor holder may perform malicious actions due to being attacked or for his own benefit. These malicious behaviors include:

(1)
A malicious TH
 provides wrong 
 in the step 2 of the editing phase.

(2)
A malicious TH
 does not provide 
 in time in the step 2 of the editing phase.

(3)
A malicious TH
 makes wrong voting in the step 3 of the editing phase.

Since the entities in the system do not perform meaningless abnormal behaviors, we do not consider the situation where the holder announces the correct trapdoor fragments and the wrong backup at the same time.

We believe that the blockchain technology is credible, so our solution can use smart contracts to correctly verify the trapdoor fragments uploaded by each trapdoor holder and detect the malicious behavior of them in time. In addition, we also set up a fault-tolerant trapdoor recovery method to deal with the unexpected scenario caused by the case (1). Therefore, the behavior in the case (1) will be discovered in time and cannot hinder the recovery of the trapdoor. Similarly, we require trapdoor holders to complete the specified operation in the step 2 of the editing phase within a certain period of time. When the case (2) occurs, the approach will mark the trapdoor holder as a malicious entity and execute the fault-tolerant trapdoor recovery method to prevent accidental losses. Finally, when the case (3) occurs, since we assume that most trapdoor holders in the system are honest, the wrong vote of a few malicious trapdoor holders will not affect the final voting result, and the scheme will eventually restore the correct trapdoor and execute the correct editing.

In our scheme, the executor, as the central entity responsible for executing editing operations, is a vulnerable point in the system. To this end, we set up a distributed consensus method to supervise its behavior, and the trapdoor holders in the redactable blockchain will verify their modifications. In the Data management phase, if the executor fails to modify the block information according to the request, the rest of the trapdoor holders in the redactable blockchain will reject this modification and replace the executor, thus preventing the centralized executor from making mistakes.

8. Evaluation
In this section, we provide the configuration of the experiment environment, then test and analyze the performance of our scheme in terms of on-chain and off-chain overhead.

8.1. Experiment environment
To evaluate the performance and effectiveness of our approach, we simulated the proposed trapdoor management mechanism on the computer. The configuration of the device is a 2.2 GHz 4 core CPU and 16 GB RAM. We used Matlab to simulate the off-chain calculation process, and built a consortium blockchain as the supervision blockchain based on the PoA consensus mechanism using the Ethereum Geth client. The security parameter of the scheme is set to 512 bits. The number of trapdoor holders is set by referring to the number of authority nodes in the consortium blockchain. We simulated the execution process of the scheme in different scenarios, and tested the time consumption of off-chain operations and the gas consumption of on-chain operations.

8.2. Off-chain part cost
We first tested the total time cost of generating public keys under different conditions, and the results are shown in Fig. 3(a). We can see that as the number of trapdoor holders increases, the time it takes for the distributed public key generation process to gradually increase, but the average computational overhead required by each trapdoor holder is stable and acceptable.

In order to estimate the performance of our trapdoor recovery mechanism, we then tested the overhead of performing VerRestore and AltRestore algorithms in the data management phase. As shown in Fig. 3(b), the more trapdoor fragments needed, the more complicated the calculation polynomial needed to recover the trapdoor, and the more time overhead. According to our security assumptions, since most trapdoor holders are honest, the number of trapdoor fragments required to restore the trapdoor should not exceed half of the total number of trapdoor holders. Therefore, for a trapdoor holder, the cost of performing a verifiable trapdoor restore process in the supervision blockchain is greater than the cost of performing a fault-tolerant trapdoor restore process. However, verifiable trapdoor restore is still necessary, because if the wrong trapdoor holder cannot be found, the malicious behavior of the trapdoor holder will have no cost.

We also tested the computational cost of a honest trapdoor holder in order to recover the complete trapdoor in the presence of  malicious trapdoor holders. As shown in Fig. 3(c), when the number of malicious trapdoor holders is fixed, the greater the number of trapdoor holders, the greater the computational time cost, but the higher the security of the system. At the same time, when the number of trapdoor holders is fixed, the larger the number of malicious trapdoor holders, the smaller the additional calculation overhead. This is because when the number of malicious trapdoor holders is large, the verifiable trapdoor recovery mechanism can detect errors earlier and perform the fault-tolerant trapdoor recovery process in time, which avoids subsequent meaningless calculations. In short, the off-chain computing overhead of the scheme is reasonable and acceptable.

Finally, we tested the total time cost of executing a fault-tolerant trapdoor recovery method in a scenario where there are different numbers of malicious trapdoor holders when  and . As shown in Fig. 3(d), when we only set a malicious trapdoor holder, the holder will be found and excluded in step 2 of the editing phase. At this time, there are 10 honest trapdoor holders left in the scheme, so the scheme only needs to perform a calculation to recover the complete trapdoor, and its time cost is about 45 ms. While when the number of malicious trapdoor holders increases, the verifiable trapdoor recovery process cannot exclude all malicious trapdoor holders. Therefore, honest trapdoor holders may need to perform fault-tolerant trapdoor recovery processes multiple times to get the correct trapdoor, the corresponding time overhead suddenly increases.

8.3. On-chain part cost
According to our approach, the operations on the redact-able blockchain are mainly for nodes to receive broadcasts and modify local block information. The operations involved in the supervision blockchain include saving public key fragments, making modified decisions, restoring trapdoors, etc. Therefore, the main operating overhead of our approach is on the supervision blockchain, and the operating overhead in the redactable blockchain is small and can be omitted. In order to reasonably test the cost of operations on the blockchain, we implemented our supervision blockchain using Ethereum, and tested the amount of gas consumed to execute different operations in the approach. In Ethereum, performing calculation tasks or storing data on the blockchain requires a certain amount of gas. For example, storing a non-zero number on a blockchain costs 20,000 units of gas. Specific gas consumption rules can refer to [11]. The gas consumption can comprehensively reflect the computational and storage burdens to nodes by the introduction of blockchain.

The gas consumption of the main on-chain operations in the scheme is shown in Fig. 3(e). Most on-chain operations only need to save data on the blockchain and perform simple calculations, and the amount of gas consumed is low. According to the current price of Ether and gas, the operation (e) that requires the most gas will consume about 0.006 ETH (4.398 USD), and other operations require less overhead. Under the condition that the price of Ether is very high, these are relatively cheap operations.

In conclusion, our approach has good performance in the off-chain aspect, and does not bring too much computing and storage overhead to the blockchain system, and can achieve secure redactable blockchain trapdoor management in the industrial internet.

9. Conclusion
In this article, we provide trustworthy industrial data management scheme based on redactable blockchain in the IIoT environment. The proposed approach is based on the block-chain technology, which avoids dependence on trusted third parties. We design a dual-blockchain architecture to reduce the burden of trapdoor management operations on IIoT devices. We use the supervisory blockchain as an evidence recorder to keep records of operations performed by various entities during the trapdoor management process. Trapdoor holders will use an improved public key generation algorithm to compute the public key of the chameleon hash on the supervision blockchain, and jointly restore the complete trapdoor in the editing phase. The smart contract will verify that the trapdoor fragment published by the trapdoor holder based on the previously saved evidence, thereby achieve reliable accountability. In addition, a fault-tolerant trapdoor recovery mechanism based on verifiable secret sharing technology will be used as a guarantee measure to restore a complete trapdoor when all trapdoor fragments cannot be collected. The Security analysis and experiments have proved the effectiveness of our scheme.

In the future, we will further combine the reputation mechanism and consensus mechanism to study the trapdoor holder management mechanism of the redactable blockchain, so as to build a complete redactable blockchain model together with the proposed approach. In addition, we also plan to deploy our scheme on the HyperLedger Fabric blockchain platform to make it more feasible.