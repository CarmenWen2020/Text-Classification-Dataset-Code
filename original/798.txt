Recent incidents have shown that Industrial Control Systems (ICS)
are becoming increasingly susceptible to sophisticated and targeted attacks initiated by adversaries with high motivation, domain
knowledge, and resources. Although traditional security mechanisms can be implemented at the IT-infrastructure level of such
cyber-physical systems, the community has acknowledged that it
is imperative to also monitor the process-level activity, as attacks
on ICS may very well influence the physical process. In this paper,
we present pasad, a novel stealthy-attack detection mechanism
that monitors time series of sensor measurements in real time for
structural changes in the process behavior. We demonstrate the
effectiveness of our approach through simulations and experiments
on data from real systems. Experimental results show that pasad is
capable of detecting not only significant deviations in the process
behavior, but also subtle attack-indicating changes, significantly
raising the bar for strategic adversaries who may attempt to maintain their malicious manipulation within the noise level.
CCS CONCEPTS
• Security and privacy → Intrusion detection systems;
KEYWORDS
Intrusion Detection; Industrial Control Systems; Singular Spectrum
Analysis; Stealthy Attacks; Cyber-Physical Systems; Isometry Trick;
Partial Isometry; Departure Detection
1 INTRODUCTION
Industrial Control Systems (ICS) are often found in critical infrastructures, such as transportation, aerospace, electricity grids, nuclear plants, and gas distribution systems to name a few. Unlike
traditional IT systems, which mainly manage data, ICS control
physical processes. The need to secure these critical cyber-physical
systems cannot be overemphasized as the impact of cyber attacks
is no longer bounded by financial losses due to some service disruption or loss of data. Cyber attacks on control systems can cause
irreparable physical damage to equipment in safety-critical facilities, raw sewage to spill out into local parks and rivers, large-scale
power blackouts, and severe damage to a nation’s critical assets on
which normal societal functioning depends. In recent years, several incidents have been reported indicating that ICS are becoming
increasingly exposed to targeted attacks, allegedly initiated by adversaries with enough skills and resources to circumvent security
measures at the IT-infrastructure level and trigger unwanted behaviors in the underlying physical process. Stuxnet [10, 14], the German
steel-mill attack [33], the Maroochy water breach [2], Triton [25],
and the growing number of attacks on energy networks [34, 53] are
just a few cases in point. This issue is even being addressed in highlevel forums such as in the 2018 World Economic Forum meeting in
Davos, where concerns have been raised about the consequences
of successful attacks on water supply or nuclear power stations,
which have potential to claim many lives and throw communities
into chaos [3].
Due to the high rewards that the attacks on ICS can realize, these
systems are becoming attractive targets for cyber criminals. Consequently, ICS-specific malware and targeted attacks are growing
both in diversity and sophistication. In addition to the prominent
Stuxnet worm, other pieces of malware designed specifically for
ICS, such as the Dragonfly malware [41], and attacks specifically
targeting Programmable Logic Controllers (PLCs), including the
PLC-Blaster worm [47], the Ladder Logic Bombs [20], and the PLC
Pin Control attack [1] have started to surface.
Evolving from isolated systems running proprietary control protocols using specialized hardware and software, ICS are increasingly adopting IT solutions by using industry-standard network
protocols and operating systems to promote corporate connectivity and meet performance requirements [48]. The integration of
standard IT-based solutions is making these systems considerably
less isolated from the outside world, and introducing a host of new
vulnerabilities inherited from the IT sector. According to a 2017
SANS survey [21], 69% of security practitioners perceive the current cyber-threat level in ICS as critical or high, a whooping 26%
increase from just two years before.
One fundamental difference between traditional IT-based systems and industrial control systems is that the latter interact with
the physical world. Conventional off-the-shelf intrusion detection
systems prove ill-fit for the ICS domain because they do not take
process semantics into account [22]. Reportedly, in the latest attack
on the power grid in Ukraine, hackers are thought to have hidden,
undetected for six months, in the energy company’s IT network,
Session 5A: Cyberphysical CCS’18, October 15-19, 2018, Toronto, ON, Canada 817
acquiring privileges to access systems before taking methodical
steps to take the power offline [44]. In the attack on the Iranian
nuclear plant, the Stuxnet worm used zero-day exploits to infect
systems while hiding its changes using sophisticated rootkits and
validating its drivers with stolen trusted certificates [8, 14]. The
fundamentally different nature of these systems calls for security
approaches that are tailored to the ICS environment.
There is an emerging trend in ICS intrusion detection research
where researchers have shown growing interest in developing techniques that can detect such sophisticated attacks at the process
level [8, 9, 22, 28, 31, 35, 46, 50, 51]. Although intruders may be able
to hide in the IT network while figuring out their workings, the
main driver of this trend is the observation that they can hardly hide
their final goal, which is to cause an adverse effect on the physical
process by maliciously manipulating sensor and control data [8].
A process-level intrusion detection system monitors sensors—the
eyes and ears of control systems—and possibly control commands,
to determine if the physical process is drifting from the normal or
expected behavior. One popular approach frequently used in this
domain proposes to build a Linear Dynamical State-Space (LDS)
model of the physical process, through what is known as system
identification (see [51] and references therein), which is subsequently used to detect anomalies in the system behavior. Although
such approaches might detect anomalous behaviors, models are
difficult to build, requiring massive human effort at the preliminary
stage [15], and a complete and highly detailed model of the physical
process that is not always available [28].
In this paper, we propose a specification-agnostic approach that is
purely data-driven and requires no prior knowledge of the system
dynamics. We present pasad, a light-weight and fast model-free
Process-Aware Stealthy-Attack Detection mechanism that monitors
sensors in ICS in real time and raises an alarm whenever a structural
change in the behavior of the physical process is suspected.
A data-driven approach has also been proposed in [22], where historical sensor readings are used to fit a linear Auto-Regressive (AR)
model, which is then used to detect deviations from what the model
expects. We argue that attempting to fit a simple linear model to
a time series of noisy sensor measurements may often yield inaccurate detection results when the changes in the time series are
subtle. In §4.4, we present a comparison between AR and pasad
and show that our method performs better.
Most of the existing approaches use prediction-based methods
where a predicted value yˆk of the sensor reading yk at time k is
computed, and the difference rk = |yˆk − yk | is checked against a
threshold θ such that if rk ≥ θ, an alarm is raised. Instead of predicting the future, pasad seeks to solve the easier problem of deciding
whether present sensor readings are departing from past readings due
to a change in the mechanism generating them. We review related
literature in more detail in §5.
In addition to the aforementioned benefits, what we consider the
chief advantage of our approach over existing methods is the fact
that pasad is capable of detecting slight variations in the sensor
signal, owing to its impressive noise-reduction capabilities. This
leads to the possibility of detecting strategic attackers who may try to
hide their attacks even at the process level, by injecting just enough
false data that the compromised sensor values remain roughly
within the noise level. Such stealthy integrity attacks are hard
to detect by failure detectors or anomaly detectors that are not
insensitive to noise. Mo and Sinopoli [38] argue that a strategic
adversary may inject an attack that inflicts a large perturbation on
the system state while only causing a slight increase in the detection
rate of these detectors. We further motivate our approach in §2.1.
Pasad initially extracts noise-reduced signal information from a
time series of sensor measurements during normal process operation and then actively checks whether present realizations of the
process are departing from historical normal behavior. To extract
signal information, pasad borrows ideas from Singular Spectrum
Analysis (SSA) [7, 13, 17–19, 23, 52], a non-parametric exploratory
analysis tool for time series that is particularly suitable for separating the deterministic part of a dynamical system behavior from the
chaotic part, purely from noisy time series of measurements.
Once signal information has been extracted, pasad proceeds
by identifying a signal subspace that describes the deterministic
variability in the time series produced by the process during normal
activity. Afterwards, the most recent observations (lagged vectors
thereof) are projected onto this subspace and a departure score is
computed for every new observation. A persistent increase in the
computed score suggests that current observations are not in accordance with the estimated dynamics, and that a malicious change in
the mechanism generating the time series may be occurring.
Our method is based on a rich and sound theory and at the same
time enjoys a low computational overhead. A key ingredient to
this desired combination is a direct result of what we refer to as
the isometry trick. The trick is based on a mathematical property
and has two added benefits for pasad: one pertaining to efficiency,
where the computations needed to evaluate the departure score are
reduced significantly; and another pertaining to validation, where
one can visualize the time-series data in the signal subspace, which
helps validating the underlying theory. We dedicate §2.6 to explaining and proving this fundamental property.
We demonstrate the effectiveness of pasad using the TennesseeEastman (TE) process control model under various attack scenarios.
While it is shown how direct attacks that aim to sabotage the control system by forcing controllers to operate outside their specified
boundaries can be trivially detected, we demonstrate how stealthy
integrity attacks, which are designed to cause tangible impact in a
stealthy manner, may as well be detected in reasonable time. Furthermore, we test pasad using data from the Secure Water Treatment (SWaT) plant—a physical testbed dedicated for ICS security
research—and on data from a relatively long network trace captured
from an operational water distribution plant in Sweden, to investigate its applicability to real industrial settings. Finally, we compare
our method with an enhanced version of the AR method proposed
in [22], and demonstrate how, in contrast to simple linear models like AR, pasad is capable of detecting subtle attack-indicating
changes in the process behavior.
More specifically, our contributions in this paper are the following: (i) We present a novel technique for process-level detection
of stealthy attacks on control systems that is capable of detecting strategic attackers who may attempt to camouflage malicious
changes with noise. We provide theoretical arguments and empirical results validating our principled approach; (ii) we introduce
the notion of departure as a specific type of anomaly, whereby a
process regulated by some control system departs from the normal
Session 5A: Cyberphysical CCS’18, October 15-19, 2018, Toronto, ON, Canada 818
state due to a structural change in the process behavior. We devise
an algorithm that detects this departure accurately and efficiently;
(iii) we create new carefully crafted attacks ranging from easy to
detect to fairly stealthy, explore their impact on the TE process, and
make the attack data publicly available; and (iv) we validate our
approach by conducting extensive experiments using a simulation
platform, data from a physical testbed, and network traffic from
a real ICS. Moreover, we compare pasad with a popular existing
method and show that the results are in favor of our approach.
In §2, we describe pasad in detail, treating both its theoretical
and practical aspects. We establish a framework for validating our
approach in §3. Then, we describe and discuss the experiments and
the results thereof in §4. In §5, we review related literature, and
finally, we conclude this work in §6.
2 PASAD: PROCESS-AWARE STEALTHY
ATTACK DETECTION
Pasad is an anomaly-based process-level intrusion detection system that monitors ICS process activity in real time to determine
whether the system operation is normal or anomalous. Initially,
pasad learns the normal behavior recorded in a time series of sensor
measurements through a training phase, during which ideas from
singular spectrum analysis are applied to extract signal information from process output under normal conditions. Thereafter, the
system continuously checks if incoming observations are departing
from the normal behavior captured during the training phase. The
basic idea behind departure detection is explained in §2.4.
Pasad consists of four steps formally defined in §2.3. In the first
step, the time series of sensor measurements is embedded in a
Euclidean space, which means that pasad mostly deals with vectors and vector spaces. Therefore, after we motivate our approach
in §2.1, we proceed by introducing preliminary concepts in linear
algebra in §2.2. In the second step, a spectral decomposition of a
special matrix derived from the time-series data is performed to extract the deterministic part of the system behavior. In the third step,
a signal subspace is identified and vectors corresponding to sensor
measurements during normal operating conditions are projected
onto this subspace to obtain a representation of the normal process
behavior. We provide a mathematical interpretation of projecting
vectors onto the signal subspace in §2.5. In the final step, pasad
keeps track of a departure score in order to determine if the process is departing from the normal state. In §2.6, we point out the
mathematical property that leads to the isometry trick and the two
resulting benefits mentioned in §1, which we thoroughly discuss
in §2.7 and §2.8. Finally, we discuss the choices for the parameters
involved in §2.9 and pasad’s performance in §2.10.
2.1 Motivation
A key enabling property for pasad is that ICS exhibit regular
dynamics. They tend to have static topologies and regular communication patterns [11]. A typical control system utilizes sensors,
actuators, and controllers to regulate some controlled process. Sensor devices measure some physical property and communicate
the measurements to a controller (e.g., a PLC), which based on a
control algorithm, correspondingly issues commands to actuators
(e.g., control valves) that directly manipulate the physical process
based on the received commands. ICS perform clearly defined tasks
with clear control objectives and in a well-controlled environment.
They typically consist of a number of control loops, each regulating
some physical property by trying to maintain its measurements
around a predefined set point. A closed-loop control system is fully
automated and performs almost exclusively without human intervention, and PLCs behave in a cyclic manner [54]. This effectively
means that the same dynamics repeat constantly over time. Consequently, even in the presence of noise, the level of determinism in
the behavior of control systems is relatively high. Sometimes the
control loops are nested and cascading, where the set point of one
loop is based on the process variable determined by another loop.
Even then, the dynamics are likely to repeat, since the loops operate
continuously over the duration of the process with predetermined
cycle times [48].
Mo and Sinopoli [38] point out the key problem of making the
unrealistic assumption that the system model is noiseless when
developing techniques to identify malicious behaviors in control
systems. As physical process control variables may exhibit noisy
behaviors by nature [15], they argue that in a noisy environment,
strategic attackers have the advantage of inflicting a large perturbation on the system state while avoiding detection by failure
detectors and anomaly detectors that do not account for noise. The
goal of strategic attackers is to cause slow damaging perturbations
in the physical process while remaining unnoticed, so that it runs
in a suboptimal setting, eventually leading to performance degradation. The expected outcome of such attacks is to cause a cascading
effect due to the interaction between control loops to eventually
induce a complete failure of the control system. Pasad is capable
of capturing the deterministic behavior of the physical process,
despite the fact that the environment in which control systems
operate is noisy.
To identify and obtain a mathematical representation of the
deterministic behavior, we partly base our technique on singular
spectrum analysis—a model-free time-series analysis tool. Vautard
and Ghil [52] describe how in nonlinear dynamical systems, the
interaction of a large number of degrees of freedom gives rise
to what is called “deterministic chaos” in time series. Then, they
argue how SSA can tell much about what deterministic part of the
system behavior recorded in a time series is due to a few degrees
of freedom and what chaotic part is due to the many rest. They
refer to the number of degrees of freedom in the former case as the
statistical dimension of the time series. In essence, this dimension
is determined by solving an eigenvalue problem of a covariance
matrix derived from the data. We describe the procedure in detail
in §2.3, but first we introduce preliminary concepts in linear algebra.
2.2 Preliminaries & Notation
Definitions and derivations of some of the mathematical concepts
that we state without proof throughout this paper can be found in
many books on linear algebra, e.g., [49].
A set B of vectors is said to span a vector space V if every vector
in V is a linear combination of the vectors in B. The set B is linearly
independent if none of its vectors is a linear combination of the
other vectors, and orthonormal if its vectors have unit length and
are pairwise orthogonal. The set B is said to be a basis for V if it
Session 5A: Cyberphysical CCS’18, October 15-19, 2018, Toronto, ON, Canada 819
both spans V and is linearly independent; it is an orthonormal basis
if, in addition, its vectors are orthonormal.
Let A be an m×n matrix whose entries are real. Like any matrix,
A is associated with four fundamental subspaces: its range R(A)
(or column space), its kernel K (A) (or null space), the range of its
transpose R(A
T
) (or row space of A), and the kernel of its transpose K (A
T
) (or left null space of A). For a subspace W of V , the
orthogonal complement of W is the set W ⊥ of all vectors in V that
are orthogonal to every vector in W . We will use the fact that
K (A)
⊥ = R(A
T
). (1)
For a matrix A in R
m×n with m > n, and for a vector x not
necessarily in R(A), the orthogonal projection of x onto the range
of A is given by PAx where
PA = A(A
TA)
−1A
T
(2)
is a projection matrix. Moreover, every orthogonal projection P
satisfies the two properties
P
2 = P (idempotence) P
T = P (symmetry). (3)
Notation. In what follows, when we refer to A as a linear transformation (or linear map), we mean the matrix representation of
some linear transformation T : R
n → R
m such that for all x in R
n
,
T (x) = Ax. We denote by the matrices A
д
,A
+ ∈ R
n×m the generalized inverse and the Moore-Penrose pseudoinverse of A respectively.
We use boldface lowercase for vectors, and boldface uppercase for
matrices; || · || is the Euclidean 2-norm.
2.3 The Four Steps of pasad
Consider a univariate real-valued time series of sensor measurements T = x1, x2, · · · , xN , xN +1
, · · · , pasad consists of the following four steps.
Step 1: (Embedding)
Let L be an integer, referred to as the lag parameter, then an initial subseries of T of length N is embedded in the L-dimensional
Euclidean space R
L by forming K L-lagged vectors
xi = (xi
, xi+1
, · · · , xi+L−1
)
T
(4)
for all 1 ≤ i ≤ K, where K = N − L + 1, and constructing the
trajectory matrix
X =











x1 x2 . . . xK
x2 x3 . . . xK+1
.
.
.
.
.
.
.
.
.
.
.
.
xL xL+1
. . . xN











(5)
whose columns are the lagged vectors.
Step 2: (Singular Value Decomposition)
To extract noise-reduced signal information describing the deterministic behavior of the control system, the Singular Value Decomposition (SVD) of the trajectory matrix X is performed to obtain the
L eigenvectors u1, u2, · · · , uL of the so-called lag-covariance matrix XXT
. Then, the statistical dimension r of the time series—the
number of degrees of freedom that account for the deterministic
variability—is determined (see §2.9).
Step 3: (Projection onto the Signal Subspace)
After the signal information has been obtained, in this step, a mathematical representation of the normal process behavior is identified.
Let U be an L-by-r matrix whose columns are the r eigenvectors
u1, u2, · · · , ur corresponding to the r leading eigenvalues, and let
Lr be the subspace spanned by the column vectors of U. Compute
the sample mean of the lagged vectors xi
, 1 ≤ i ≤ K, as
c =
1
K
XK
i=1
xi
(6)
and the centroid of the cluster they form in Lr
as
˜c = Pc (7)
where P = U(U
TU)
−1U
T = UUT
is a projection matrix (see §2.5).
Step 4: (Distance Tracking)
To detect attack-indicating structural changes in the system behavior, a departure score is computed for every incoming sensor
observation. For every test vector xj
(j > K), compute the squared
Euclidean distance from the centroid in Lr
as
Dj = ||˜c − Pxj
||2
. (8)
Finally, generate an alarm whenever Dj ≥ θ for some threshold θ.
As implied in Eq. (7) and Eq. (8), the lagged vectors are projected
onto the signal subspace Lr
. The explicit projection at every iteration in the detection phase to compute the departure score is
computationally expensive. In §2.6, we show how such a complexity
can be avoided using the isometry trick.
Pasad runs in two phases: an offline training phase and an online
detection phase. In the training phase (steps 1-3), the time series
is embedded in the L-dimensional Euclidean space, and a signal
subspace is identified by determining the statistical dimension of
the series and the set of r eigenvectors of the lag-covariance matrix.
The lagged vectors used for training—the training vectors—are then
(implicitly) projected onto the signal subspace, and the centroid ˜c
of the cluster they form is computed. Then, in the detection phase
(step 4), pasad actively checks if lagged vectors xj
(j > K)—the
test vectors—are departing from the cluster by tracking the squared
Euclidean distance Dj from the centroid.
As the first two steps are known from singular spectrum analysis,
for the sake of brevity, we refer the reader to [19] for a good treatment of the SSA theory and methodology. We extend the theory
and adapt it to the problem of detecting attacks on ICS in steps 3
and 4, which we thoroughly treat in the remainder of this section.
2.4 Departure Detection: The Basic Idea
We now describe the basic idea behind departure detection. As
explained in §2.3, the first embedding step results in K vectors xi
that lie in the L-dimensional space R
L—the trajectory space. Then,
the singular value decomposition of the trajectory matrix X yields
an orthonormal set of L eigenvectors. Some r < L of these eigenvectors, associated with the largest eigenvalues, span an r-dimensional
linear subspace Lr ⊂ R
L
, which we refer to as the signal subspace.
The matrix U, whose columns are the r orthonormal eigenvectors,
is then formed so that P = UUT
is the projection matrix that maps
the column vectors xi of X to the subspace Lr
. The projected training vectors occupy a dense region in Lr
and thereby form a cluster
Session 5A: Cyberphysical CCS’18, October 15-19, 2018, Toronto, ON, Canada 820
(see Figure 1). The centroid of the cluster is then computed by finding the vector ˜c in Lr
that minimizes the average squared Euclidean
distance from all projected training vectors.
Departure. As the time series of sensor measurements T continues beyond N, if the mechanism generating its values (the physical
process) has not changed, then new projected lagged vectors in
Lr
should lie close to the cluster. Therefore, the distance between
these vectors and the centroid of the cluster should remain reasonably small. If, on the other hand, the mechanism generating the
time series changes due to some outside action (attacks), then the
projected test vectors will be forced to lie further away from the
cluster and consequently, the distance between these vectors and
the centroid of the cluster is expected to increase. A departure is
detected if this distance crosses a prescribed threshold.
In §2.8, we validate the claims we have just made; namely that
(i) training vectors form a cluster in the signal subspace; (ii) test
vectors fall close to the cluster under normal process operation;
and (iii) test vectors depart from the cluster when the process is
under attack. In particular, we show that the linear subspace Lr
is isomorphic to the r-dimensional Euclidean space, allowing us to
visualize the structure of the projected lagged vectors in R
3
. Next
we provide a mathematical interpretation of projecting the lagged
vectors onto the signal subspace.
2.5 Projection onto the Signal Subspace
In the process of obtaining a mathematical representation of the
normal process behavior, the training vectors are projected onto
the signal subspace Lr
(step 3). Here, we give a mathematical interpretation of this projection. In §2.7, we show that this projection
is in fact implicit as a result of the isometry trick.
The r eigenvectors obtained from the SVD of the trajectory matrix X form an orthonormal basis for the signal subspace (see §2.2),
which is presumed to contain most of the signal information recorded
in the time series of sensor measurements. The central idea of pasad
is then to check whether or not current sensor observations, in the
form of lagged vectors in the trajectory space, conform with the
information obtained about the signal during normal process operation, in the form of a subspace of the trajectory space. Naturally,
since Lr
is a subspace of R
L
and every lagged vector x resides in
R
L
, we opt to find the best representation of x in Lr
. By best representation we mean the vector p in Lr
that is the closest possible to
x, in the sense that ||p − x|| is minimal. It is well known that this
best approximation vector is given by the orthogonal projection
p = Px, where P is the projection matrix onto Lr
and ||p − x|| is
the projection error.
Since by construction, the signal subspace is the same as the
range of the matrix U, the projection matrix that maps vectors in
R
L
to Lr
is given by P = U(U
TU)
−1U
T
(see Eq. (2)). Evidently, for
the projection matrix P to be defined, the columns of U must be
linearly independent so that U
TU is invertible. The column vectors
ui of U, resulting from the SVD of the trajectory matrix X (step 2),
are not only linearly independent, but also orthonormal. It follows
that U
TU = I, where I is the identity matrix, and the projection
matrix is thus reduced to P = UUT
.
As the best representation of the lagged vectors in the signal
subspace can be obtained by an orthogonal projection, we first
project the training vectors onto Lr
and compute the centroid of
the resulting cluster (see Eq. (7)). Then, to detect malicious changes
in the process behavior, pasad checks, in real time, if the most recent
sensor observations are persistently departing from the cluster of
projected training vectors in the signal subspace (step 4). This is
done by keeping track of the distance between the most recent test
vector and the centroid of the cluster.
2.6 The Isometry Trick
In a nutshell, the isometry trick states that, for an arbitrary vector
x in R
L
, computing the norm of the vector U
T x has the effect of
implicitly projecting x onto the subspace Lr
and computing its
norm there.
To make progress, consider the linear map U
T
: R
L → R
r
and
note that for all x in R
L
, the following equality holds
||U
T
Px|| = ||Px|| (9)
(see Appendix A for a proof). Informally, Eq. (9) implies that whenever a vector x is projected onto Lr
, the resultant vector is one
whose length does not change when acted upon by the transformation U
T
. Formally, first note the key property
R(P) = R(U) (10)
(see Appendix B for a proof) and that K (U
T
)
⊥ = R(U) (from
Eq. (1)), then U
T
is said to be a partial isometry [24].
Definition (Partial Isometry). A not necessarily square matrix
A is called a partial isometry if the vectors v and Av have the same
Euclidean norm whenever v is in the orthogonal complement of the
kernel of A.
A (linear) isometry between two normed vector spaces is a linear
map that preserves the length of vectors (and by linearity, the distance between two vectors) for all vectors in its domain. Note that
U : R
r → R
L
is an isometry, since for every y ∈ R
r
, ||Uy|| = ||y||.
1
On the other hand, ||U
T x|| and ||x|| are not equal in general. However, when the domain of U
T
, namely R
L
, is restricted to the orthogonal complement of its kernel, U
T becomes an isometry as asserted
by Eq. (9). Indeed, for every x in R
L
, let v = Px, then ||U
T v|| = ||v||,
for every v ∈ R(P) = R(U) = K (U
T
)
⊥.
But (U
T
)
д = U; that is, U is a generalized inverse of U
T
, since
U
T = U
TUUT = U
T
P (11)
which follows directly from the fact that U
TU = I. Hence, by virtue
of Eq. (11), one can rewrite Eq. (9) as
||U
T
x|| = ||UUT
x||, (12)
suggesting that computing norms in Lr
can be done without the
need for an explicit projection.
We refer to using the property that U
T
is a partial isometry to
compute the norms ||U
T x|| in R
r
instead of the norms ||UUT x|| in
Lr
as the isometry trick.
Next, we show that this property allows for more efficient tracking of the distance between the test vector and the centroid during
the detection phase. In §2.8, we extend this result to show that Lr
1
Since | |Uy| |2 = (Uy) · (Uy) = y
T U
T Uy = y
T y = | |y| |2
, ∀ y ∈ R
r
.
Session 5A: Cyberphysical CCS’18, October 15-19, 2018, Toronto, ON, Canada 821
is isomorphic to the r-dimensional Euclidean space. A key benefit
of this isomorphism is the ability to visualize the normal behavior
as a cluster of lagged vectors in the signal subspace, as well as the
departure from the cluster when the process is under attack.
2.7 Efficiency: Implicit Projection
In the detection phase, a departure score for the most recent test
vector is obtained by iteratively computing the distance Dj from
the centroid determined in the training phase (see Eq. (8)) .
By writing Dj = ||P(c−xj
)||2 = ||UUT
(c−xj
)||2
, we observe that
computing the distance from the centroid of the cluster amounts to
computing the (squared) norm of the projection of the difference
vector (c − xj
) onto Lr
. From the isometry trick, we learned that
in order to compute the norm of the projection of any vector x in
the trajectory space, it is sufficient to compute the norm of U
T x
without the need for an explicit projection onto Lr
. With this in
mind, computing U
T x instead of UUT x at every iteration leads to a
significant gain in performance (see §2.10 for more performance
analysis), which increases the deployability of pasad on limitedresource hardware, and its applicability to real industrial settings.
Thus, we can now efficiently compute the centroid as ˜c = U
T
c
and the departure score as Dj = ||˜c − U
T xj
||2
, replacing Eq. (7) and
Eq. (8) respectively in the actual implementation. Consequently,
the departure score can be evaluated more efficiently in the lowdimensional space R
r
, while still gaining the luxury of computing
the distance from the cluster in the signal subspace.
2.8 Validation: Visualizing the Departure
We now extend the result in Eq. (12) to show that by restricting the
domain of U
T
to R(U) = R(P), we obtain an isomorphism between
the signal subspace and a low-dimensional Euclidean space, which
allows us to visualize the behavior of the underlying process. We
do not make the claim that the ability to visualize the departure of
the process in ICS would offer plant engineers a complete picture
of the causes and physical implications of the attack. However, we
consider that the chief advantage of being able to visualize the
time-series data and the departure is that it empirically validates
the theoretical claims about pasad that we have made in §2.4.
We showed in §2.6 that the linear map U
T
, being a partial isometry, preserves the vector norm when its domain is restricted to R(U).
Let U˜ : R(U) → R(U
T
) be the restricted map, i.e., U˜ = U
T 

R(U)
,
then evidently U˜ is an isometry. With the following proposition,
we show that U˜ is further an isomorphism between the vector
spaces Lr
and R
r
. The signal subspace being isomorphic to the
r-dimensional Euclidean space effectively means that the two vector spaces are fundamentally the “same” for all practical purposes
(e.g., with respect to dimension, linear independence, vector norm,
distance between vectors, linear combinations, etc). The key benefit
for pasad then is that it can operate in a simpler space where computing the distance from the centroid can be done more efficiently
and where the time-series data can be visualized.
Proposition. The restricted linear map U˜ : R(U) → R(U
T
) is
an isometric isomorphism and admits a Moore-Penrose pseudoinverse
U˜ + = U. R(U) and R(U
T
) are therefore isometrically isomorphic
(R(U)  R(U
T
)).
For a sketch of the proof (see Appendix C for a complete proof),
note that a linear isometry between two normed vector spaces is
a (linear) isomorphism if it is bijective (i.e., both injective and surjective). U˜ is injective since it is left-invertible as U˜ +U˜ = UUT = P,
where P is the identity map on R(U) (by the idempotence property in (3)). Moreover, U˜ is surjective since it is right-invertible as
U˜ U˜ + = U
TU = I, where I is the identity map on R(U
T
). Hence, U˜
is a bijective isometry, and thus an isomorphism.
Finally, since all r columns of U are linearly independent, U has
full rank, meaning that its kernel contains only the zero vector.
Therefore, by Eq. (1), R(U
T
) = R
r
, and as R(U) = Lr by construction, it follows, by the previous proposition, that U˜ : Lr → R
r
is
an isomorphism and consequently
L
r  R
r
. (13)
While vectors in the r-dimensional signal subspace Lr have L
components (since Lr ⊂ R
L
), vectors in the range of the partial
isometry U
T have only r components (since R(U
T
) = R
r
). Thus,
by Eq. (13), images of all vectors in the trajectory space can be
expressed with respect to the standard basis for R
r
. By choosing
only the first 3 basis vectors of the signal subspace, empirically
deemed sufficient for capturing the main structure, we can plot the
data vectors as points in R
3
and visualize the structure.
Figure 1 depicts a visualization of the departure of the TennesseeEastman process from normal operating conditions when the process is under a stealthy type-SA3 attack (described in detail in
§3.1.1). The upper-left subplot shows a time series of raw measurements corresponding to the sensor being monitored by pasad. The
initial subseries was used for training to extract the basis vectors
of the signal subspace, map the training vectors to R
3
, and compute the centroid of the cluster they form. As shown on the right,
when the process is running under normal operating conditions,
the projected test vectors lie close to the cluster, whereas when
the process is under attack, the vectors start departing from the
cluster. The lower-left subplot shows the values for the distance
Dj from the centroid ˜c which pasad iteratively computes for every
test vector xj
, and how the departure was detected shortly after
the attack started.
2.9 Choice of Parameters
There are three parameters involved in pasad: the length N of the
initial part of the time series used for training, the lag parameter
L, and the statistical dimension r. For the length of the training
subseries, the best practice is to have it sufficiently large so that it
incorporates an essential part of the signal in the noisy time series.
To determine the lag parameter L and the statistical dimension r,
there are standard SSA recommendations and guidelines to follow [19, 39]. For the lag parameter, it should be that L ≤ N/2, and
in practice, the choice ⌊L = N/2⌋ often proves adequate. As for the
statistical dimension, we choose r such that the r leading eigenvectors provide a good description of the signal and the lower L − r
eigenvectors correspond to noise. The choice of r can be assisted
by a scree plot,
2
in which the spectrum of the eigenvalues obtained
2A scree plot is a statistical test, frequently used in factor analysis, to estimate the
number of factors (eigenvectors in our case) that correspond to most of the variability
in the data.
Session 5A: Cyberphysical CCS’18, October 15-19, 2018, Toronto, ON, Canada 822
Training vectors
form a cluster
Test vectors depart
from the cluster
when the process
is under attack
Test vectors fall close to
the cluster during normal
process operation
Departure score crossing
the threshold shortly after
the attack started
Figure 1: A visualization of the departure of the TE process from the normal state. The upper-left subplot shows the raw
sensor measurements. As shown on the right, when the process is running under normal conditions, the test vectors lie close
the cluster, whereas when the process is under attack, the vectors start departing from the cluster. The lower-left subplot
shows the values for the departure score and how the departure was detected shortly after the attack onset.
in the SVD step reveals the noise level as a flat tail, such that the
statistical dimension is the number of eigenvalues above this level.
Finally, to determine the threshold θ, we run pasad on a validation series, which is the subseries observed under normal conditions
and preceded by the training subseries, i.e., the subseries determined
by the interval (N + 1, τ − 1), where τ is the starting time of the
attack (when applicable). More formally, we define the threshold as
θ = Mn,r,τ +ϵ such that Mn,r,τ = max
n

Dn,r,τ : N < n < τ
	
where
Dn,r,τ is the departure score corresponding to observations in the
specified range and ϵ is a relatively small constant. We motivate
this approach to determining the alarm threshold in §4.5.
2.10 Implementation & Performance
A pseudocode of pasad is shown in Algorithm 1. The most expensive computational step during training is computing the singular value decomposition of the trajectory matrix X.
3
In general,
the SVD of an m×n matrix is computable in time proportional to
O(min{mn2
,m2n}). In our particular case, X is of dimension L×K,
where K = N −L + 1. Then, we have L ≤ N/2 as mentioned in §2.9,
which implies that L ≤ (K + L − 1)/2 ⇒ L ≤ K − 1 ⇒ L < K, so
that min{LK2
, L
2K} = L
2K. Thus the time complexity of the SVD
step in pasad is O(L
2K).
Although the time complexity of the training procedure is quadratic in the size of the lag parameter L, performance is not a critical
issue for the training phase since it is an offline procedure. On the
other hand, it is crucial that testing on incoming observations can
be done efficiently to allow for real-time protection. As mentioned
in §2.7, the departure score for the jth test vector is computed as
||˜c−U
T xj
||2
. First, ˜c−U
T xj
is evaluated in O(rL), since it involves a
3Note that the hankel function on Line 19 is used because the trajectory matrix has a
Hankel structure.
product of matrices with dimensionsr×L and L×1 respectively, then
the elements of the resultant vector are squared and added in O(r).
However, r is a constant that does not depend on L and typically
r << L; therefore, the overall time complexity of the detection
phase is linear in L.
3 A FRAMEWORK FOR VALIDATION
In this section, we describe three different scenarios for validating
pasad: the Tennessee-Eastman process, a dataset from the SWaT
testbed, and a network traffic from a real water distribution plant.
3.1 Scenario I: The Tennessee-Eastman Process
We have developed a set of new attacks on the Tennessee-Eastman
process control model [12] that aim to cause tangible impact on the
underlying physical process.4 To provide an intelligible explanation
of the attacks we have designed, a high-level description of the
process is in order.
The TE simulation model simulates a real plant-wide chemical
process. The process was originally released with no embedded
control strategy as the aim of its release was to challenge the control
theory community to develop and benchmark different optimized
control strategies. Indeed, several strategies have been proposed in
response to the challenge [32, 45]. More recently however, acting as
both a realistic and safe environment for experimentation, the TE
process has transcended its original objective and has come to be a
popular choice amongst ICS security researchers [8, 28, 29, 31, 37].
We use the popular simulation model proposed by Downs and
Vogel [12], who modified some aspects of the chemical process,
4The TE attack data and pasad’s code are made publicly available at https://github.com/
mikeliturbe/pasad
Session 5A: Cyberphysical CCS’18, October 15-19, 2018, Toronto, ON, Canada 823
Algorithm 1 Pasad: An algorithm for detecting stealthy attacks
on control systems.
Required: Training subseries Tt r ain and the lag parameter L.
Outcome: An alarm is raised whenever the departure score crosses
a prespecified threshold.
1: N ← length(Tt r ain)
2: U
T ← pasad_train(Tt r ain, N, L) ▷ The partial isometry
3: K ← N − L + 1
4: for i ← 1,K do ▷ Compute the centroid
5: xi ← i
th traininд_vector
6: s ← s + xi
7: end for
8: c ← s/K
9: ˜c ← U
T
c
10: Determine θ ▷ Alarm threshold
11: for xj ← current_test_vector do
12: y ← ˜c − U
T xj
13: Dj ← y
T y ▷ The departure score
14: if Dj ≥ θ then ▷ Check for departure
15: generate alarm
16: end if
17: end for
18: function pasad_train(Tt r ain, N, L)
19: X ← hankel(Tt r ain, N, L) ▷ Trajectory matrix
20: z ← svd(X) ▷ Solve the SVD problem
21: Determine r ▷ The statistical dimension
22: U ← z.eigenvectors(r) ▷ The r leading eigenvectors
23: return U
T
24: end function
such as kinetics, components, and operating conditions, in order to
protect its proprietary nature.
The TE process produces two liquid products (G,H) from four
gaseous reactants (A,C,D, E), in addition to a byproduct (F ) and an
inert (B), making a total of eight chemical components, coded after
the first eight letters of the alphabet. There are five main operation
units: reactor, condenser, recycle compressor, vapor-liquid separator, and stripping column. The gaseous reactants, fed by three
different feeds, react to form liquid products. These products, along
with residual reactants, leave the reactor as vapors, which are then
cooled by the condenser to return to the liquid state. Next, the
vapor-liquid separator isolates the non-condensed vapors, which
are fed once again to the reactor by using a centrifugal compressor.
The condensed components, on the other hand, move to a stripping
column to remove the remaining residual reactants. The final product (mix of G and H) exits the stripper and heads towards a refining
section that separates its components. This refining section is not
included in the model. Similarly, the inert and the byproduct are
purged in the vapor-liquid separator as vapor.
The process has 41 measured variables, labeled as XMEAS, that
comprise the readings of the sensors, and 12 manipulated variables,
named XMV, that correspond to actuator commands. The controller
reads the XMEAS values and, based on the implemented control
strategy, sends commands to the XMV variables, which mostly represent valves that control different process flows. A full description
of all process variables can be found in the original TE paper [12].
We use the open-source DVCP-TE implementation of the TE process,5 first presented by Krotofil and Larsen [30], which is oriented
towards security research and features support for performing attacks on both sensor and actuator signals. DVCP-TE is a Simulink
model, where the process is implemented as an S-function. A set of
control strategies, along with a framework for performing attacks,
are implemented in Simulink blocks.
As stated previously, the TE process originally lacked any control
strategy. If the process runs in absence of a control algorithm, it
remains unstable and eventually comes to a complete stop due to a
too high separator liquid level. In order to keep the process running
and maintain its stability, we use the control strategy presented
by Larsson et al. [32].
Most of the previous work focuses on the unreliability of the
sensor readings, while trusting actuators and controllers [51]. By
contrast, we simulate integrity attacks on both sensors and actuators
as depicted in Figure 2. Once attackers gain access to a control
network in charge of a process, they can either compromise the
data fed to the controller by tampering with the process readings
transmitted by the sensors, or tamper with the commands sent by
the controller to the actuators. In the former case, the controller
makes decisions based on maliciously modified data, potentially
leading to the destabilization of the process. In the latter case, the
process acts on arbitrary commands sent by the attacker rather
than on the commands sent by the controller.
We use the attacker model proposed by Krotofil et al. [31], where
we simulate measured variables u
′
i
(t) and y
′
i
(t) as
u
′
i
(t),y
′
i
(t) =




ui
(t),yi
(t) for t < Ta
u
a
i
(t),y
a
i
(t) for t ∈ Ta
(14)
such that ui
(t),yi
(t) and u
a
i
(t),y
a
i
(t) correspond to the i
th original
Physical
Process Actuators Sensors
Controller
1 2
Figure 2: Attack scenarios on control systems: Attacks on
actuator signals (1) and attacks on sensor signals (2).
and modified measured variables at time 0 ≤ t ≤ T respectively, T
is the duration of the simulation run, and Ta is the attack interval.
We have designed the attacks with two main objectives in mind:
(i) Stealth attacks, designed to cause slow damaging perturbations
and aim to degrade the performance of the process; and (ii) direct
damage attacks where the attacker’s goal is to cause damage to
physical equipment (e.g., reactor, stripping column, pipes, etc.) that
5Available at https://github.com/satejnik/DVCP-TE
Session 5A: Cyberphysical CCS’18, October 15-19, 2018, Toronto, ON, Canada 824
is essential for the process to run, mainly by driving the process to
unsafe operating conditions (e.g., high temperature or pressure).
3.1.1 Stealth Attacks. In stealth attacks, attackers try to remain
undetected by keeping the process readings under a set of thresholds, which if exceeded, alarms are raised and operators are alerted.
In the following, we describe three such attacks.
SA1: The manipulated variable XMV(9) corresponds to the valve
that controls the steam input to the stripping column. When the TE
process is controlled by the control strategy of Larsson et al. [32],
no steam is used in the process, and this valve is always closed. In
this attack, we consider that the attacker opens the steam valve at
40%. Compared to a completely open steam valve, this attack has
less impact on the plant operation, but is nonetheless stealthier.
SA2: The manipulated variable XMV(6) corresponds to the purge
valve that controls the output of accumulating reactor gases. Opening this valve more than necessary would result in products being
wasted, since in order to maintain the production rate, more reactants would need to be purged from the reactor and fed to the
process. However, opening the purge valve too much would drive
the reactor pressure to a too low level, causing the process to halt.
In this scenario, we set XMV(6) to 28% open, which is wide enough
to degrade the performance of the process without interrupting the
process execution.
SA3: In this sensor attack, we tamper with the readings of the
XMEAS(10) sensor, which measures the purge rate, so that it constantly sends the value zero, tricking the controller into thinking
that there is no purge. The controller would then open the valve
XMV(6) to counteract.
3.1.2 Direct Damage Attacks. Direct damage attacks aim to sabotage equipment and eventually lead to the interruption of the
process. In the following, we describe two such attacks.
DA1: The manipulated variable XMV(10) corresponds to the
valve controlling the cooling water flow to the reactor to prevent its
pressure from reaching dangerous levels. Therefore, it is a critical
valve in the process. In this scenario, we set the XMV(10) valve to
35.9% open, slightly less than the optimal setting. Consequently, the
pressure adds up inside the reactor and the TE process execution
eventually stops due to reaching the predefined safety limits.
DA2: In this scenario, the value of the sensor XMEAS(7) measuring the reactor pressure is set to zero, so that the controller thinks
the pressure is significantly lower than it actually is. In response,
the controller opens the way for more reactants to the reactor,
thus accelerating the chemical reaction, and eventually increasing
the reactor pressure. As in DA1, the model stops execution after
reaching a too high reactor pressure.
3.2 Scenario II: The SWaT Dataset
The SWaT dataset [16] is a collection of process readings and network traces from the Secure Water Treatment (SWaT) testbed.6
Constructed to support ICS security research, the SWaT dataset
is divided into two main parts: a seven-day-long capture under
6The dataset was collected by the iTrust group from the Centre for Research in Cyber
Security in the Singapore University of Technology and Design, and is available upon
request at https://itrust.sutd.edu.sg/research/dataset/
normal operating conditions and a four-day-long capture while
conducting diverse attacks.
The SWaT testbed [36], which was used to build the dataset, is
a real scaled-down version of a waste-water treatment plant. The
treatment process consists of six different treatment phases, each
independently controlled by a PLC, and has the capacity of filtering
18.93 water litres per hour. As such, the testbed is able to faithfully
recreate the operation of a real waste-water treatment plant, albeit
at a manageable scale.
At the process level, the captured data corresponds to 51 sensor
and actuator signals. During the capture, the SWaT testbed undergoes 41 different attacks, five of them with no physical impact. A
detailed description of the attacks and their impact on the process,
as well as more technical information on the testbed, can be found
in [5, 16, 36].
3.3 Scenario III: A Water-Distribution Plant
In the final scenario, the data consists of network traffic captured
from equipment inside an operational water distribution plant in
Sweden. The 105GB Modbus/TCP traffic capture was recorded over
a period of 106 days.
To emulate a real-world scenario, we have set up a testbed consisting of two single-board computers, one switch with a portmirroring feature, and a router. The ICS network traffic was replayed from network dump files. Then, to capture and parse the traffic, we have built a packet-capturing subsystem on top of Bro [43]
that features a dynamic buffering mechanism to deliver process
data to pasad, after having parsed the packets and extracted the
register data. Aside from replaying the traffic, all other subsystems,
including a C implementation of the detection component of pasad,
were running on a prototype consisting of a single-board computer.
Furthermore, in order to investigate the deployability of pasad
in real environments, we have deployed and run the prototype in
an operational paper factory and analyzed its performance [4].
4 EXPERIMENTS & RESULTS
In this section, we first investigate the time to detection and the
detection accuracy of pasad (EXP. I-III). Then, we compare pasad
with the AR-based method (EXP. IV) to highlight its distinctive capability of detecting stealthy attacks. In EXP. V, we demonstrate the
ability of pasad to maintain a relatively low false alarm rate by determining the alarm threshold as defined in §2.9. Finally, in EXP. VI,
we explore the applicability of pasad to real-world scenarios.
In all subsequent figures, the upper subplot shows the raw sensor
readings and the lower subplot displays the departure scores. The
initial part of the time series that was used for training corresponds
to sensor measurements collected while the process is running normally (busy, not idle) and is highlighted in blue, and the extracted
signal is highlighted in green.7 The dotted horizontal line corresponds to the threshold level, and the shaded region corresponds
to the time interval (Ta) during which the attack was occurring.
The vertical line indicates when the attack started. The selection of
7To produce the extracted signal, the training vectors are first projected onto the
signal subspace, then an approximated series is reconstructed by applying the diagonal
averaging step in SSA [19].
Session 5A: Cyberphysical CCS’18, October 15-19, 2018, Toronto, ON, Canada 825
Figure 3: Stealthy attack SA1 compromising the control variable xmv(9) detected in sensor variable xmeas(5).
Figure 4: Stealthy attack SA2 compromising the control variable xmv(6) detected in sensor variable xmeas(10).
Figure 5: Stealthy attack SA3 compromising the sensor variable xmeas(10) detected in sensor variable xmeas(9).
pasad’s free parameters for all the experiments described herein
were chosen according to §2.9, and can be found in Table 1.
4.1 EXP. I: Detection of Stealth Attacks
In EXP. I, we wish to detect the three stealth attacks SA1, SA2,
and SA3 defined in §3.1.1, which were designed to mimic an adversary whose aim is to cause perturbations in the physical process
while remaining unnoticed. This can be achieved by strategic attackers who try to minimize the changes in the time series, optimally hiding the entire change within the noise level, whilst accumulating an impact on the infrastructure by drifting the process
from the optimal setting. Figures 3, 4, and 5 depict the detection of
stealthy attacks compromising the manipulated variables XMV(9)
and XMV(6), and the sensor variable XMEAS(10) respectively.
Stealthy attacks are detectable by pasad. When the process
is under a stealthy attack, the values of the sensor readings remain
roughly within the normal range. The process variables, however,
do exhibit changes in the oscillation and trend structure. These
structural changes would hinder the optimal execution of the control process, leading to performance degradation. As the figures
show, pasad is effective against different test scenarios. Notably,
in Figures 3 and 5, it is apparent that covert attacks like SA1 and
SA3 exhibit no visual change in the sensor readings but are nevertheless detected by pasad with a decent time to detection. The
drop of the departure score below the threshold in Figure 3 can be
explained by the reaction of the control algorithm to the attack,
which tries to recover the optimal state of the control process.
4.2 EXP. II: Detection of Direct Damage Attacks
In EXP. II, we apply pasad to the direct damage attack scenarios
DA1 and DA2 described in §3.1.2. These attacks aim to drive the
pressure in the reactor to dangerous levels in an attempt to cause
irreparable physical damage to the control system. The goal of this
experiment is to detect these attacks before such damage occurs. In
both attack scenarios, the process reaches its safety limits roughly 8
hours after the attack onset. The detection results of direct damage
attacks compromising the manipulated variables XMV(10) and the
sensor variable XMEAS(7) are displayed in Figures 6 and 7.
Figure 6: Direct damage attack DA1 compromising the control variable xmv(10) detected in sensor variable xmeas(15).
Figure 7: Direct damage attack DA1 compromising the sensor variable xmeas(7) detected in sensor variable xmeas(5).
Direct damage attacks are trivial to detect. As Figures 6 and 7
reveal, the impact of direct damage attacks DA1 and DA2 on
the process is obvious. Here, the attackers are not trying to remain
unnoticed; rather their goal is to cause as much physical damage
as they can in as little time as possible by driving the process to an
unsafe state. The changes in the behavior of the process variables
caused by these attacks were trivially detected by pasad. The departure score reached the threshold level long before the process
could reach the safety limits. The reason why it is fairly trivial to
detect this kind of attacks using pasad, as well as existing methods
that monitor residuals, is that they tend to cause significant trends
and mean shifts in an otherwise trendless time series. Note that
Session 5A: Cyberphysical CCS’18, October 15-19, 2018, Toronto, ON, Canada 826
Figure 8: Detection of various attacks on the ultra-filtration feed water tank level sensor signal LIT301 (left) and the water pH
analyzer sensor signal AIT202 (right) performed on the SWaT testbed.
after the DA2 attack has been detected, the departure score drops
at the same time that the sensor recovers the original behavior.
4.3 EXP. III: Detection of SWaT Attacks
In EXP. III, we run pasad on the SWaT dataset captured from a
scaled-down version of a waste-water treatment plant described
in §3.2. Figure 8 shows the evolution of two sensor signals, the
ultra-filtration feed water tank level (LIT301) and the water pH analyzer (AIT202), and the corresponding departure scores computed
by pasad. The time intervals during which the testbed is being
actively attacked are highlighted in red.
Pasad is process-agnostic. The fact that pasad performs well
on data collected by a third party, where we had little to no insight
into the underlying process and the performed attacks, ascertains
the validity of our claim about the applicability of our method to
a wide range of processes. As shown in Figure 8, pasad is able
to detect attacks on ICS that were performed in a realistic setting
and had actual impact on a physical process. Initially, training
was performed on separately provided sensor readings that were
declared normal. The measurements used for testing were generated
while the testbed was subject to a series of attacks, the great majority
of which were detected by pasad including, curiously, attacks that
caused no apparent change in the behavior of the LIT301 sensor
(left). Note that the AIT202 signal (right) slowly drifts away from
its normal range after the attack onset and does not return to its
desired setpoint around 8.4 and, correspondingly, the departure
score remains consistently above the threshold.
4.4 EXP. IV: Comparison with the AR Method
We further evaluate pasad by comparing it with the popular AutoRegression method. An AR model of order p states that at a given
time k, the sensor value yk may be predicted by computing yˆk as a
linear combination of the previous p values plus an error term [6].
As recommended in [51], we extend the stateless AR statistic rk
into a stateful one by computing an additional CUmulative SUM
(CUSUM) statistic, defined as S0 = 0, Sk+1 = (Sk + |rk | −δ )
+, where
(x)
+ means max(0, x) and δ is a constant chosen such that the expected value of |rk | − δ < 0 under normal conditions. To estimate
Figure 9: Both pasad and the AR method successfully detect
the direct damage attack DA2.
Figure 10: Unlike pasad, the AR method fails to detect the
stealth attack SA2.
the coefficients and the order of the model, we leverage the opensource implementation used in [22] to detect stream deviations in
the process variables of water treatment plants.8 The outcome of
the comparison is presented in Figures 9 and 10.
Pasad outperforms AR in both attack scenarios. The comparison conducted in EXP. IV indicates that pasad outperforms the
AR-based technique. Both methods were applied on the same time
series under the same attack scenario, and the same subseries was
8Available at: https://github.com/RhysU/ar
Session 5A: Cyberphysical CCS’18, October 15-19, 2018, Toronto, ON, Canada 827
Figure 11: Pasad is applied on a one-month long normal
data and only a few false alarms were observed.
used for both training pasad and inferring the AR model order and
coefficients. In Figure 9, it is evident that although both methods
are able to successfully detect the direct damage attack, pasad’s
departure score behaves statistically better in detecting the attack
than the AR-based CUSUM statistic. More specifically, pasad exhibits a more stable behavior in terms of low variance under normal
conditions, and then reacts more promptly to the changes in the
time series. More notably, Figure 10 succinctly shows how unlike
pasad, the AR method fails to detect the stealthy attack.
4.5 EXP. V: Validating the Choice of Threshold
Given that the TE process takes quite some time to reach an unsafe
state [29], we choose a threshold level as defined in §2.9, so that
an attack may be detected in reasonable time, while not raising
any false alarms. In EXP. V, pasad is applied on attack-free sensor
measurements from the TE process (Figure 11). The first 20 hours
were used for training and estimating the signal subspace. Afterwards, the threshold was chosen to be just above the maximum
value attained during the first 40 hours, and the behavior of the
departure score was examined over the remaining validation period.
Pasad maintains a low false positive rate. The purpose of
choosing the threshold level as defined in §2.9 is to minimize the
number of false alarms, which if intolerably high, may hinder the
deployment of pasad in practice, while achieving a reasonable
time to detection. The goal of this experiment is to rationalize this
choice by examining the behavior of the departure score over a
relatively long period (roughly one month). The behavior of the
departure score was monitored over a validation period spanning
approximately 28 days (in simulation time). Then, it was observed
that indeed there were but few false alarms as shown in Figure 11.
4.6 EXP. VI: Experimenting with Real Data
In the final experiment, we investigate the applicability and deployability of pasad in a real-world setting. The data used in this
experiment was collected from an operational water distribution
plant. As described in §3.3, pasad was run on limited-resource
hardware along with packet-capturing, process-data extraction,
and buffering mechanisms. Figure 12 displays the detection results
of this experiment, where pasad was tested on data extracted from
Table 1: Pasad’s parameters for the experiments (see §2.9).
Description N L r
EXP. I
SA1 10000 5000 26
SA2 1700 850 3
SA3 10000 5000 16
EXP. II DA1 10000 5000 16
DA2 10000 5000 43
EXP. III SWaT LIT301 30000 5000 10
SWaT AIT202 30000 5000 10
EXP. IV PASAD vs AR (1) 2000 1000 12
PASAD vs AR (2) 2400 1000 14
EXP. V False Alarms 2000 1000 16
EXP. VI Real case (1) 1000 500 13
Real case (2) 50 15 9
a continuous register (left) and from an attribute register (right).
Pasad is applicable to real-world scenarios. We applied pasad
on network traffic extracted from a real ICS, where our aim was to
explore how well it would behave in a real-world setting. Therefore,
we focused more on how effectively pasad could handle irregularities in the data, and less on their actual causes. The results obtained
in this experiment seem to confirm our observation about low false
alarm rate. As can be seen in Figure 12, pasad was tested over a
period of roughly 106 days with data from a real system, which
is considerably longer than what has previously been used in related research papers (e.g., 14 days in [22]), during which only few
alarms were triggered. We argue that whether these alarms should
be considered true or false depends on whether the operators are
interested in knowing about such abrupt process changes as the
ones shown in the figures.
5 RELATED WORK
The anomaly-based intrusion detection problem in the context
of ICS has recently gained increasing attention. In a recent survey, Urbina et al. [51] presented a systematic literature review on
physics-based attack detection in control systems. Two popular
methods that were used by the papers they surveyed are the Linear
Dynamic State-space (LDS) and the Auto-Regressive (AR) models.
System identification techniques can be used to create an LDS
model of the physical process. In [51], an LDS model with a time
delay was used to detect attacks on the water’s pH level using the
SWaT testbed [36]. Shoukry et al. [46] used the model together
with a χ
2
anomaly detection statistic to build an authentication
scheme (PyCRA) that they used to detect attacks on various kinds of
active sensing subsystems. The same model was also used to detect
spoofing attacks that can take control over an unmanned aircraft
in [27], and to detect false data-injection attacks on state estimation
in electric power grids in [35]. Cárdenas et al. [8] developed several
attacks (Surge, Bias, and Geometric) on the TE process, and then
used the LDS model together with a non-parametric CUSUM statistic for detection. Hadžiosmanović et al. [22] used the AR model,
together with Shewhart control limits, to detect stream deviations
in the process variables of operational water treatment plants.
Session 5A: Cyberphysical CCS’18, October 15-19, 2018, Toronto, ON, Canada 828
Figure 12: The behavior of pasad while performing on 106-day-long process data, corresponding to a continuous register (left)
and an attribute register (right), extracted from network traffic of an operational water distribution plant.
Approaches that use machine learning and data mining have
been considered as well. Feng et al. [15] propose a multi-level
anomaly-detection scheme where they combine a Bloom filter with
a Long Short-Term Memory (LSTM) network to detect malicious
traffic in a gas pipeline SCADA dataset. One-class classification
techniques are evaluated on the same dataset in [40] where the
authors consider Support Vector Data Description (SVDD) and kernel Principal Component Analysis (kPCA) for detecting intrusions
in pipeline SCADA systems. Xiao et al. [54] use an LSTM neural
network to detect malicious code executions on PLCs through a
side-channel analysis of power consumption. Junejo and Goh [26]
apply nine state-of-the-art machine-leaning classifiers to detect
attacks on the SWaT testbed. Pan et al. [42] applied a so-called
common path data mining technique on power system measurement data and audit logs that learns patterns and then classifies
the system behavior over time into different scenarios. Clustering
techniques are proposed in [28, 31] to detect attacks on the TE
process targeting sensor measurements. Kiss et al. [28] considered
the Gaussian mixture model to form sensor clusters and showed
that the Gaussian model outperforms the k-means clustering algorithm for this particular problem. Krotofil et al. [31], on the other
hand, considered an information-theoretic approach to form clusters of correlated sensors by discretizing sensor values to build
discrete probability distributions and then using Shannon’s entropy
to perform implausibility checks on the sensor readings.
While LDS model-based techniques may accurately detect process misbehaviors, as stated in §1, they are difficult to build [15],
and require a highly detailed description of the process that is not
always available [28]. By contrast, pasad does not require prior
knowledge about the physical process as it learns the intrinsic dynamics of the system purely from historical sensor data. While
machine learning methods do not require a model of the physical
process, they involve a feature extraction and engineering phase,
where system-dependent features need to be selected for training.
Feature selection is tricky, hard to automate, and finding the best
(most representative) features require a great deal of tuning and
cross-validation. Moreover, the fact that features are constructed
by combining various process variables and then transformed into
high-dimensional feature spaces makes it difficult to identify the
whereabouts of the attack and affects the interpretability of the
detection results. By contrast, pasad is specification-agnostic and
uses easily available raw sensor data for training and monitoring.
Given that sensors in cyber-physical systems are intricately correlated and naturally fall into different clusters, we find that the
work on identifying spoofed sensors using clustering techniques
complements, rather than competes with, our approach.
To our knowledge, the only method in the related literature
that monitors solely raw sensor measurements to detect attacks on
control systems based on learned historical system dynamics is the
AR method used in [22]. In §4.4, we presented a comparison with
this method and showed that the results were in favor of pasad.
In particular, we showed that our method is less sensitive to noise
and is thus able to detect covert attacks in sensor signals that are
undetectable by AR.
6 CONCLUSION
Ensuring the security of cyber-physical systems requires the consideration of all aspects of their operation. What makes them fundamentally different from traditional IT systems is that they interact
with the physical world. Accordingly, these systems are exposed
to attacks that aim to cause tangible impact on the underlying
physical process. We therefore acknowledged the importance of
implementing intrusion detection capabilities at the process level
as an advanced line of defense, and as a complementary measure to
the classical solutions implemented elsewhere. We approached the
problem by introducing a novel specification-agnostic technique
that is capable of detecting stealthy attacks by monitoring time
series of sensor measurements for structural changes in their behavior. We validated our approach by carrying out extensive tests
on new carefully crafted attacks in a simulation setting using the
popular TE model, a dataset generated by a physical ICS testbed,
and on data from a real ICS.