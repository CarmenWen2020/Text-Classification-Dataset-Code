Blockchains, and specifically smart contracts, have promised to create fair and transparent trading ecosystems.Unfortunately, we show that this promise has not been met. We document and quantify the widespread and rising deployment of arbitrage bots in blockchain systems, specifically in decentralized exchanges (or "DEXes"). Like high-frequency traders on Wall Street, these bots exploit inefficiencies in DEXes, paying high transaction fees and optimizing network latency to frontrun, i.e., anticipate and exploit, ordinary users' DEX trades.We study the breadth of DEX arbitrage bots in a subset of transactions that yield quantifiable revenue to these bots. We also study bots' profit-making strategies, with a focus on blockchain-specific elements. We observe bots engage in what we call priority gas auctions (PGAs), competitively bidding up transaction fees in order to obtain priority ordering, i.e., early block position and execution, for their transactions. PGAs present an interesting and complex new continuous-time, partial-information, game-theoretic model that we formalize and study. We release an interactive web portal, frontrun.me, to provide the community with real-time data on PGAs. We additionally show that high fees paid for priority transaction ordering poses a systemic risk to consensus-layer security. We explain that such fees are just one form of a general phenomenon in DEXes and beyond-what we call miner extractable value (MEV)-that poses concrete, measurable, consensus-layer security risks. We show empirically that MEV poses a realistic threat to Ethereum today. Our work highlights the large, complex risks created by transaction-ordering dependencies in smart contracts and the ways in which traditional forms of financial-market exploitation are adapting to and penetrating blockchain economies.

SECTION I.Introduction
Cryptocurrency exchanges today handle more than $10 billion in trade volume per day. The vast majority of this volume occurs in centralized exchanges, which hold custody of customer assets and settle trades. At best loosely regulated, centralized exchanges have experienced scandals ranging from high-profile thefts [28] to malfeasance such as price manipulation [18]. One popular alternative is what is called a decentralized exchange (or "DEXes").1 In a DEX, a smart contract (a program executing on a blockchain) or other form of peer-to-peer network executes exchange functionality.

At first glance, decentralized exchanges seem ideally de-signed. They appear to provide effective price discovery and fair trading, while doing away with the drawbacks of centralized exchanges. Trades are atomically executed by a smart contract and visible on the Ethereum blockchain, providing the appearance of transparency. Funds cannot be stolen by the exchange operator, because their custody and exchange logic is processed and guaranteed by the smart contract.

Despite their clear benefits, however, many DEXes come with a serious and fundamental weakness: on-chain, smart-contract-mediated trades are slow.2 Traders thus may attempt to take orders that have already been taken or canceled but appear active due to their views of messages sent on the net-work. Worse still, adversaries can frontrun orders, observing them and placing their own orders with higher fees to ensure they are mined first.

Past work has acknowledged "transaction ordering dependence" as an anti-pattern and vector for potential frontrunning [22], [25]. Unfortunately, these analyses have previously proved overly broad: virtually every smart contract can be said to have some potential dependence on transaction order, the majority of which is benign. As a result, effective practical mitigations for these issues have failed to materialize, and few deployed smart contracts feature ordering protections. Other work has focused on systematizing knowledge around smart contract frontrunning [15], including citing early public versions of this work, but has not measured the size of this economy or formalized its connection to protocol attacks.

In this work, we explain that DEX design flaws threaten underlying blockchain security. We study a community of arbitrage bots that has arisen to exploit DEX flaws. We show that these bots exhibit many similar market-exploiting behaviors— frontrunning, aggressive latency optimization, etc.—common on Wall Street, as revealed in the popular Michael Lewis exposé Flash Boys [24]. We explore the DEX design flaws that spawned arbitrage bots, measure and model these bots’ behavior, and illuminate systemic smart-contract ecosystem risks implied by our observations. Our main focuses are:

Pure revenue opportunities: A specific sub-category of DEX arbitrage representative of broader activity, these are blockchain transactions that issue multiple trades atomically through a smart contract and profit unconditionally in every traded asset. We choose these opportunities as a focus because their simplicity makes them especially amenable to study and measurement. We experimentally determine a lower bound on this economy of over USD 6M to date and describe its participating exchanges and bots.

Priority gas auctions (PGAs): Because pure revenue opportunities offer unconditional revenue, arbitrage bots often compete against each other by bidding up transaction fees (gas) in what we call PGAs. We formally model bot PGA behavior and observe a cooperative equilibrium. We show that empirical measurements of the evolution of bot PGA strategies validate key features of our model.

Miner-extractable value (MEV): We introduce the notion of MEV, value that is extractable by miners directly from smart contracts as cryptocurrency profits. One particular source of MEV is ordering optimization (OO) fees, which result from a miner’s control of the ordering of transactions in a particular epoch. PGAs and pure revenue opportunities provide one source of OO fees. We show that MEV creates systemic consensus-layer vulnerabilities.

Fee-based forking attacks: We show that OO fees can incentivize miners to mount forking attacks. While fee-based attacks were previously studied theoretically in Bitcoin [11], we empirically demonstrate a current, realistic threat in Ethereum.

Time-bandit attacks: We show that high-MEV regimes in general lead to a new attack in which miners rewrite blockchain history to steal funds allocated by smart contracts in the past. We call these time-bandit attacks. Our experiments show that MEV from pure revenue profits and PGA bot fees suffice to enable time-bandit attacks on today’s Ethereum.

Our results are surprising for two key reasons.

First, they identify a concrete difference between the consensus-layer security model required for blockchain pro-tocols securing simple payments and those securing smart contracts. In a payment system such as Bitcoin, all independent transactions in a block can be seen as executing atomically, making ordering generally unprofitable to manipulate. Our work shows that analyses of Bitcoin miner economics fail to extend to smart contract systems like Ethereum, and may even require modification once second-layer smart contract systems that depend on Bitcoin miners go live [23].

Second, our analysis of PGA games underscores that protocol details (such as miner selection criteria, P2P network composition, and more) can directly impact application-layer security and the fairness properties that smart contracts offer users. Smart contract security is often studied purely at the application layer, abstracting away low-level details like miner selection and P2P relayers’ behavior in order to make analysis tractable (e.g. [8], [20], [38], [39]). Our work shows that serious blind spots result. Low-level protocol behaviors pose fundamental challenges to developing robust smart contracts that protect users against exploitation by profit-maximizing miners and P2P relayers that may game contracts to subsidize attacks.

To illuminate the behaviors explored in this paper, we release a web dashboard, frontrun.me, that presents PGA data in real time. We open-source all associated code and hundreds of gigabytes of raw data on the Ethereum PGA economy (with processed data).3

We hope our efforts in general offer insight into the broad, application- and consensus-layer risks created by ordering dependencies in smart contracts and into the effects of traditional financial-market exploitation on blockchain consensus.

SECTION II.Background
We now provide background required to understand PGAs. We assume basic background on smart contracts and tokens, which we provide in Appendix A. We focus on the Ethereum smart contract system, though our results generalize.

A. Gas and Fees in Ethereum
An Ethereum transaction either sends money to a non-executing account address or sends input data (and possibly money) to a smart contract address, representing a program stored in the network’s state. Transactions are gossiped to all of the nodes in the underlying peer-to-peer network to signal their availability for inclusion in a future mined block. Transactions can be in one of three states: unconfirmed and not yet mined, confirmed and considered to have been executed, or rejected as invalid by the network of Ethereum peers.

Ethereum transactions consume gas, a pseudo-currency reflecting the number of computational steps performed by a miner (and other network nodes) executing a transaction. Ethereum contracts may contain complex logic, loops, etc., so their gas consumption can only be determined via execution. Ethereum meters gas consumption via a fixed mapping from contract op-codes to units of gas [37].

Every transaction submitted to the network for mining specifies a gas price, the per-gas-unit rate the sender will pay in Ether (ETH). The gas price times the units of gas consumed determines the fee in ETH paid by the transaction sender to the node that ultimately mines the transaction. (Bitcoin fees, by contrast, depend simply on transaction byte lengths.)

Transactions must also specify a gas limit, the maximum number of steps a network node should attempt before rejecting a transaction. The gas limit prevents infinite loops and other DoS vectors, and allows immediate verification that a sender has adequate available funds to pay the transaction fee—up to gasPrice • gasLimit ETH.

Clients can also perform what is called a "gas replacement" transaction, resubmitting a transaction with a higher transaction fee (gasPrice • gasLimit) in the hope that miners will more quickly incorporate the transaction into a block. The mechanism for doing this is nonce-based. Each transaction issued on the network carries a nonce, and valid canonical blockchains must only include one transaction per (account, nonce) pair on the network. When a user reissues an unconfirmed transaction with the same (account, nonce) pair but a higher gas price, a miner will prefer the reissued transaction—with its ostensibly higher transaction fee—to the replaced one.

B. Continuous-Limit Exchanges
Classic exchanges for trading stocks, commodities, and even cryptocurrencies generally share an accepted and common exchange design known as a continuous-limit orderbook. Such an orderbook consists of a list of all open offers from buyers and sellers in the system. Prospective buyers place a limit buy order, which specifies a maximum price at which they are willing to buy an asset; sellers correspondingly place limit sell orders. A centralized counterparty, the exchange operator, matches buyers and sellers, completing transactions automatically when there is a sell order on the books with a lower price than a buy order on the books. Orders are matched and / or placed on the books continuously by the exchange operator, which processes orders as quickly as possible in the order they are received. As soon as orders match, they are processed by the operator and trigger balance changes.

C. Decentralized Exchanges (DEXes)
DEXes manage continuous-limit order books using smart contracts. Traders / users hold their assets on chain and the smart contract plays the traditional role of exchange operator.

Order books are typically maintained off-chain. In some DEX designs, a counterparty selects a fresh order in the order book and presents it to the smart contract with a signed counterorder. The smart contract executes the order and counterorder, clearing the order from the order book. Traders themselves thus perform order matching. This approach is used by Etherdelta and some applications of the 0x protocol. In an alternative approach, used by, e.g., IDex and Paradex, the exchange itself performs matching off chain and submits order / counterorder pairs to the smart contract for processing.

A more radical DEX design, called an automated market maker [3], bypasses order books altogether. The DEX consists of a smart contract that itself holds a reserve of tokens and/or Ether. Consider two assets A and B. The contract allows a user to trade between A and B at any time using its reserves as a counterparty, at a set rate. If a user buys A using B, the price of A denominated in B offered by the smart contract for the next trade is increased. If a user instead sells A for B, the price decreases. In this way, single parties can trade without counterparty discovery or matching. Consequently, constant arbitrage between these and other exchanges is required to keep the rate offered in lockstep with the market rate for a commodity. Uniswap [34] and Bancor [1] are examples of such exchanges.

D. Frontrunning and Profits through Arbitrage
Traditional exchanges experience a classic form of predatory market behavior called frontrunning [4]. In regulated markets, frontrunning is often illegal, and has resulted in prosecutions [26] and tarnished the reputations of financial institutions caught practicing it.

Frontrunning generally exploits information asymmetries created by power structures within a financial structure, e.g., brokers having privileged access to user information. Because there is no single party playing the role of a broker in decentralized systems, information asymmetries can arise for actors in advantageous positions in underlying infrastructure.

Frontrunning can also occur based on changes in public market information (for example, reacting to breaking news that impacts stock prices). In this form, it is not only legal, but serves as the basis of a multi-billion-dollar high-frequency trading economy. One potential source of profit is price discrepancies across exchanges trading the same or correlated assets. Another is information asymmetries in the speed of processing or interpreting news.

Automated market bots from high frequency trading firms compete to profit from both at extremely high speed. They regularly build physical networks costing billions of dollars and approaching speed-of-light transmission across considerable distances. Many economists view this behavior as a zero-sum game that profits exchanges in the long term, and argue formally that the existence of such rents is a fundamental limitation of market design that is a natural consequence of arbitrage opportunities across exchanges [7]. This, however, remains a controversial viewpoint.

We explore both cases where bots frontrun user orders and cancellations directly, e.g., in the event of a typo or market structure weakness, and cases where bots exploit market inefficiencies to extract rent. We argue that both degrade the economic security of the underlying consensus protocol.

SECTION III.From Decentralization to Arbitrage
In this section, we take a deep dive into a particular example of frontrunning, arbitrage, and high-frequency automated trading on a decentralized exchange. This concrete example will provide context for the remainder of our discussions on modeling this market and of its impact on the security of the underlying smart contract systems.

One source of potential profit, price differences, seems inherent in an environment such as smart-contract-based ex-change. Today, blockchains operate with transactions processed in discrete batches (blocks). Furthermore, transactions are inherently dependent and therefore serial: order failures depend on past order attempts, and in some exchanges prices depend directly on order history. With multiple exchanges operating on the same system, it is possible that price differences will occur across exchanges while transactions in a block, and therefore trades on exchanges, are executed sequentially.

A. Smart-Contract-Enabled Trade Atomicity
Smart contract arbitrage opportunities have an additional, distinctive characteristic absent in traditional cross-exchange arbitrage. Because of the atomic batch-based processing of transactions, and because transactions can themselves be initiated by smart contracts, is possible to build bots that trade across exchanges through proxy contracts. These proxy contracts can execute batches of orders sequentially within a single transaction, reverting previous trades by throwing an exception if any trade in the batch fails.

This means arbitrageurs have the opportunity to compose single transactions that execute multiple trades across multiple exchanges atomically, with an all-or-nothing failure model. One example of such a transaction is buying an asset for price x and selling it immediately for price x′ > x; if performed atomically, these transactions together generate guaranteed revenue in the base asset. For example, a smart contract proxy could execute a trade buying a type-X token for 2 ETH, and another selling it for 3 ETH. If both orders are on the books on some decentralized exchange, a smart contract executing both guarantees a revenue to the arbitrageur of 1 ETH.

In traditional cross-exchange arbitrage, trades are viewed probabilistically, as there is a high likelihood that one of two trades will succeed while the other fails. This makes smart-contract-based arbitrage in many ways simpler to observe, analyze, and study than traditional cross-exchange arbitrage, as bot intent is often explicit in order requests.

In our measurements, we focus on a small subset of these multi-trade arbitrage opportunities, which potentially involve multiple decentralized exchanges. We restrict our focus to pure revenue opportunities. In these opportunities, a single smart-contract based transaction executes multiple trades across one or more exchanges, and the transaction generates revenue for the trader in every traded asset. A range of more complex and nondeterministic bot behaviors exist, described in our full paper version [14], but they are outside the scope of this work.

B. Pure Revenue by Example
Figure 1 shows one example of a pure revenue transaction, executed on November 15, 2018. In this transaction, two trades are executed on a decentralized exchange, TokenStore, which features a design conceptually similar to that of Etherdelta. The first executed trade buys Free Coin, an obscure token.4 By inspection, this difference in rates is a clear result of someone using the exchange API and committing an off-by-one error, offering to buy tokens at 10x the market rate. This created a cross in the order book (sell order at more than a buy order would pay), which when both executed by the same arbitrage counterparty, generates the flow of funds in Figure 1. While this opportunity probably arose from a typo, a variety of revenue sources exist. For example, inconsistent price feeds, or variance across exchange designs that respond to market movements at different speeds can also create pure revenue.


Fig. 1.
Example pure revenue opportunity observed in Ethereum transaction 0xc889bd13594f75e4dd824f04f0c2ad03896cb7ec6518df02455e9560367bb9c4, exploiting an orderbook cross on the TokenStore DEX. Edges of the same color are generated by a single trade. As a pure revenue opportunity, it generates net profit in both FREE and ETH.

Show All

Note that both orders are executed inside a single Ethereum contract, and are executed in an atomic batch through a smart contract proxy. In general, we model each opportunity as a graph as shown in Figure 1. Edges represent currency flows, and nodes are either exchanges nodes (which receive one currency and output another at the stated exchange rate), or asset nodes (which are either sources or sinks for same-color trade subgraphs, depending on whether they are bought or sold). We label exchange nodes with the exchange name and trade rate, and asset nodes with the asset symbol.

The net revenue in each traded asset is the sum of in-flows minus outflows in the corresponding asset node. In the trade in Figure 1, the revenue for ETH was therefore 0.93 ETH − 0.14123 ETH ≈ .79 ETH, or approximately 267 USD in equivalent value (at November 15, 2018 prices of 338.15 USD per ETH). Approximately 496,000 residual FREE was also left in the arbitrageur’s account, although less significant and liquid than the ETH revenue.

To calculate the transaction profit, we subtract the cost from the revenue, in this case the gas paid by the transaction that was mined for the arbitrageur. Transaction 0xc889…b9c4 paid a gas price of 134.02 Gwei (the canonical unit for representing gas rates; 1 Gwei = 10−9 ETH). The transaction used 113, 265 gas, approximately equivalent to 113, 265 computational steps.

It is worth noting that transactions that cancel their bids can use less gas, as they pay only for attempted execution (execution requires costly computational steps). This will be relevant to later models in Section V-A. Furthermore, complex conditional transactions, price queries, or other computationally intensive order preferences will obviously cost more, making optimizing for gas consumption important in the development of competitive bots. The total cost of this transaction was therefore 113265 • 134.02 Gwei = 0.01518 ETH, or around 5.13 USD at the time of the transaction. The associated profit was therefore ≈ .79 − .01518 = .77 ETH, or 267 USD.

C. PGAs, Ordering Fees, and… HFTƒ
Ethereum transactions are routed in a peer-to-peer gossip multicast protocol by client node software. This means that all transaction information is available to all participants in this network, but earlier to participants with advantageous positions in the gossip topology. Additionally, nodes can simulate the outcome of every transaction given the current or expected system state. Once an arbitrage transaction is submitted, therefore, the sequence of trades it involves is publicly known by the network’s peer-to-peer nodes.

A natural question then arises: how is priority determined between arbitrageursƒ Because each pure profit opportunity carries some computable profit p and is broadcast globally, a competitive game naturally ensues among arbitrage bots to be the first to execute an atomic transaction that exploits the opportunity. The mechanics of the system dictate that all subsequent transactions in the game will fail. How this particular game plays out depends on the peer-to-peer relay network mechanics of the underlying blockchain, as well as mining pool strategies and order book designs in the underlying exchanges. We present a greatly simplified model of this game formally in Section V-A.

In Ethereum, the PGA game we observe consists of transactions issued with the same (account, nonce) pair, expressing a bid to a miner, where the miner is paid gas fees as described in Section II-A. We call this interaction of issuing repeated bids a priority gas auction, or PGA.

To place a bid on an arbitrage opportunity, an arbitrageur simply issues a smart contract transaction with associated gas price g that atomically bundles multiple trades (performing the arbitrage). If they later wish to increase this bid, either for strategic reasons or because they notice a higher bid that would eliminate their profit issued on the peer to peer relay network, they simply reissue the transaction with the same nonce and a higher gas price g′. If two arbitrageurs are bidding against each other, what emerges is essentially an auction, as shown in Figure 2. It is in a miner’s interest to order first whichever transaction offers the highest price (if the miner does not plan on itself arbitraging the market). This approach will encourage arbitrageurs to bid each other up for transaction priority.

Figure 2 shows the action that occurs in such an auction from the point of view of the network. Each row in the associated table is a transaction observed by our Ethereum monitor on the peer to peer network, using the experimental harness described in Section IV. In this example, we see two accounts, 0x6BEc…6542 with nonce 1453 and 0xb8D7…7a3f with nonce 1512, bidding against each other for priority. These accounts issue transactions with ever increasing gas prices: bot 0x6BEc…6542 issues 42 transactions in 13.4 seconds, and 0xb8D7…7a3f issues 43 transactions in 12.1 seconds. In 4.94 seconds, the auction is over. The transaction that eventually ends up mined with priority is shown with a green star, and is transaction 0xc889…b9c4 issued by bot 0x6BEc…6542. This bot is considered the winner, and pays the full gas price to reap the revenue as described in the previous section. The transaction was mined in block 6709727 by the mining pool "MiningPoolHub". The transaction shown in the red square, with hash 0xaa86…85db by bot 0xb8D7…7a3f, is also mined and included in the final block, as each (account, nonce) pair can include one transaction in the next block to be mined as per the protocol. Miners are incentivized to include even failed transactions, as these transactions pay for attempted execution. Note that while the winning transaction used 113,265 gas in execution, the losing transaction paid for 33,547 gas units, a far smaller sum. In game theoretic terms, each auction represents a variant of all pay auction, where instead of paying their full bid, the loser is forced to pay a percentage to the miner.

SECTION IV.Arbitrage Prevalence Measurement Study
We now present empirical measurements of the prevalence of arbitrage. We discuss our methodology (and its limitations).

A. Experimental Setup
We first describe the experimental harness used to observe PGA transactions, displayed in Figure 3. On-chain data is not sufficient to analyze PGAs, as all but the final "winner" transaction are discarded by the network. Furthermore, because transactions are replaced so quickly and nodes don’t propagate replaced transactions, many transactions are never even propagated to all Ethereum nodes.

No tools existed for analysis of unconfirmed and rejected transactions, so we wrote our own. We forked the Go-Ethereum client to record unconfirmed transaction in the mempool. We deployed six geodistributed nodes across multiple data centers, with timestamps synchronized to the nanosecond level by NTP. We collected an observation every time one of the ≈ 256 nodes peered with one of our deployed modified nodes relayed a transaction to us. We collected nine months of data, amounting to over 300 gigabytes, including 708,385,840 unique observations of PGA arbitrage bots. Node locations are shown in Figure 3, although not all nodes were online throughout the experiment. (We ultimately sacrificed timing resolution to reduce prohibitive ongoing costs.)

Because it is technically infeasible to store observations of every Ethereum transaction, we focus on a list of suspected arbitrage bot transactions. This list is seeded with accounts we observe performing pure revenue transactions on the blockchain, and is updated dynamically any time a high-value gas replacement transaction is seen at an order of magnitude over current gas market price. We also built a web interface to manage the uptime of our nodes and associated bot lists.

We supplemented this mempool data we collected on PGAs with on-chain data sourced from Google’s BigQuery Ethereum service (as well as other on-chain metadata, like block times-tamps), allowing us to parse logs for successful transactions and determine their profit. We also used daily price data from coinmetrics.io for USD conversions.

We then developed a suite of Python scripts to combine and analyze this data. These scripts use a heuristic to place all observations on a timeline, identifying a PGA whenever a high-value gas replacement transaction occurs. All transactions in a time interval around this observation are then considered part of the "auction," and broken down per bot. The scripts also aggregate meta-statistics on PGAs, calculating strategy and latency trends in observed bots. This data is used to generate both our web interface and the figures in this paper. We release all source and processed/derived data in CSV format for further analysis by the community on our Github.


Fig. 2.
One example PGA that was observed over the Ethereum peer-to-peer network, resulting from the profit opportunity in Figure 1. The top graph shows the gas bids of two observed bots over time, while the bottom table details the first and last two bids placed by each bot and the two mined bids (center).

Show All


Fig. 3.
Deployed PGA measurement infrastructure architecture.

Show All

1) Instrumentation Limitations:
The above instrumentation has limitations that may affect our data quality. We describe them at a high level here, and mention any impact these limitations may have on our derived results throughout.

It is possible that a transaction will be replaced before reaching our nodes, though this seems unlikely, since each of our observed transaction tends to have hundreds of associated observations. More critically, our time-slicing method for identifying PGAs may lump together unrelated bot activity into a single "auction." Manual inspection suggests that be-cause auctions are relatively infrequent (every few hours), the majority consist of correlated bot activity. Time-slicing could also harvest unrelated transactions from other arbitrage bots that are not PGA behavior; we prune these in our aggregate statistics by only including bots that have placed at least 4 "bids" in an observed PGA, and as a result may lack data on bots that place < 4 bids. We also may miss bots whose addresses are not in our PGA lists, leading to missing bidders in certain auctions.

Lastly, our instrumentation calculates pure revenue opportunities by parsing transaction logs on supported exchanges for transactions that contain more than two trades executed by a smart contract. We support only a limited subset of popular DEXes, omitting revenue opportunities on unsupported exchanges. Because we aim to establish a lower bound (i.e. a potentially too conservative result), we feel this is acceptable. Our supported exchanges include the top five DEXes by sustained volume at the time of infrastructure development.

This subset still proves sufficient to provide substantial insight on the PGA market not afforded to regular nodes in a blockchain context, highlighting the limits of the "transparency" afforded users by these systems.

B. Observations
We now describe key results of our data gathering.

Figure 4 shows the size (breadth) of the arbitrage market, denominated in ETH. We choose to use ETH denominations in the rest of the work as they display a relatively consistent distribution, as shown in the figure. USD revenues are more volatile, as is visible in the market revenue graph, available in the full version of this work at [14].


Fig. 4.
Lower bound size of the observed pure revenue market, ETH. Black line shows a 14-day moving average of market size, while the dotted orange line plots cumulative market size. Scatter plot colorings/shading indicates number of daily pure revenue trades. The pink vertical line shows the release of [2] associated with early versions of this work becoming public.

Show All

This distribution is consistent with common understanding of arbitrage as sourced from market structure design, as ETH is the most liquid traded token on this market. As seen in this graph, after the initial market development in late 2017, a relatively active period of arbitrage occurred during which bots often performed over 1,000 daily trades for a daily revenue of 10-100 ETH. Later, the market matured into a more steady and consistent profit distribution, with 1-10 ETH available for arbitrage daily. Recently, an increasing number of pure revenue trades is observed, showing the trend of the DEX market to smaller retail transactions and more efficient market designs, decreasing the average opportunity size but presenting more frequent opportunities to a more efficient bot market. The limitations in our instrumentation mean, however, result in an underestimate of market size, as described in Section IV-A1.

Interestingly, Figure 4 also highlights the origin story of this work. In August 2017, we published a preliminary report on the dangers of decentralized arbitrage and associated bot designs in [2]. The date of our blog release is shown as the vertical line on the graph. As part of this post, we actively probed the Etherdelta orderbook for pure revenue opportunities, measuring available profit at 4,472.75 USD / day or 1.6M+ USD / year. We executed our own trading bot to confirm the technical feasibility of profit, observing a total 58% rate of success in capturing pure revenue for our own bots (soon outcompeted by other bots after the release of our post). We calculated the expected daily profit of an arbitrage bot at the time, before most decentralized exchanges were online, at 0.32 ETH/day •58.3% success •45 − 0.004• (1 − 58.3%) failure cost * 45 observed opportunities = 8.32 ETH (2500 USD) daily profit. Note in Figure 5 that the majority of profitable bots today joined shortly after our public release, which inadvertently sparked a thriving cottage bot economy! Appendix B breaks down this economy by the exchange whose users profit these trading bots.

Figure 5 shows the top ten transaction senders we observe in the competitive pure revenue market, and their associated profits. The cost we measure for these bots includes only the gas fees for the pure revenue transactions they make, and thus may underestimate their total fees (e.g. for failed transactions). We also do not include any bots that do not trade on our supported exchanges. Note that we make no effort to group transaction senders together to consolidate multiple senders operated by a single entity; some heuristics are available for doing this (e.g. monitoring use of similar arbitrage contracts), but we leave such aggregation to future work.

This figure suggests an oligopolistic market, with single bots often dominating the profit space for extended time periods (for example, 0xaa24… dominates the recent pure revenue space, where 0x0000… experienced a long period of dominance through late 2017 and early 2018). This diagram also shows the behavior of top bots exiting the market after failing to update their strategies, for example 0xa53… exiting around 03/18.

Interestingly, the revenue and profit graphs for these bots have nearly identical shapes (the revenue graph is available in the extended version of this work [14]). Profit-to-revenue ratios are relatively well distributed, with a median of 65% of the revenue of an opportunity captured by the winning bot according to our profit heuristics. Most opportunities are also uncontested, providing the bots a steady stream of income. We analyze one hypothesis explaining this uncontested nature of PGAs in Appendix C.

Thusfar, we have focused exclusively on pure revenue opportunities, which may lead to PGAs or may be claimed by a single bot uncontested. A natural question becomes whether the profitability of opporutnities persists in a competitive market, or whether competition among bots creates a generally unprofitable zero-sum or negative-sum environment.

Figure 6 describes the breakdown between the profit and revenue of observed pure revenue opportunities involved in priority gas auctions, indicating that at least one bot placed a competitive gas replacement bid to capture such an opportunity. While there is a spike around 0 profit, indicating that many PGA opportunities are zero or negative sum for their players, the vast majority of these opportunities see relatively insignificant costs, and the profit distribution still provides a mean profit to winning bots that offers them a majority of associated revenue. This confirms our suspicious that bots may be engaging in uncoordinated cooperation to maintain the profitability of the PGA market at the expense of miners, which we model fully in Section V.

One final competitive dynamic present in the PGA market concerns the bots’ optimizations surrounding fees paid to miners, in which the arbitrage bots exploit several inefficiencies in Ethereum itself, first disclosed by the authors of this paper and subsequently exploited by the bot community, to attempt to shortchange miners. Further details, as well as a description of how our theoretical model suggests effects that enhance this downward pressure, are enumerated in Appendix D.


Fig. 5.
Profit (revenue minus estimated costs) for pure revenue bots over time. We observe that the median profit is 65% of the size of the pure revenue opportunity across 138,948 observed pure revenue transactions.

Show All


Fig. 6.
Distribution of profit and revenue in competitive PGAs. We focus on amounts from -1 to 2.5ETH, which by inspection comprise the majority of the distribution body. 29 of 2,135 profits fall outside this range.

Show All

SECTION V.Priority Gas Auction (PGa) Modeling
To shed light on the strategies we observe in practice, we present a formal model for PGAs in this section. We then explain the notion of advantage that we use to understand strategies’ effectiveness, and study several classes of observed strategies in the context of our model.

A. Model properties
We model a PGA as a sequential game among a set of n players {P0,P1,…,Pn−1} who bid against one another to obtain a payoff of $1.5

This game has the following properties, which model blockchain dynamics:

a) Continuous time:
Players act in continuous time, rather than discrete rounds (as in typical extensive-form games). This is because blockchain networks are asynchronous.

b) Imperfect information:
Players eventually see one another’s bids, but not immediately, a feature modeling blockchain network latency. Player Pi observes other players’ bids after some fixed time △i. Players may have differing latencies, small ones conferring a competitive advantage.

We measure latency as a relative figure to the latency of the miners, which are typically the best connected nodes in the network. Thus ∆i = 0 indicates that Pi has a superior network position and observes other player’s bids with no additional delay over that of the miners.

c) All pay:
In PGAs, losing players pay gas costs for their failed transactions. Our model captures this cost by having a losing player P pay ℓ($blast ), where $\blast  is the last bid made by P and ℓ() is a loss function.6 This type of all-pay auction in which players can submit multiple bids is known as a dollar auction [32], in which not only the winner, but losers pay. In our study, we typically observe auctions that are partial all-pay, i.e., ℓ($blast )<$blast .

d) Probabilistic auction duration:
The auction terminates at a randomly determined time, namely when the next block is mined. For proof-of-work blockchains such as Ethereum, we model a block interval as a random variable D, which is exponentially distributed.

e) Rate-limited bidding:
A player cannot raise her own bids continuously, but must wait a short interval δ to do so. This reflects throttling that blockchain peer-to-peer networks perform to prevent flooding attacks. As miners are always free to include the highest paying transaction that they observed, players can only raise bids, not lower them (a natural auction feature that holds in Ethereum PGAs).

f) Minimum bid increments:
Players do not have freedom to raise bids by arbitrary increments. Instead, there is a minimum bid raise, ι, measured as a function of the player’s previous bid. This matches Ethereum dynamics in which one can replace their transaction with another one, but it will only be relayed by the peer-to-peer network if the gas price has increased by a minimum threshold. Parity, the most common Ethereum node software, enforces a default minimum increment of 12.5%.

In practice, network latencies and transaction-interval times are stochastic, but we assume constants ∆i and δ to simplify our analyses. We believe that this simplification does not significantly affect strategy outcomes.

Continuous-time, imperfect-information games have seen only limited study. Most similar to our work is FlipIt, a continuous-time game with imperfect information that models advanced persistent threats (APTs) [35]. We are unaware of any prior work on such games with random play times or in general with the structure of PGAs.

B. Formal PGA model
For simplicity, we focus on games where n = 2, i.e., that involve a pair of players (P0,P1). Our formalism, though, can be generalized to any n. The restriction to two players is supported by our empirical observations, which shows that many PGAs are played out between two players.

We let b=(t,$b;i) denote a bid by player Pi. Here t is the time at which the bid is placed, $b is the bid price, and i ∈ {0, 1} is the identity of the bidder.

We denote by b* the sequence of all bids published to the network by all players at the current time t∗, and b the full sequence of all bids made by all players up to the point at which the auction ends. We let b[t] denote b at a particular time t. We let bi and its variants (e.g., bi[t]) denote a bid sequence of player Pi.

A strategy Si for player Pi is a procedure for participating in a PGA, and may be probabilistic ("mixed," in game-theoretic terminology). Si takes the following form, where input t∗ is the current time and σi is the current local state of Pi:
(a,tw,,σ′)←SSi(b∗,t∗σ).
View Source

The output a is an action by Pi. Either a = b for some bid b, or else a = ⊥, indicating the player is not placing a bid. The output σ′i represents an internal state update for the player.

Finally, tw,≥t∗ is a wake time. This is the time when Pi schedules its next execution assuming no bids appear in the meantime. The use of wake times means that w.l.o.g., we can assume that a player always emits a bid b=⎛⎝⎜t∗,$b;i⎞⎠⎟, i.e., for immediate publication. We also assume that when executed at an emitted wake time, a player always emits a bid; a player that chooses not to schedule a bid can set tw,= ∞.

a) Game execution:
A game between P0 and P1 involves an execution Exec(S0, ∆0, S1, ∆1[D, ℓ()]) of their respective strategies, and accounts for players’ imperfect information due to their latencies. We specify the procedure for Exec in the full version of our paper [14].

b) Payoffs:
Players (bots) compete for financial rewards. We measure these rewards using the standard game-theoretic notion of a payoff. An execution Exec(S0, ∆0, S1, ∆1[D, ℓ()]) outputs a pair ($0,$1). These are the respective payoffs (profits or losses) of P0 and P1.

We define the payoff of S0 against S1 as follows:
POExec(S0,Δ0)(S1,Δ1)[(D,ℓ())]=E⎡⎣⎢⎢⎢⎢⎢⎢$$r0∣($$r0 ,$$r1)←$$ Exec (S0,Δ0,S1,Δ1,[D,ℓ()]).
View Source

We refer to a strategy S0 as null-profitable if POExec(S0,Δ0)(S∅,∅[(D,ℓ())]>0 when S∅ is the null strategy (i.e., a strategy that never bids and thus its latency is also irrelevant).

C. What’s a good strategyƒ
Subject to their individual latencies, all players have identical strategy spaces, and thus we can directly compare strategies while only considering the latencies of the players that executed them. We define
Advexec (S0,Δ0),(S1,Δ1)(D,ℓ())=POExec (S0,Δ0,(S1,Δ1))[(D,ℓ())]−POExec(S1,Δ1),(S0,Δ0)[(D,ℓ())].
View Source

SECTION VI.Priority-Gas-Auction Strategies
We now report on classes of strategies that we have observed empirically and examine them within the context of our model. Given the large strategy space, we restrict our focus to the most prevalent PGA strategies that we have observed.

We thus consider three classes of strategies. The first two strategies are blind raising and counterbidding, which are often used in competition with one another. We then consider a cooperative strategy in which players take turns bidding. While we don’t claim that we are seeing perfect cooperation (since if we were there would be no need for on-chain bidding at all), we show the cooperative strategy approximates and predicts a large class of behaviors that we have observed on-chain. Finally, we show that under conditions consistent with the PGAs we are observing on Ethereum, there exist Nash equilibria for cooperative strategies.

A. Latency Wars
For all strategies that we consider, our model predicts that players with a lower latency will have an advantage. Validating this feature of our model, we have observed empirically that players are consistently and substantially reducing their respective latencies over time (Figure 7).

Fig. 7. - 
Evolution of the PGA bots’ latency strategies over time. Each point is the mean latency of a bot in some observed auction on the plotted date. The coloring of dots shows the number of total raises each bot placed in that respective auction. Early in the observed market, the majority of auctions contained 0-10 raises per bot. Over time, these auctions increasingly contained more raises and a lower mean latency. We exclude all observed mean latencies that do not fall between 0 and 1 seconds; there are such latencies, which are the result of the limitations of our monitoring architecture mentioned in IV-A1. The number of opportunities per bot, however, illustrates a trend that is far less vulnerable to instrumentation limitations, as it does not depend on the order or precise timing of observed transactions.
Fig. 7.
Evolution of the PGA bots’ latency strategies over time. Each point is the mean latency of a bot in some observed auction on the plotted date. The coloring of dots shows the number of total raises each bot placed in that respective auction. Early in the observed market, the majority of auctions contained 0-10 raises per bot. Over time, these auctions increasingly contained more raises and a lower mean latency. We exclude all observed mean latencies that do not fall between 0 and 1 seconds; there are such latencies, which are the result of the limitations of our monitoring architecture mentioned in IV-A1. The number of opportunities per bot, however, illustrates a trend that is far less vulnerable to instrumentation limitations, as it does not depend on the order or precise timing of observed transactions.

Show All

B. Blind raising
Blind raising is a simple non-adaptive strategy. Player Pi raises her own bids under a predetermined schedule, and the strategy is invariant to b∗1−i, the history of the other player’s bids. In PGAs that we have observed, this schedule often involves repeated increases by fixed fractional increments (e.g., 12.5%, 21% or 70%). Basic blind raising is thus also deterministic ("pure"). A basic version may be modeled as follows:

Blind raising (S0): P0 emits a bid with amount $b0 at time τ = 0 and $\b0×(1+f)k at time kδ.

At first glance, this strategy, and non-adaptive strategies in general, seem like a bad idea: They fail to exploit information available to the player in b*.

Surprisingly, however, the imperfect information created by network latency means that a non-adaptive strategy can achieve an advantage over natural adaptive strategies. The intuition is this: By playing non-adaptively, a player can publish a bid faster than by waiting to see the opposing player’s bid and reacting to it. We explain below in particular how blind raising can achieve an advantage over a natural, adaptive strategy called reactive counterbidding.

C. Counterbidding
Counterbidding is a strategy in which a player observes an opponent’s bidding strategy and reacts by placing higher opposing bids. A simple example of this strategy is what we call reactive counterbidding, an adaptive strategy that a player P1 might execute against another player P0. The strategy is described formally in Figure 8.

Fig. 8. - 
Reactive counterbidding PGA strategy. is the minimum bid tick, ι is the minimum bid increment, and s is the minimum starting bid. By bidding $\max \left( {\$ {{\text{b}}_1} \times (1 + \iota )} \right.$, ${\mathcal{P}_1}$ ensures that its bid meets the minimum bid requirement and is also higher than ${\mathcal{P}_0}$’s bid. However, it would never make sense for ${\mathcal{P}_1}$’s bid to exceed $1 + \ell \left( {\$ {{\text{b}}_1}} \right)$) as at this point it is more profitable to not bid and instead pay $\ell (\$ {{\text{b}}_1})$.
Fig. 8.
Reactive counterbidding PGA strategy. is the minimum bid tick, ι is the minimum bid increment, and s is the minimum starting bid. By bidding max($b1×(1+ι), P1 ensures that its bid meets the minimum bid requirement and is also higher than P0’s bid. However, it would never make sense for P1’s bid to exceed 1+ℓ($b1)) as at this point it is more profitable to not bid and instead pay ℓ($b1).

Show All

As P0 has interval ≥ δ between bids, reactive counterbidding achieves an interval ≥ δ between the bids of P1.

Many consensus algorithms (e.g., Nakamoto consensus) exhibit D exponentially distributed with mean λ. Under the simplifying assumption that ℓ($b)=$c, we can show the following two observations, which we prove in Appendix E.

Observation 1. Let ∆i = 0 and $r=Advexec(S0,Δ0),(S∅,∅)(D,$c) be the payoff of null-profitable blind raising strategy S0 against S∅. Then for

$$c$$r+$$c<e−λδ,
View Source
as ϵ → 0, reactive counterbidding strategy S1 has positive payoff.

We now show, somewhat counterintuitively, that with the right parameters—specifically, when ∆1 is high w.r.t. δ — blind raising has an advantage over reactive counterbidding.

Observation 2 (Latency Amplification). For ∆1 > δ, there exists a null-profitable, blind raising strategy, S0, such that for any pure reactive counterbidding strategy S1, S0 achieves Advexec(S0,Δ0),(S1,Δ1)(D,ℓ())>0.

D. Cooperation
We now turn our focus to cooperative strategies, which we believe to be a close approximation to a common behavioral pattern we observe in which players slowly alternate raising bids. We demonstrate a cooperative Nash Equilibrium for the PGA game that helps shed light on the most common bidding behaviors that we observed.

Notice that as bids are non-decreasing, with each successive bid that players submit, the maximum profitability of the opportunity decreases. Intuitively then, it is beneficial for all players to decrease the total number of bids in the game.

It is natural then to assume that, whenever possible, players will coordinate out-of-band to split the profits rather than decrease their profits by competitively bidding on-chain. How-ever, by the very virtue of us seeing on-chain PGAs, we know that perfect cooperation does not exist.

We stress that for our cooperative equilibrium to emerge, it’s not necessary that players explicitly coordinate out-of-band, but this behavior can develop organically on-chain. Indeed, we have seen evidence that over time, players have moved closer toward a cooperative equilibrium, which is consistent with well known results in experimental game theory that participants in the wild will converge to an equilibrium over time [10], [30].


Fig. 9.
Grim-trigger cooperative PGA strategy

Show All

a) Grim trigger equilibrium:
We now describe a particular cooperative strategy in which any defection is responded to by immediately bidding the maximum amount, thereby eliminating all profitability from the auction.

This strategy class is similar to the grim trigger strategy that appears in the game theory literature in the context of repeated games [31]. Notice that since PGAs involve successive opportunities to bid potentially in response to the bids of other players, even a single iteration of our auction has elements of a repeated game.

Consider two players who coordinate with the following strategies: at set intervals, players alternate their bids, each time bidding the minimum increase. If any player deviates either by bidding too soon or by raising the bid higher than they are supposed to, the other player will respond by raising their bid such that the game is no longer profitable. This strategy is characterized by following parameters: V is the set of agreed upon times at which bids will be scheduled, and W is the set of agreed upon bid values, such that that W [i] will be bid by the appropriate player at time V [i].

The grim-trigger cooperative strategy is formally described in Figure 9.

As we will see, the knowledge gap due to latency is an important feature when determining if our model has an equilibrium. All defections will eventually be detected, but depending on the latencies, there may still be sufficient time to profit from deviating.

b) Minimum bid raises:
In a cooperative PGA, the main function of bidding on-chain is to alternate bids between players, but all players are incentivized to keep the actual bid price as low as possible to maximize profit. The following observation follows:

Observation 3. In a grim-trigger cooperative PGA, for all i ≤ imax, the optimal choice for bids is W [0] = s and W [i] = W [i − 1] × (1 + ι).

Remarkably as shown in Figure 10, in our observed PGAs, players converge over time to a minimum bid raise of 12.5%, which is the minimum allowed raise in the Parity client. It is known that players in the wild will converge to Nash Equilibria [10], [30] and this on-chain behavior is consistent to a convergence toward elements of cooperative equilibrium.


Fig. 10.
Evolution of the PGA bots’ median raise strategies over time for bots with more than 4 bids in pure revenue PGAs. Note the strategy convergence in the iterated game to almost exclusively the 12.5 (minimum raise) and 15% (deviation from minimum raise) levels. Opportunities below the y = 12.5 line are likely artifacts of bots emitting multiple transactions from globally distributed nodes; these opportunities correspondingly show a bias towards high revenue compared to those using the predicted strategies. We trim outliers and omit points with median raises over 75%; we observe 5 such high-raise outliers of 4,007 total observations.

Show All

We stress that we don’t claim that perfect cooperation is occurring or even that our exact equilibrium is on play. We do claim, however, that players are converging to a more cooperative state, that is approximated by our model, in which they allow opportunities for other players in an effort to maximize their own expected profit over time.

c) Nash equilibrium:
We now present our main result showing that there exist Nash equlibria for a wide range of parameters using the grim-trigger cooperative strategy.

Theorem 1. For parameters consistent with Ethereum PGAs, there exist a grim-trigger Nash equilibria for a 2 player PGA where both players follow a D, W cooperative strategy.

See Appendix E for a formal treatment and a graphical depiction of the equilibrium.

SECTION VII.Miner-Extractable Value and Blockchain Security
PGAs and DEX arbitrage may not seem immediately harmful or relevant to the security of an underlying blockchain. They might simply seem an efficient mechanism for conveying market information among network participants. Unfortunately, we now argue, DEXes in fact present a serious security risk to the blockchain systems on which they operate, i.e., at the consensus layer. In other words, a key result of our work is that application-layer security poses a current and direct threat to consensus-layer security.

In a stable blockchain, block rewards incentivize honest miner behavior. As we show empirically in this section, though, order optimization (OO) fees, or implicit fees a miner is able to reap by leveraging their control of a consensus epoch, can exceed the block reward and instead incentivize forking attacks. To capture OO fees, a miner can reorder users’ transactions and potentially insert their own, reaping profit in Ether directly to their account. For example, a miner could execute the pure revenue transactions described in this work themselves, while still claiming the PGA fees for all the "losing" arbitrage bots attempting to do the same.

OO fees represent one case of a more general quantifiable value we call miner-extractable value (MEV). MEV refers to the total amount of Ether miners can extract from manipulation of transactions within a given timeframe, which may include multiple blocks’ worth of transactions. In systems with high MEV, the profit available from optimizing for MEV extraction can subsidize forking attacks of two different forms. The first is a previously shown undercutting attack [11] that forks a block with significant MEV. The second is a novel attack, called a time-bandit attack, that forks the blockchain retroactively based on past MEV.

Undercutting attacks were previously considered a risk primarily in the distant future, when block rewards in Bitcoin are expected diminish below transaction fees. By measuring the significance and magnitude of OO fees, our work shows that undercutting attacks are a present threat.

Time-bandit attacks are also a present and even larger threat. They can leverage not just OO fees, but any forms of miner-extractable value obtained by rewinding a blockchain. Time-bandit attacks’ existence implies that DEXes and many other contracts are inherent threats to the stability of PoW blockchains, and the larger they grow, the bigger the threat.

A. OO fees: Measurement study
We now lower bound the severity of OO fees in DEXes. We conservatively estimate MEV in this context as the sum of explicit transaction fees and pure revenue OO fees, making our distribution an underestimate of the share of MEV that does not come from explicit fee payments in Ethereum. Note that PGAs themselves are an indirect mechanism for miners to claim OO fees: if miners instead claimed OO fees directly, there would be no incentive to bid in or create a PGA.

Of all blocks since block 3,875,490 (the first block we observed with a pure revenue OO fee from decentralized exchange arbitrage), approximately 3.6% contain at least one pure revenue arbitrage transaction. Of these blocks, 17,897 blocks contain pure revenue OO profits that are < 1% of the total stealable fees, confirming our earlier conclusions that the most frequent pure revenue arbitrage opportunities are for small price differences in the course of normal trading across exchanges. Nonetheless, many blocks do contain substantial pure revenue fees. 36,860 observed blocks contain pure revenue fees that exceed 20% of total stealable fees, 12,002 blocks derive the majority (over 50%) of stealable fees from pure revenue, and 2,517 blocks derive more than 80% of stealable fees from pure revenue.

Occasionally, these fees can be quite high, and can provide substantial short-term miner incentives to orphan blocks or otherwise deviate from the mining protocol. Figure 11 shows the 20 blocks observed on Ethereum with the highest absolute pure revenue OO fees.

Fig. 11. - 
Blocks with the highest pure revenue OO fees observed on Ethereum. As is shown here, OO fees in these blocks dominate both block rewards and transaction fees, often by more than an order of magnitude.
Fig. 11.
Blocks with the highest pure revenue OO fees observed on Ethereum. As is shown here, OO fees in these blocks dominate both block rewards and transaction fees, often by more than an order of magnitude.

Show All

As an example, the highest block, block 7029147 (https: //etherscan.io/block/7029147), contained an arbitrage trade generating a revenue of 101.6 ETH, dwarfing the block reward of 3 ETH and the insignificant explicit transaction fees of 0.022 ETH. In this particular block, one transaction generated all the pure revenue OO fees. This transaction, whose profit graph is available at https://bit.ly/2D4U57c, saw an exchange of Bigbom token (BBO) for ETH on Bancor and Kyber; an error in Bancor’s pricing formula allowed a user to buy BBO at rates far under market. The bot’s order size was 101.6 ETH, of which almost all was taken as pure profit.

As with all our analyses, we stress that our measurements are conservative: They represent lower bounds on arbitrage behavior. The limitations in our instrumentation harness discussed in Section IV-A1, lead to potential underestimation.

B. Undercutting attacks
Undercutting attacks [11] represent one vector of attack that can leverage OO fees.

It is well known that fixed per-block miner rewards are a key feature of secure and stable cryptocurrency protocols, as originally described in [11]. In that work, the authors analyze the incentives of blockchain miners in a regime where transaction fees exceed the inflationary subsidy paid to miners by a blockchain protocol. They observe that when the block reward is dominated by fees, rewards have high variance. As a result, a miner can fork a high-fee block, holding back some fees to attract other miners to build on the fork. In extreme cases, incentives to deviate from the protocol may lead to disruption in miner strategies for economically rational miners, reducing the security provided by block confirmations.

Prior to our work, transaction fees have been viewed as the only source of value for undercutting attacks, with [11] even calling a world in which fees dominate block rewards a "transaction-fee regime." That regime seemed a distant prospect. The title of [11], "On the Instability of Bitcoin Without the Block Reward," refers to Bitcoin block rewards going to zero, an event anticipated around the year 2140.

Our study shows that OO fees are a form of value that sometimes dominates explicit transaction fees today. The tail of our OO fee distribution, including all of the example blocks in Figure 11 represent such opportunities. In other words, undercutting attacks represent a present threat in Ethereum, and one that will grow with the success of smart contracts that attract OO fees. Other potential sources of OO fees are mentioned in [12].

Most importantly, our view of arbitrage remains conservative, and we emphasize that pure revenue opportunities represent a small slice of total ordering fees. There are many possible sources of ordering fees payable to miners, including more sophisticated arbitrage. There are also many other forms of miner-extractable value. Miners can "steal" arbitrage opportunities from arbitragers by taking them themselves. Additionally, the survey in [15] describes several other sources of MEV, including the ability to buy into profitable ICOs early and the manipulation of games of chance.

Undercutting attacks can leverage OO fees or any other MEV from newly generated blocks. The second attack we describe can use MEV from past blocks to subsidize an attack.

C. Time-bandit attacks
We now describe time-bandit attacks, a new, second attack vector that can exploit miner-extractable value. They can exploit MEV from new blocks, but more powerfully, can also use MEV from past blocks via rewinding.

Time-bandit attacks are conceptually simple. Suppose a blockchain has a suffix (subchain) [height0, height1], with current block height height1, in which stealable value exceeds block rewards. An adversary can rewind to height0 and use the resulting MEV to subsidize a profitable 51% attack that mines a fork up to or past height1.

Of course, a time-bandit attack relies on real-time access to massive mining resources. As noted in [5], however, "rental attacks" are feasible using cloud resources, particularly for systems such as Ethereum that rely heavily on GPUs, which are standard cloud commodities. Sites such as http://crypto51.app/ estimate the costs. We illustrate with an example that relies on MEV from DEX rewinding.

Example 1. Consider a price spike from 1 USD to 3 USD in a token that trades on an on-chain automated market maker (e.g., Bancor [1]). A miner performing a time-bandit attack can now rewrite history such that it is on the buy side of every trade, accruing a substantial balance in such a token at below market rate—before the price spike.7

For example, if the attacker wishes to rewrite 24 hours of history, and 1M USD of volume occurred in exchanges with rewritable history in that token, then the attacker can obtain a MEV gross profit of 1 M × (3 USD - 1 USD) = 2M USD.8

At the time of writing (March 2019), http://crypto51.app/ estimates a 24-hour 51% rental-attack cost on Ethereum of about 1.78M USD, implying a net profit of around 220K USD.

We stress that time bandit attacks are not limited to MEV from DEXes. A variety of smart contract systems allow anyone to participate and earn profit for doing so, often a desirable design goal for the style of permissionless and open interaction that lends itself naturally to blockchains. Any on-chain action in the past that could have potentially profited a miner today, including actions that unconditionally earn them ETH in the past, are thus potential sources for time-bandit attacks. Because smart contracts are Turing complete scripts and carry complex interactions, estimating the size of these opportunities is a challenging problem we defer to future work.

Time-bandit attacks in Ethereum: Recent transaction statistics suggest that Ethereum is vulnerable to time-bandit attacks. For example, decentralized exchange volumes show a peak of 1.5 billion USD of traded assets on Ethereum’s decentralized exchanges in July 2018 [19]. While it is hard to gauge the total stealable value in this volume, the current estimated one-month cost of a 51% attack on Ethereum according to http://crypto51.app/ is approximately 56 million USD, more than 25 times lower than this DEX volume.

We posit that the OO fees alone that we have described threaten the security of today’s Ethereum network. As Figure 11 shows, blocks with high OO fees and/or arbitrage opportunities can already enable such attacks.

More generally and alarmingly, time-bandit attacks can be subsidized by a malicious miner’s ability to rewrite profitable trades retroactively, stealing profits from arbitrageurs and users while still claiming gas fees on failed transactions that attempt execution. The resulting MEV is potentially massive, suggesting a possibly serious threat in Ethereum today.

Of course, a full analysis of the threat would require an understanding of how time-bandit attackers might compete against one another to harvest MEV—by analogy with PGAs. This is a topic for future research.