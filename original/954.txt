Image steganography aims to embed secret messages into cover images in an imperceptible manner. While steganalysis tries to identify stegos from covers, which is a special binary classification problem. Recently, some literatures show that the adversarial embedding can mislead the advanced steganalyzers based on convolutional neural network (CNN), and thus enhance the steganography security. Since adding perturbations to stegos may lead to messages extraction failure due to properties of syndrome-trellis codes (STC), the existing adversarial examples are derived from covers or their enhanced versions, while those stegos are not fully utilized. In this paper, we propose a new adversarial embedding scheme for image steganography. Unlike those related works, we first combine multiple gradients of cover and generated stegos to determine the directions of cost modifications. Next, instead of adjusting all or a random part of embedding costs in existing works, we carefully select the candidate costs according to the amplitudes of cover gradients and their costs. Extensive experimental results demonstrate that by adjusting a tiny part of embedding costs (less than 5% in most cases), the proposed method can significantly improve the security of five modern steganographic methods evaluated on both re-trained CNN-based and traditional steganalyzers, and achieve much better security performances compared with related methods. In addition, the security performances evaluated on different image database show that the generalization of the proposed method is good.
SECTION I.Introduction
Image steganography aims to hide secret messages into digital images via slightly adjusting some embedding units. The modern steganography is under the framework of distortion minimization [1], and the design of embedding cost for each embedding unit becomes a key issue in such a framework. In the past few years, many effective steganographic methods have been proposed. For instance, in spatial domain, WOW [2] and S-UNIWARD [3] employ a bank of directional high-pass filters to obtain directional residuals. HILL [4] uses a high-pass filter and two low-pass filters to compute cost function. MiPOD [5] was designed to minimize the power of optimal detector under model-based framework, and it has comparable security to HILL. CMD-based [6] and SMD-based [7] methods are effective ways to enhance existing spatial steganography via clustering modification directions during embedding. In JPEG domain, there are several typical steganographic methods, such as UED [8], J-UNIWARD [3] and UERD [9].

On the opposite side of steganography, steganalysis aims to detect the secret message hidden by steganography. Many typical steganalytic methods have been proposed until now. Usually, the steganalytic methods can be divided into two categories, that is, the traditional methods based on hand crafted features, such as SRM [16], and its content adaptive versions [17], [18], and those methods based on deep learning, such as Xu-Net [19], Deng-Net [20], and SRNet [21]. The recent literatures show that deep learning based method can achieve the state of the art results, and has become the mainstream method in steganalysis.

In computer vision, many literatures such as [22], [23] have shown that adversarial examples can effectively mislead the classifiers based on deep neural networks. Inspired by this, some adversarial embedding methods have been proposed to mislead the modern steganalytic methods based on CNN so as to enhance the security of existing steganography. For instance, in spatial domain, the method [10] iteratively constructs enhanced covers based on adversarial examples and embeds secret messages into the enhanced covers until the corresponding stegos could mislead the targeted steganalyzer. Adversarial enhancing method (AEN) [15] proposes an adaptive way to adjust embedding costs based on the amplitudes of gradients. Adversarial embedding (ADV-EMB) [11] divides the embedding units (both for pixel values and DCT coefficients) into two non-overlapping parts. It firstly hides secret message in one part, and then adjusts some units in another part based on the gradients of a pre-trained CNN-based steganalyzer. The ratio of two parts is a parameter, which is tested from small to large until the resulting stego can mislead the targeted steganalyzer. Recently, we propose a steganography scheme [24] mainly based on stego selection. The method first generates many candidate stegos according to the adversarial examples from covers, and then selects a stego according to the residual distances between stegos and the corresponding cover. Min-max [12], [13] can be regarded as an iterative version of ADV-EMB. It proposes the min-max strategy for selecting proper stego, and obtains the corresponding steganalyzer during each iteration until the resulting stegos achieve satisfactory security. Unlike ADV-EMB, JS-IAE [14] carefully adjusts a part of original DCT embedding costs during each iteration, and employs an iterative way to enhance the security of existing JPEG steganography. In [25], we propose an iterative method to construct a new cost function for audio steganography. Usually, non-iterative methods can be improved by some iterative schemes. However, those iterative methods are usually time-consuming.

In existing adversarial embedding methods, adversarial examples are mainly derived from covers (e.g., AEN [15]) or their enhanced versions (e.g., [10]). The corresponding stegos are not utilized. The main reason may be that unlike other classification tasks in computer vision, adding perturbations to resulting stegos would probably lead to message extraction failure due to the properties of syndrome-trellis codes (STC [26]) which is commonly used in current steganography. Instead of adding perturbations to stegos, in this paper, we first propose to combine multiple gradients of both cover and stegos to determine the modifying directions of embedding costs within cover, and we show that the gradients derived from stegos are helpful for enhancing steganography security. Furthermore, in order to avoid modification to those embedding units that would significantly reduce the steganography security, we carefully select candidate embedding costs according to amplitudes of cover gradients and original embedding costs. Extensive results show that by adjusting a tiny part of original embedding costs, the proposed method can significantly enhance the security performance for most modern steganography evaluated on several traditional and CNN-based steganalyzers, and achieve much better performances compared with related works.

The rest of this paper is arranged as follows. Section II gives a brief overview of related steganographic methods based of adversarial examples. Section III describes the proposed method. Section IV shows comparative experiments and discussions. Finally, the concluding remarks of this paper and future works are given in Section V.

SECTION II.Related Works
Up to now, several steganographic methods based on adversarial examples have been proposed. These methods have to train a CNN-based steganalyzer NT according to an existing steganography to be enhanced. Based on the pre-trained NT , they can obtain the corresponding gradient Gx for any given input x , which is used to produce enhanced cover or to guide embedding cost modifications within original cover images. Note that the gradients Gx is the partial derivative of the loss function L(x,t;NT) with respect to the input x , which is defined as follows:
Gx=L(x,t;NT)=∇xL(x,t;NT)−tlog(NT(x))−(1−t)log(1−NT(x))(1)
View Sourcewhere x can be a cover image c , a stego image s , or any transformed version of c and so on; L(x,t;NT) is defined as the binary cross entropy loss between the output of the steganalyzer NT(x) (0≤NT(x) ≤1 ) and the targeted label t (t∈{0,1} , t=0 denotes cover, t=1 denotes stego). Based on the property of the fast gradient sign method (FGSM) [23], modifying the input x along the opposite direction of the signs of gradient Gx can reduce the loss L(x,t;NT) , and thus make the modified image x more likely to be detected as the targeted label (cover or stego) by the steganalyzer NT .

Since the modern steganography is under the framework of distortion minimization, the current steganographic methods firstly design symmetric embedding costs (i.e., ρ+(i,j)=ρ−(i,j) ), and then use STC for data embedding. Note that most adversarial embedding methods aim to improve an existing steganography via adjusting the symmetric embedding costs into asymmetric ones. Due to STC, modifying the stegos directly would lead to the failure of extracting information. Thus, the cover gradient Gc with the targeted label t=0 (i.e., Gc=∇cL(c,0;NT) ) is used to guide cost modifications within cover images in most existing methods. Take Gc(i,j)<0 for instance, they adjust the corresponding cost ρ+(i,j) and/or ρ−(i,j) in addition or multiplication manner so that ρ+(i,j)<ρ−(i,j) . In this way, the probability of increasing the corresponding embedding unit is relatively higher than that of decreasing during data embedding with STC, meaning that the steganography modification (changing cover to stego) is probably along the opposite direction with the sign of gradient Gc(i,j) . Therefore, the final stego can fool the steganalyzer NT based on the property of FGSM.

Table I shows several typical adversarial embedding methods in image steganography and their main differences. In the following subsections, we will give a brief introduction about them separately.

TABLE I Comparison of Image Steganographic Methods Based on Adversarial Examples
Table I- 
Comparison of Image Steganographic Methods Based on Adversarial Examples
A. Enhanced Cover Based Method [10]
In [10], the authors propose an adversarial embedding method on enhanced covers in spatial domain. The main process of the method [10] is described as follows:

Train a CNN-based steganalyzer NT according to covers and corresponding stegos with a given steganography;

For each cover c , get a noisy image cz=c+z , where z is a random matrix with values -1, 0 and 1, and then compute its gradients G by feeding cz into the pre-trained network NT ;

Construct an enhanced cover c~=c+εG , where ε is the adversarial magnitude, so that c~ is more likely to be judged as cover by NT compared with the original one;

Update c=c~ and repeat steps (2) and (3) until the corresponding stego generated by c~ can mislead NT .

Based on above operations, we notice that both cz and c~ are transformed versions of the cover image c , i.e., adding random noise and adversarial noise respectively on c . In addition, since embedding secret message into the resulting c~ can efficiently fool the pre-trained steganalyzer NT . Thus, the authors in [10] consider c~ as an enhanced cover image. However, the process of constructing enhanced covers would introduce unexpected artifacts, which can be easily detected by some traditional and other non-targeted steganalyzers. Furthermore, when the targeted steganalyzer NT is re-trained, the security performance will also reduce a lot.

B. Adversarial Embedding Based Methods [11]–[12][13]
The main process of ADV-EMB is as follows:

Train a CNN-based steganalyzer NT like the method [10]. Initialize two parameters p=0,δ=0.1 ;

Randomly divide embedding units into common group and adjustable group, which contains 1−p and p of embedding units separately. Embed 1−p secret message into the common group based on original costs, and then feed it into NT to get the corresponding gradients G ;

Modify the embedding costs in adjustable group according to the signs of gradients G :
⎧⎩⎨⎪⎪ρ∗(i,j)=ρ∗0(i,j)/α,ρ∗(i,j)=ρ∗0(i,j)∗α,ρ∗(i,j)=ρ∗0(i,j), if ∗=−sign(G(i,j)),if ∗=sign(G(i,j)),  otherwise,(2)
View Sourcewhere ∗∈{+,−} , ρ0 is original cost, α is scaling factor that is larger than 1, then embed the rest p messages based on the modified costs in adjustable group;

Update the ratio parameter p=p+δ and repeat steps (2) and (3) until the resulting stego can mislead NT .

In this paper, we believe that the main algorithm of ADV-EMB as described above is non-iterative since the targeted steganalyzer NT is fixed although the parameter p is iteratively determined. Experimental results in [11] show that ADV-EMB could improve the steganography security both in JPEG and spatial domain. However, the improvement is not significant, especially for the steganography in spatial domain.

The methods [12], [13] can be regarded as the iterative versions of ADV-EMB. In each iteration, they first employ the same way to generate adversarial examples like ADV-EMB, and then they use min max strategy to select the least detectable stego images for the best classifier among the set of pre-trained steganalyzers. The experimental results [12], [13] show that they can achieve better security than the ADV-EMB. However, they are time-consuming especially when the number of iterations is large. Note that the proposed min max strategy in [12], [13] is universal, and it is useful for other non-iterative adversarial embedding methods.

C. JS- IAE [14]
Unlike ADV-EMB, we propose another way to adjust embedding costs in each iteration, and employ a different iterative way to update costs in [14]. The main process of JS-IAE [14] is as follows:

In the k -th iteration, where k=0,1,… , train a targeted steganalyzer NT with (C,Sk) , where C is cover set, Sk is the corresponding stego set based on updated cost set in the k -th iteration;

For each cover c , feed it into NT and compute its gradients G for the cover c ;

Limit modification on embedding costs with larger gradients using a parameter p , and update them according to the sign of G as follows:
{ρ∗k+1(i,j)=ρ∗k(i,j)+1,ρ∗k+1(i,j)=ρ∗k(i,j)+α,if ∗=−sign(G(i,j)),if ∗=sign(G(i,j)),(3)
View Sourcewhere ∗∈{+,−} , α is scaling factor larger than 1.

For each cover c , obtain the corresponding stego sc based on the updated cost ρ∗k+1 , and get the stego set Sk+1 ;

Update k=k+1 and repeat steps (1) − (4) until achieving satisfactory results.

The results in [14] show that JS-IAE can effectively enhance the security of JPEG steganography. However, like other iterative methods, such as min max [12], [13], JS-IAE is still time consuming. Similarly, we propose an iterative adversarial embedding method [25] for audio in time domain, and it does not depend on any existing costs and can finally obtain good security performance after several iterations. However, this method is not suitable for image steganography due to statistical differences between audio and image.

D. Adversarial Enhancing Method [15]
AEN is an adaptation of the fast gradient sign method in the steganography. The main process of AEN is as follows:

Train a targeted steganalyzer NT like the method [10];

Feed cover c into NT , compute its gradients G , and remove chessboard pattern within the sign map of G (i.e., sign(G) ). To this end, first obtain the cross-correlation map K using a mask T as follows:
K=sign(G)⊙T, T=⎡⎣⎢−11−11−11−11−1⎤⎦⎥
View Sourcewhere the operator ⊙ denotes cross-correlation.

For each coordinate (i,j) within K , if ||K(i,j)||=9 , then (i,j) is located at the center of a chessboard. In this case, let G(i,j)=0 to break the chessboard pattern.

Update embedding costs of c based on the sign and magnitude of G as follows:
{ρ∗(i,j)=A(G(i,j))×ρ∗0(i,j),ρ∗(i,j)=ρ∗0(i,j),if∗=−sign(G(i,j))otherwise,(4)
View SourceRight-click on figure for MathML and additional features.where ∗∈{+,−} , A(G(i,j)) is the adaptive scaling parameter.

Generate adversarial stego s based on updated costs ρ∗ .

The results in [15] show that AEN can improve the security of modern steganography in spatial domain.

Unlike all mentioned works, the proposed method can make full use of gradients from both cover and multiple stegos to guide embedding cost modifications. In addition, the proposed method carefully selects candidate units to be modified according to the amplitudes of gradients and embedding costs. In the following Section III, we will describe the details of the proposed method. In Section IV, we will provide extensive comparative results to show the effectiveness of the proposed methods compared with related works.

SECTION III.Proposed Method
The proposed method aims to enhance the security performance of a given steganography F via adjusting some original embedding costs within covers. To this end, we firstly train a CNN-based steganalyzer NT based on covers and the corresponding stegos produced by F , and then generate new stegos based on adversarial examples to mislead NT . As described previously, existing related works obtain adversarial examples mainly from covers, and try to adjust all (or a random part of) the embedding costs (or units) within covers so that the resulting stegos are more likely to be discriminated as covers by NT .

Although adding perturbations to stegos cannot ensure the correct extraction of secret message, it is noted that the adversarial examples from stegos can also provide very helpful information to guide the embedding cost modification within cover. Inspired by some works on adversarial attacks in computer vision, such as [27]–[28][29][30][31][32], performing some image processing operations to the input (i.e., cover c in the proposed method), and then feeding the transformed inputs into the classifier (i.e., NT ) for the gradient calculation can improve the transferability of adversarial examples. Among the operations, adding noises has been proved to be simple and very effective in recent literatures, such as [27]–[28][29]. Actually, stegos can be regarded as the noise contaminated versions of the corresponding cover since they are visually imperceptible, and the distances between them are usually quite small. For any given cover c , the resulting stego s with most recent steganographic methods in spatial domain can be modelled as follows: s=c+z where z is the steganography noise introduced by F and a given secret message. Here z is usually a sparse matrix and z(i,j)∈{+1,0,−1} . In the proposed method, therefore, stegos serve as the transformed inputs of cover.1 Note that here both the cover gradient Gc and stego gradient Gs are used to guide embedding cost modifications within the cover image c rather than the stego s . Based on modified costs, we then employ STC to embed secret message into cover c and obtain a final stego. In this way, we can improve the probability of steganography modifications that are opposite to the signs of gradients Gc and Gs , so that the resulting stego is easier to be detected as cover (t=0 for all input images) by the steganalyzer NT . For instance, if the gradient signs of cover and stegos are the same (i.e., + or −), we should increase the corresponding embedding costs in the same direction, meaning that we should increase the relative modification probability in the inverse direction (i.e., − or +) during data hiding with STC. In this way, we can increase the misjudgment probability of the steganalyzer NT according to the properties of gradient signs. However, when the gradient signs are different, increasing the embedding costs in the positive or negative directions would be bias. Taking Gc(i,j)>0 and Gs(i,j)<0 for example, modifying the embedding costs in the positive or negative directions cannot satisfy the two different gradient signs simultaneously.

Moreover, to preserve embedding units that would significantly reduce the steganography security, such as those units located at flat/smooth regions, and keep a smaller amount of cost modifications, the amplitudes of both embedding costs and gradients are considered in the proposed method.

The framework of the proposed method includes two steps, that is, steganalytic network pre-training and stego generation, as illustrated in Fig. 1. We will describe them in the two following subsections separately.


Fig. 1.
The framework of the proposed method.

Show All

A. Steganalytic Network Pre-Training
In this step, we firstly collect a cover image set CT , and obtain the corresponding cost map set ρCT using a steganography F to be enhanced, and then generate the corresponding stego image set ST using STC at a given embedding payload. Finally, we can obtain a CNN-based steganalytic network NT by training the cover set and stego set, i.e., CT and ST .

Note that unlike those iterative methods such as min max based methods [12], [13] and JS-IAE, the proposed method is non-iterative since all gradients are calculated based on the fixed steganalyzer NT via back propagation.

B. Stego Generation
In this step, we collect another cover image set CA , where CA∩CT=∅ . For any cover image c∈CA , we firstly compute its original cost map ρ0 by the steganography F . Then we generate n random messages with a fixed payload, and embed them respectively into the cover c to generate n different stegos (i.e., s1,s2,…,sn ) using STC based on the same embedding costs ρ0 . Then we feed cover c and its n different stegos into the pre-trained network NT to obtain a gradient map Gc for cover c and multiple gradient maps (i.e., Gs1,Gs2,⋯,Gsn ) for the n stegos using back propagation algorithm. For a given input image x (cover c or stego s1,s2,…,sn ), the corresponding gradients Gx is calculated based on the formula (1) like the existing methods. Note that here the targeted label is cover (i.e., t=0 ) no matter x is cover c or stego si,i=1,2,…,n .

After calculating gradients of a cover and stegos, we then select embedding units within cover for subsequent modification. As illustrated in Algorithm 1, we first collect embedding units whose gradient signs of cover and multiple stegos are exactly the same, and obtain two coordinate sets M+n and M−n as shown in line #1 and line #2. For every coordinate (i,j) in M+n , we should increase its original embedding costs2 in the positive direction, i.e., increasing ρ+0(i,j) . In this way, this embedding unit will tend to be modified in the opposite direction during data hiding with STC since ρ+0(i,j)>ρ−0(i,j) , and thus the resulting stego would be more likely to be discriminated as cover by NT . Similar operations should be done for those units in set M−n . The embedding cost modification is shown in formula (5).

Algorithm 1 Selecting Embedding Units to Be Modified
Gradient maps Gc & Gs1,…,Gsn ; original cost map ρ0 of a cover c ; the parameter p1,p2 for thresholding gradients and embedding costs; the number n of stegos

Coordinate sets of selected embedding units in positive and negative directions M+ and M−

M+n={(i,j)∣Gc(i,j)>0∩Gsk(i,j)>0,k=1,…,n}

M−n={(i,j)∣Gc(i,j)<0∩Gsk(i,j)<0,k=1,…,n}

M(p1,p2)=Lowρ0(p1)∩Top|Gc|(p2)

M+=M+n∩M(p1,p2)

M−=M−n∩M(p1,p2)

Return: M+,M−

Besides gradient signs, the amplitudes of embedding costs and the cover gradients should also be considered with the following reasons:

Based on the design of embedding cost, modifying those embedding units with smaller costs would introduce less detectable artifacts into resulting stego. To assure the steganography security, we should preserve those embedding units with larger costs as possible;

Usually, those embedding units with larger gradients have a greater impact to the targeted steganalyzer NT . Thus, it is possible to mislead NT by modifying a relative smaller number of embedding units with larger gradients.

Therefore, we let Lowρ0(p1) denote the coordinate set of embedding units with the smaller p1 costs, Top|Gc|(p2) denote the coordinate set of embedding units with the larger p2 gradients, where p1 and p2 are two parameters ranging from 0 to 1. We further limit the modifications in set M(p1,p2)=Lowρ0(p1)∩Top|Gc|(p2) as shown in line #3. Finally, the final modification set in the positive direction M+ is the intersection of M+n and M(p1,p2) , and M− can be obtained similarly as shown in line #4 and line #5.

Fig. 2 shows the process of selecting embedding units and the corresponding modifications. Fig. 2-(a) is a stego image using HILL at 0.4 bpp. Fig. 2-(b) shows the modifications M+n∪M−n , where n=5 in this example. Note that here around 50% embedding units are selected based on the gradient signs of cover and stegos. If p1=0.7,p2=0.1 , the percentage of modifications would be significantly reduced to around 7% when amplitudes of costs and gradients are considered, as illustrated in Fig. 2-(c). Finally, Fig. 2-(d) shows the resulting modification set M+∪M− , which is the intersection of the sets in Fig. 2-(b) and Fig. 2-(c). In this example, only 4.64% embedding units are selected for modifications in the proposed method.


Fig. 2.
Selected embedding units to be modified. The enhanced steganography is HILL [4] with a payload 0.4 bpp, and p1=0.7,p2=0.1,n=5 .

Show All

For the selected units in positive and negative modification directions (i.e., M+ and M− ), we update their original embedding costs ρ0 as follows:
ρ+(i,j)=ρ−(i,j)={ρ+0(i,j)+α,ρ+0(i,j),if(i,j)∈M+otherwise{ρ−0(i,j)+α,ρ−0(i,j),if(i,j)∈M−otherwise(5)
View Sourcewhere ρ0(i,j) and ρ(i,j) denote original embedding cost and its modified version at coordinate (i,j) ; α is the adversarial magnitude, we fixed α=2 in our experiments. Based on the modified embedding costs ρ , we finally get the resulting stego image s for a cover c using STC.

SECTION IV.Experimental Results and Analysis
In our experiments, 20,000 grayscale images of size 512×512 are from BOSSBase ver.1.01 [33] and BOWS2 [34]. As [11] and [21], we firstly resize all images into 256×256 using “imresize” in Matlab with default settings. The resulting image data set C is then randomly divided into two equal non-overlapping parts i.e., CT and CA . Set CT includes 10,000 images (8,000 for training and 2,000 for validating) to train a CNN-based steganalyzer NT in step #1, and we select Deng-Net as the targeted steganalyzer. For each cover in set CA , we can generate the corresponding stego in step #2. In all, we finally obtain 10,000 cover-stego pairs. To evaluate the steganography security, we randomly divide these image pairs into two equal parts: the first part is used to re-train a steganalyzer, and the second part is used for evaluating security performance. Five modern steganographic methods, including WOW, S-UNIWARD, MiPOD, HILL and CMD-HILL, and five modern steganalyzers, including two traditional steganalyzers (i.e., SRM and maxSRMd2 with ensemble classifiers) and three CNN-based steganalyzers (i.e., Xu-Net, Deng-Net and SRNet) are included. For a fair comparison, we evaluate the security performances of the original steganographic method and the proposed method on exactly the same image database and partition.

The training details of the networks (Xu-Net, Deng-Net and SRNet) are the same as reported in [19]–[20][21], including the batch size, learning rate, weight decay and the training epochs. Xu-Net and Deng-Net were training from scratch directly for all payloads, while SRNet were training with the first curriculum training method as reported in [21]. In other words, the detectors for payload 0.1, 0.2 and 0.3 bpp were trained by seeding with network trained for payload 0.4 bpp. In addition, all the networks and traditional steganalyzers were independently trained for the original methods, related methods and the proposed method. To achieve more convincing results, we randomly split CT and CA three times and report the average results in the following.

A. Parameter Selection
As illustrated in Algorithm 1, there are three important parameters, that is, the number of stegos n and two percentages p1 and p2 for thresholding the costs and gradients. Note that n=0,1,… , p1∈[0,1],p2∈[0,1] . To obtain the optimal parameters, the brute-force search method is impossible since the optimization problem is nonconvex and the parameter combination is infinite. For simplification, we reduce the parameter space that n∈{0,1,…,10} , both p1 and p2 are ranging from 0 to 1 with a step 0.1. In our experiments, we use greedy algorithm to select better parameters. Firstly, we fix n=5 and search the optimal parameters (p1,p2) . Then we fix the resulting (p1,p2) and search the optimal parameter n . Note that in the following experiments, the parameter selection is based on the stegos produced by HILL and the security performances evaluated by the steganalyzers SRM and Deng-Net. The resulting parameters are directly used for other steganographic methods with different payloads in this paper, even if they are probably not the optimal ones for others.

1) Parameter Selection for (p1,p2) :
There are totally 121 (= 112) parameter pairs of (p1,p2) . Typically, the proposed method with different parameter pairs will significantly affect the cost modification rate as defined as follows:
R(n,p1,p2)=|M+∪M−||M|=|(M+n∪M−n)∩M(p1,p2)||M|(6)
View Sourcewhere M is set of coordinates of all embedding units in a cover, M+,M− are the output of Algorithm 1, i.e., those coordinates of selected embedding units for subsequent cost modification using formula (5).

According to the definition of M(p1,p2) , it is easy to show that for a given parameter n , R(n,p1,p2) is a non-decreasing function with two variables p1 and p2 , that is,
R(n,p1,p2)≤R(n,p1,p2)≤R(n,p′1,p2),ifp1≤p′1R(n,p1,p′2),ifp2≤p′2(7)
View Source

As shown in Fig. 3-(a), for a given p1 (or p2 ), the average cost modification rates would increase with increasing the parameter p2 (or p1 ). When p1=0 or p2=0 , M(p1,p2)=Lowρ0(p1)∩Top|Gc|(p2)=∅ , which means that the proposed method would reduce as the original steganography since no embedding unit is selected for subsequent modification. When p1=1 , M(1,p2)=Lowρ0(1)∩Top|Gc|(p2)=Top|Gc|(p2) , which means that just the amplitude of gradients are considered for selecting embedding unit. Similarly, just the amplitude of embedding costs are considered when p2=1 .


Fig. 3.
Average cost modification rates and detection accuracies with different parameter pairs of (p1,p2) . (a) Average modification rates evaluated on 10,000 images in step #2. (b) Average detection accuracies evaluated on 5,000 test image pairs in step #2. In this experiment, we fixed n=5 . The steganography is HILL at 0.4 bpp, and the steganalyzer is SRM.

Show All

The average detection accuracies evaluated on SRM with different (p1,p2) are shown in Fig. 3-(b). From Fig. 3-(b), we observe that in most cases the average detection accuracies tend to increase with increasing the parameter p2 from 0.1 to 1. When p2 is less than 0.5, we can obtain better security performances compared with the original HILL (i.e., p2=0 ). For simplification, we fix (p1,p2)=(0.7,0.1) in the following experiments although such a parameter pair is derived from a special steganography (with a fixed payload) and steganalyzer, i.e., HILL at 0.4 bpp and SRM.

2) Parameter Selection for n :
In the previous section, we determine the parameter pair (p1,p2)=(0.7,0.1) . In this section, we would analyze the impact of the number of stegos on the steganography security. To this end, we consider two steganalyzers (i.e., SRM and Deng-Net) and two embedding payloads (i.e., 0.4 bpp and 0.2 bpp). In this experiment, we limit n∈{0,1,…10} . Note that n=0 means that we just use the cover gradients (i.e., without stego gradients) in the proposed method. The average detection accuracies evaluated on the two steganalyzers are shown in Fig. 4.

Fig. 4. - Average detection accuracies evaluated on two steganalyzers (a) for SRM; b) for Deng-Net for different numbers of stegos used in the proposed method. In this experiment, we fixed 
$p_{1}=0.7, p_{2}=0.1, \alpha =2$
.
Fig. 4.
Average detection accuracies evaluated on two steganalyzers (a) for SRM; b) for Deng-Net for different numbers of stegos used in the proposed method. In this experiment, we fixed p1=0.7,p2=0.1,α=2 .

Show All

From Fig. 4-(a), we observe that for the SRM steganalyzer, the detection accuracies tend to slightly increase with increasing n from 0 to 10, and all of them are smaller than those of original HILL. For the Deng-Net steganalyzer, however, the detection accuracies tend to decrease with increasing the numbers of stegos as shown in Fig. 4-(b). Furthermore, the detection accuracies would become higher than those of original HILL when n=0 , which means that stego gradients are helpful to improve the steganography security. Based on the results in Fig. 4, we empirically set n=5 since it can achieve better results both for SRM and Deng-Net.3

3) Parameter Selection for α :
In this section, we determine the parameter of the adversarial magnitude α . To this end, we consider two steganalyzers (i.e., SRM and Deng-Net) and two embedding payloads (i.e., 0.4 bpp and 0.2 bpp) for HILL. The detection accuracies with different α ranging from 1 to 10 are shown in Fig. 5.


Fig. 5.
Average detection accuracies evaluated on two steganalyzers (a) for SRM; b) for Deng-Net for different adversarial magnitudes used in the proposed method. In this experiment, we fixed p1=0.7,p2=0.1,n=5 .

Show All

From Fig. 5, we observe that the detection accuracies would not change significantly for different α for the SRM and Deng-Net steganalyzers with increasing α from 1 to 10. When α=2 , we obtain satisfactory results both for SRM and Deng-Net steganalyers. Thus, we fixed α=2 in out experiments.

B. Security Evaluation on Pre-Trained Steganalyzer
The proposed steganography is originally designed to attack a targeted steganalyzer, i.e., Deng-Net in step #1. Table II shows the average detection accuracies evaluated on the pre-trained Deng-Net. From Table II, we obtain two following observations:

The proposed method can effectively mislead the targeted steganalyzer in all cases. Among the five test steganographic methods, the average improvement of S-UNIWARD is minimal (about 7%), while they are over 12% for the other steganographic methods.

The average improvements would increase with increasing the embedding payloads. For instance, the average improvement is around 9% when the embedding payload is 0.1 bpp, while it becomes over 16% when the embedding payload is 0.4 bpp.

TABLE II Average Detection Accuracy (%) of the Proposed Method Evaluated on the Pre-Trained Steganalyzer (i.e., Deng-Net) in Step #1. Those Values With an Asterisk (*) Denote the Better Results in the Corresponding Cases. The Last Column Denotes the Average Improvements Over all Payloads for a Given Steganography. The Last Row Denotes the Average Improvements Over Five Steganography for a Given Payload. In Our Experiments, (p1,p2)=(0.7,0.1) and n=5 for All Cases

C. Security Evaluation on Re-Trained Steganalyzers
As described in previous section IV-B, the proposed method can effectively mislead a pre-trained steganalyzer. When the proposed method is exposed, however, the detectors would re-train the targeted network (i.e., Deng-Net) based on the resulting stegos, and/or employ other steganalyzers for security evaluation. In this section, we would evaluate the security of the proposed method on four re-trained steganalyzers. The average detection results are shown in Table III.4 From Table III, we obtain four following observations:

The proposed method can improve the security of five test steganographic methods in all cases. The last two columns in Table III are the average improvement and best-to-best improvement for four steganalyzers for a given steganography and payload. The column “best-to-best” denotes the gain in security measured using the best detector amongst the original method and the best detector amongst the proposed method. Taking MiPOD at 0.4 bpp payload for example, the average improvement is as high as 5.52%, while the “best-to-best” improvement is 6.98%(=max{70,89%,73.73%,80.53%,78.32%} - max{66.56%,69.27%,73.55%,72.00%}) , which are significant improvements for the modern steganography. It is noted that CMD is an effective method to enhance steganography, and it usually achieves the current best security in spatial domain. After using the proposed method, the security can be further improved a lots. Taking CMD-HILL at 0.4 bpp payload for example, we achieve 3.29% improvement on average.

The last row in Table III shows the average improvement for five steganographic methods at different payloads for a given steganalyzer. We observe that the improvements against CNN-based steganalyzers are always higher than those against conventional steganalyzers. On average, the security improvements are less than 2.9% for the two conventional steganalyzers, i.e., SRM and maxSRMd2; while they are over 4.0% for two CNN-based steganalyzers, i.e., Deng-Net and SRNet.

The proposed method is originally designed to mislead a special CNN-based steganalyzer (e.g., Deng-Net in our experiments). The results in Table III show that it is also effective to mislead other non-targeted steganalyzers, such as SRNet and conventional steganalyzers based on hand-crafted features, such as SRM and maxSRMd2. This is due to the adversarial sample transferability [35], [36], which is the property that some adversarial samples produced to mislead a special model are able to mislead other models, so long as those models were trained to perform the same task.

Compared with the results in Table II, the average improvement against Deng-Net, i.e., the 3-rd steganalyzer in Table III, has become relatively smaller. However, we also obtain 4.65% improvement, which is significant in image steganography.

TABLE III Average Detection Accuracy (%) Evaluated on Four Re-Trained Steganalyzers. Those Values With an Asterisk (*) Denote the Better Results in the Corresponding Cases. The “Average” Column Denotes the Average Improvements Over Four Different Steganalyzers for a Given Steganography and Payload. The “Best-to-Best” Column Denotes the Gain in Security Measured Using the Best Detector Amongst “Original” and the Best Detector Amongst “Proposed”. the Last Row Denotes the Average Improvements Over a Given Steganalyzer. In Our Experiments, (p1,p2)=(0.7,0.1) and n=5 for All Cases
Table III- 
Average Detection Accuracy (%) Evaluated on Four Re-Trained Steganalyzers. Those Values With an Asterisk (*) Denote the Better Results in the Corresponding Cases. The “Average” Column Denotes the Average Improvements Over Four Different Steganalyzers for a Given Steganography and Payload. The “Best-to-Best” Column Denotes the Gain in Security Measured Using the Best Detector Amongst “Original” and the Best Detector Amongst “Proposed”. the Last Row Denotes the Average Improvements Over a Given Steganalyzer. In Our Experiments,
$(p_{1},p_{2}) = (0.7, 0.1)$
 and 
$n=5$
 for All Cases
D. Security Evaluation on Different Image Database
In this section, we firstly apply the pre-trained steganalyzer NT and the resulting parameters (i.e., n=5 , p1=0.7,p2=0.1 ) obtained on BOSSBase and BOWS2 to generate new stego images on another image database, and evaluate the security performances on re-trained steganalyzers. To this end, we randomly collect 40,000 images of size 256×256 from ALASKA#2 database [37], [38], and generate 40,000 stegos according to the stego generation (refer to section III-B) in the proposed method. We then divide the 40,000 cover-stego pairs into two non-overlapping equal parts: the first part is used for re-training steganalyzers, while the remaining part is used for security evaluation. Similarly, we repeat above operations three times and show the average detection accuracies in Table IV From Table IV, we obtain three following observations:

The proposed method can also improve the steganography security on the ALASKA#2 database in all cases, although all the parameters (i.e., p1=0.7,p2=0.1,n=5,α=2 ) in stego generation are determined from BOSSBase and BOWS2, which indicates that the generalization of the proposed method is very good.

Compared with the results on BOSSBase and BOWS2 (refer to Table III), the security improvements on ALASKA#2 database are relatively smaller. However, we can still achieve satisfactory results. Taking CMD-HILL at 0.2 bpp for example, we obtain over 1.90% average improvement for the four steganalytic methods.

The security performances on BOSSBase+BOWS2 (Table III) and ALASKA #2 (Table IV) are quite different. Taking original MiPOD at 0.4 bpp for example, the detection accuracies with maxSRMd2 and SRNet on BOSSBase+BOWS2 are 73.73% and 78.32% respectively, while they significantly reduce to 67.37% and 67.38% on ALASKA#2. This is due to the diversity of two images databases. Images in BOSSBase and BOWS2 were obtained from a small set of DLSR (Digital Single Lens Reflex) cameras, all images were processed from raw files in the same way (e.g., scaling method, color transformation and so on). While images in ALASKA#2 were obtained from more than 40 cameras (included smartphones, tablets, low-end cameras to high-end full frame DLSR) and processed in realistic and highly heterogeneous ways. Similar detection results can be found in related works [39]–[40][41].

TABLE IV Average Detection Accuracy (%) Evaluated on Four Re-Trained Steganalyzers Using ALASKA#2 Dataset. Those Values With an Asterisk (*) Denote the Better Results in the Corresponding Cases. The “Average” Column Denotes the Average Improvements Over Four Different Steganalyzers for a Given Steganography and Payload. The “Best-to-Best” Column Denotes the Gain in Security Measured Using the Best Detector Amongst “Original” and the Best Detector Amongst “Proposed”. the Last Row Denotes the Average Improvements Over a Given Steganalyzer. In Our Experiments, (p1,p2)=(0.7,0.1) and n=5 for all Cases

E. Comparison With Related Works
As illustrated in Table I, there are three typical non-iterative methods based on adversarial examples in spatial domain, that is the enhanced cover based method [10], the main algorithm of ADV-EMB, and AEN. As described in [10], this method is very effective to counter a fixed CNN-based steganalyzer. However, the security performance would significantly reduce when the targeted steganalyzer is re-trained or other conventional steganalyzers are used. In this section, therefore, the other two methods, i.e., ADV-EMB and AEN, are included for comparative studies. Note that the targeted steganalyzer of the two methods are Xu-Net, while the targeted steganalyzer of our method is Deng-Net. For a fair comparison, both Xu-Net and Deng-Net are used as targeted steganalyzers in ADV-EMB and AEN.

1) Comparison With ADV-EMB on BOSSBase and BOWS2:
The comparative results are shown in Table V. From Table V, we have two following observations:

In almost all cases, the proposed method can achieve the best performances. On average, we can obtain over 2.70%, 3.60% and 4.60% improvements compared to original ones for the three steganalyzers, i.e., SRM, Xu-Net, and Deng-Net, separately.

The ADV-EMB against Xu-Net (denoted as ADV-EMB {Xu-Net}) just slightly improves the security performance of original steganographic methods, especially for two other non-targeted steganalyzers (i.e., SRM and Deng-Net). When the targeted steganalyzer becomes Deng-Net (denoted as ADV-EMB {Deng-Net}), the improvement can be enhanced, which means that the targeted steganalyzer is one of important issues that would affect the performances for ADV-EMB.

TABLE V Average Detection Accuracy (%) of the Proposed Method and Two Versions of ADV-EMB [11]. The Last Column Denotes the Average Improvements for a Given Steganalyzer. Those Values With an Asterisk (*) Denote the Best Results, While Those Underlined Values Denote the Worse Results in the Corresponding Cases
Table V- 
Average Detection Accuracy (%) of the Proposed Method and Two Versions of ADV-EMB [11]. The Last Column Denotes the Average Improvements for a Given Steganalyzer. Those Values With an Asterisk (*) Denote the Best Results, While Those Underlined Values Denote the Worse Results in the Corresponding Cases
2) Comparison With AEN on BOSSBase and BOWS2:
Note that the optimal parameters for S-UNIWARD and HILL are given in AEN [15], the two steganographic methods are considered in this section. The average detection accuracies are shown in Table VI. From Table VI, we observe that the proposed method always obtains the best security performances in all cases, while the AEN slightly enhances the security of original steganography.

TABLE VI Average Detection Accuracy (%) of the Proposed Method and Two Versions of AEN [15]. The Last Column Denotes the Average Improvements for a Given Steganalyzer. Those Values With an Asterisk (*) Denote the Best Results, While Those Underlined Values Denote the Worse Results in the Corresponding Cases
Table VI- 
Average Detection Accuracy (%) of the Proposed Method and Two Versions of AEN [15]. The Last Column Denotes the Average Improvements for a Given Steganalyzer. Those Values With an Asterisk (*) Denote the Best Results, While Those Underlined Values Denote the Worse Results in the Corresponding Cases
To show the security improvements with the three detectors (i.e., SRM, Xu-Net and Deng-Net) clearly, we show the comparative accuracies evaluated on the best detector in Fig 6. From Fig 6, we observe that the proposed method also works better than others. In addition, the Deng-Net always works the best among the three detectors.


Fig. 6.
The detection accuracies evaluated on the best detector among SRM, Xu-Net and Deng-Net. The x-axis denotes the stganographic method and embedding payload, while the y-axis denotes the detection accuracy evaluated on the best detector.

Show All

3) Comparison With ADV-EMB on ALASKA#2:
Based on the results in Table V and Table VI, we observe that ADV-EMB{Deng-Net} performs better on BOSSBase and BOWS2 compared with AEN and ADV-EMB{Xu-Net}. In this section, thus, we compare ADV-EMB{Deng-Net} and the proposed method on the ALASKA#2. The comparative results are shown in Table VII. From Table VII, we observe that the proposed method can improve the security performance in all cases. After using ADV-EMB, the average security performance evaluated with SRM is slightly improved. However, the security performances evaluated with Deng-Net and SRNet become worse compared to original ones (1.53% and 0.61% performance degradation), which meaning that the generalization of ADV-EMB is poor.

TABLE VII Average Detection Accuracy (%) of the Proposed Method and ADV-EMB [11] on the ALASKA #2 Dataset. The Last Column Denotes the Average Improvements for a Given Steganalyzer. Those Values With an Asterisk (*) Denote the Best Results, While Those Underlined Values Denote the Worse Results in the Corresponding Cases
Table VII- 
Average Detection Accuracy (%) of the Proposed Method and ADV-EMB [11] on the ALASKA #2 Dataset. The Last Column Denotes the Average Improvements for a Given Steganalyzer. Those Values With an Asterisk (*) Denote the Best Results, While Those Underlined Values Denote the Worse Results in the Corresponding Cases
4) Comparison of Execution Time:
In this part, we compare the execution time of the proposed method with ADV-EMB and AEN. We conducted the experiments on the same server: Intel(R) Core(TM) i7-6900K CPU @ 3.20GHz and NVIDIA TITAN Xp GPU with 12G memory. For all methods, we assume that the pre-trained steganalyzer is given. We compare the execution time for generating stegos from original embedding costs of covers. The average results evaluated on 40,000 stegos (i.e., HILL & S-UNIWARD at 0.2 bpp and 0.4 bpp separately) for different adversarial embedding methods are shown in Table VIII. From Table VIII, we observe that the execution time of ADV-EMB based method is relatively longer (over 3 times) than the proposed method and AEN, since it has to search a good partition parameter p by iteratively executing the main process of ADV-EMB. On average, the proposed method takes around 0.21 second to generate a stego, which is acceptable in practical application.

TABLE VIII Average Execution Time for Different Adversarial Embedding Methods
Table VIII- 
Average Execution Time for Different Adversarial Embedding Methods
F. Analysis on Cost Modification Rate
Unlike most related works that modify almost all or a random part of embedding units in an image, the proposed method tries to select and modify some embedding costs to enhance the security of existing steganography. As described in Section IV-A, there are three important factors that would affect cost modification rate R(n,p1,p2) , that is, n,p1 and p2 . In our experiments, we fixed n=5,p1=0.7 and p2=0.1 for all steganographic methods and payloads. The average cost modification rates are shown in Fig. 7. From Fig. 7, we obtain three following observations:

All cost modification rates are less than 10%, more precisely, 5.08%. The reason is that there is a upper bound of the cost modification rates:
==≤R(n,p1,p2)|(M+n∪M−n)∩M(p1,p2)||M||(M+n∪M−n)∩Lowρ0(p1)∩Top|Gc|(p2)||M|min(p1,p2)(8)
View SourceIn our experiments, min(p1,p2)=min(0.7,0.1)=0.1 .

For a given steganography, the cost modification rates would increase with decreasing the embedding payloads. The main reason is that the lower embedding payloads, the less pixel differences between cover and stego, and thus it is expected that the more same gradients between cover and its resulting stego. Taking an extreme example, when the embedding payload becomes 0, the cover image is exactly the same as its stegos, then Gc=Gsk,k=1,…,n , and
====M+n{(i,j)∣Gc(i,j)>0∩Gsk(i,j)>0,k=1,…,n}{(i,j)∣Gc(i,j)>0}M−n{(i,j)∣Gc(i,j)<0∩Gsk(i,j)<0,k=1,…,n}{(i,j)∣Gc(i,j)<0}(9)
View SourceRight-click on figure for MathML and additional features.Thus, the set M+n∪M−n={(i,j)∣Gc(i,j)≠0} would include all coordinates of embedding units within cover whose gradients are not 0.

For a given embedding payload, the cost modification rates are different for different steganographic methods. Usually, we need change relatively more embedding costs for HILL and CMD-HILL, while change the least embedding costs for S-UNIWARD.

Fig. 7. - The average cost modification rates for different steganographic methods and embedding payloads. Here, 
$n=5$
, 
$p_{1}=0.7, p_{2}=0.1$
.
Fig. 7.
The average cost modification rates for different steganographic methods and embedding payloads. Here, n=5 , p1=0.7,p2=0.1 .

Show All

For comparative studies, we also show the average cost modification rates for two related methods in Table IX. From Table IX, we observe that our cost modification rates (less than 5.03%) are always the lowest among the three methods, while they are the highest (over 64.70%) for AEN based methods. The average cost modification rates of ADV-EMB based methods vary from 10.65% to 30.29%.

TABLE IX Average Cost Modification Rates (%) for ADV-EMB,AEN and the Proposed Method
Table IX- 
Average Cost Modification Rates (%) for ADV-EMB,AEN and the Proposed Method
SECTION V.Conclusion
In this paper, we propose a novel method based on adversarial examples to enhance the security of existing steganographic methods. The contributions of this paper are as follows:

Unlike existing related works, the proposed steganography can make full use of the gradients from cover and generated multiple stegos to select and adjust original embedding costs within covers. Besides gradient signs, the proposed method proposes to combine the amplitudes of gradients and original embedding costs of cover for selecting candidate embedding costs for subsequent modification.

Extensive results show that by just modifying a tiny part (less than 5% in most cases) of original embedding costs, the proposed method can significantly improve most modern steganographic methods in spatial domain evaluated on re-trained steganalyzers, and outperform related non-iterative works based on adversarial examples. Furthermore, the security performances evaluated on different image database show that the generalization of the proposed method is good.

There are several important issues worth further studying. For instance, the three important parameters (i.e., n,p1 and p2 ) of the proposed method are determined by a special steganography (i.e., HILL), and special steganalyzers (i.e., SRM and Deng-Net) in our experiments. How to determine such parameters adaptively according to the steganography, embedding payload and image dataset would be considered. In the proposed method, just one targeted steganalyzer network is used for adversarial attack. In future, multiple networks and/or steganalyzers based on hand-crafted features would be considered. In addition, we will combine some iterative schemes, such as min max [12], [13], to further improve its steganography security.