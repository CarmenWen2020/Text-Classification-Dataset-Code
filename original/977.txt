Steganographic schemes are commonly designed in a way to preserve image statistics or steganalytic features. Since most of the state-of-the-art steganalytic methods employ a machine learning (ML)-based classifier, it is reasonable to consider countering steganalysis by trying to fool the ML classifiers. However, simply applying perturbations on stego images as adversarial examples may lead to the failure of data extraction and introduce unexpected artifacts detectable by other classifiers. In this paper, we present a steganographic scheme with a novel operation called adversarial embedding (ADV-EMB), which achieves the goal of hiding a stego message while at the same time fooling a convolutional neural network (CNN)-based steganalyzer. The proposed method works under the conventional framework of distortion minimization. In particular, ADV-EMB adjusts the costs of image elements modifications according to the gradients back propagated from the target CNN steganalyzer. Therefore, modification direction has a higher probability to be the same as the inverse sign of the gradient. In this way, the so-called adversarial stego images are generated. Experiments demonstrate that the proposed steganographic scheme achieves better security performance against the target adversary-unaware steganalyzer by increasing its missed detection rate. In addition, it deteriorates the performance of other adversary-aware steganalyzers, opening the way to a new class of modern steganographic schemes capable of overcoming powerful CNN-based steganalysis.
SECTION I.Introduction
Image steganography is the art and science of concealing covert information within images. It is usually achieved by modifying image elements, such as pixels or DCT coefficients. On the other side of the game, steganalysis aims to reveal the presence of secret information by detecting whether there are abnormal artifacts left by data embedding.

The developing history of steganography and steganalysis is rich of interesting stories, as they compete with each other and they benefit and evolve from the competition [1]. The earliest steganographic method was implemented by substituting the least significant bits of image elements with message bits. The stego artifacts introduced by this method can be effectively detected by Chi-squared attack [2], or steganalytic features based on first-order statistics [3]. In this initial phase of the competition, statistical hypothesis testing or a simple linear classifier such as FLD (Fisher Linear Discriminant) can serve the need of steganalysis. The first-order statistics can be restored after data embedding, as was done in [4]. The abnormal artifacts in the first-order statistics can also be avoided as in [5] and [6]. As a consequence, more powerful steganalytic features based on the second-order statistics [7], [8] were proposed. In this period, advanced machine learning (ML) tools, such as SVM (Support Vector Machine), were operated on high-dimensional features (where the dimension is typically several hundreds). These methods were very effective in detecting steganographic schemes even if the first-order statistics were preserved. Modern steganographic schemes are designed under the framework of distortion minimization [9]. The embedding cost of changing each image element is specified by a cost function, and a coding scheme is employed to convey information by minimizing the distortion, which is computed as the total cost of modified elements. The schemes in [10]–[11][12][13][14][15] use effective cost functions. As a counter-measure, state-of-the-art steganalytic methods adopt higher-order statistics with much higher dimensional features (where the dimension is typically thousands or even more than ten thousands), such as in [16]–[17][18][19][20]. More sophisticated ML methods, such as the ensemble classifier [21], have also been employed. Steganalytic methods based on deep learning [22]–[23][24][25][26][27] have rapidly gained an increasing attention in recent years. Without the need of designing hand-crafted features, deep convolutional neural networks (CNN) shows a promising way in automatic feature extraction and classification for steganalysis. Incorporating some prior domain knowledge into the network design, such as using high-pass filters for pre-processing, outstanding performance can be obtained.

The high-dimensional hand-crafted or deep-learned features with the powerful supervised ML schemes present a great challenge to steganography. A promising strategy for the steganographer is to use side information which is not available to the steganalyst, such as using the camera sensor noise during message embedding [28] and the compression noise during JPEG compression [12]. However, the side information is not always available for all kinds of cover images, especially for those already compressed in JPEG format. As a consequence, better steganographic schemes suitable for more general conditions are needed.

As the dimension of steganalytic features increases, it is difficult for steganograhpy to preserve all statistical features during data embedding. This motivates us to find a better way to resist steganalysis by countering the ML based classifier. Recent studies [29], [30] have shown that ML systems are vulnerable to intentional adversarial operations. For example, Do et al. [31] showed that the image retrieval system based on SIFT features could be attacked by tweaking the keypoint orientations. Chen et al. [32] showed that the performance of an image forensics detector with a SVM classifier could be greatly degraded by a rather simple gradient based attack. There are also some research evidences indicating that classifier based on deep learning can be easily fooled by adversarial examples [33]–[34][35][36][37], which are formed by applying small but intentional perturbations to inputs in order to make the classification model yield erroneous outputs. However, applying adversarial perturbations as in [33] on stego images may lead to data extraction failures. The perturbations may also introduce unexpected artifacts detectable by other classifiers.

The progress in adversarial signal processing [38] inspired us to design a steganographic scheme that is resistant against ML based steganalyzers. In this paper, we propose a scheme called ADV-EMB (Adversarial Embedding). Targeted to counter a deep learning based steganalyzer [26], we generate stego images via adversarial embedding, an operation that takes into account both the embedding of the stego message and the necessity to fool the target steganalyzer. ADV-EMB is implemented under the framework of distortion minimization, and based on a baseline steganographic scheme adopting a conventional embedding mechanism. Specifically, ADV-EMB adapts the cost assignment process by asymmetrically adjusting a portion of embedding costs according to the gradients backpropagated from the deep learning steganalyzer. In order to avoid unnecessary extra modifications, the amount of image elements with adjustable costs is kept to be minimal. Experimental results show that the adversarial stego images generated by ADV-EMB can successfully fool the target deep learning steganalyzer, which was trained with several hundreds of thousands of training images.

Note that although to some extent being similar to the ASO (Adaptive Steganography by Oracle) scheme [39], [40] which also utilizes the information of a classifier, ADV-EMB does not aim to preserve any specific statistical model and does not directly generate embedding costs as [39] and [40]. ADV-EMB has a wider range of application than SI-UNWIARD [12], as it does not require side information which is only available at the steganographer’s side. The target steganalyzer can be constructed on the steganographer’s side and does not need to be exactly the same as the one used by a steganalyst. At the same time as the submission of this article, a related work proposed by Zhang et al. [41] tried to iteratively add adversarial perturbations on cover images first, and then embed messages into the “enhanced” cover images. The stego images generated in this way are robust against the detection of the target steganalyzer. However, the perturbations may introduce unexpected artifacts detectable by other non-target steganalyzers. In contrast, by our proposed method without over-adaption, although the adversarial stego images have a slightly higher rate of modifications then conventional stego images, they are less detectable by other advanced hand-crafted feature based steganalyzers and deep learning based steganalyzers.

The main contributions of our work are as follows:

A new strategy to fool the ML based steganalyzers, which is not based on the attempt to preserve a specific image statistical model, is proposed. We believe this is a promising way to counter steganalysis.

A practical steganographic scheme called ADV-EMB with adversarial embedding operation is proposed. As opposed to conventional approaches used to create adversarial examples in other machine learning domain, adversarial stego images generated by the ADV-EMB scheme are capable of carrying secret information.

Based on the knowledge available to the steganographer and the steganalyst, different adversarial models are considered, wherein the proposed scheme can achieve state-of-the-art security performance.

The rest of the paper is organized as follows. In Section II, we give the foundation of the proposed steganographic scheme, and differentiate two kinds of adversarial scenarios. We present the idea as well as a practical implementation of the proposed ADV-EMB steganographic scheme in Section III. Extensive experiments are performed and the results are reported in Section IV to demonstrate the performance of the ADV-EMB scheme under different adversarial conditions when compared to a baseline steganographic method. Conclusions are presented in Section V.

SECTION II.Technical Foundation
In this article, capital letters in bold are used to represent matrices. The corresponding lowercase letters are used for matrix elements. The flourish letters are used for sets. Specifically, cover and stego images are respectively denoted as C=(ci,j)H×W and S=(si,j)H×W , where H and W are the height and width of the image. We use Z=(zi,j)H×W∈Z to denote the proposed adversarial stego image. Note that Z is a special type of S . The corresponding image sets are denoted as C , S , and Z , respectively.

A. Practical Evaluation Metrics for Steganographic Security
The fundamental requirement of steganalysis is to differentiate stego images from cover images. To accomplish this task in a supervised ML setting, for analyzing an image X , the steganalyzer may train a classifier ϕC,S with binary output using training data from C and S , and obtain the decision criterion as follows:
{Xis a cover image,Xis a stego image,if phi _mathcal C,S(mathbf X)=0,if phi _mathcal C,S(mathbf X)=1.(1)
View SourceRight-click on figure for MathML and additional features.The trained classifier is called steganalyzer. The missed detection happens when stego images are misclassified, and the false alarm happens when cover images are misclassified. The corresponding error probabilities are defined as:
PϕC,Smd=Pr{ϕC,S(S)=0},(2)
View SourceRight-click on figure for MathML and additional features.and
PϕC,Sfa=Pr{ϕC,S(C)=1}.(3)
View SourceUnder equal Bayesian prior for cover and stego, the total error rate is
PϕC,Se=PϕC,Smd+PϕC,Sfa2.(4)
View SourceThe goal of a steganalyst is to minimize PϕC,Se , while the goal of a steganographer is the opposite.

B. Distortion Minimization Framework for Steganography
Under the distortion minimization framework, steganography is formulated as an optimization problem with a payload constraint, i.e.,
minS D(C,S),s.t. ψ(S)=k,(5)
View Sourcewhere D(C,S) is a function measuring the distortion caused by modifying C to S , ψ(S) represents the message payload extracted from S , and k is the amount of payload (measured in bits). A typical additive distortion function for ternary embedding, such as those used in [11]–[12][13][14][15], is defined as:
D(C,S)=∑i=1H∑j=1Wρ+i,jδ(mi,j−1)+ρ−i,jδ(mi,j+1),(6)
View Sourcewhere mi,j=si,j−ci,j is the difference between the cover and the stego elements, δ(⋅) is an indication function:
δ(x)={1,0,x=0,otherwise,(7)
View SourceRight-click on figure for MathML and additional features.and ρ+i,j and ρ−i,j are respectively the cost of increasing and decreasing ci,j by 1. Although different steganographic schemes may employ different cost functions, a rule of thumb is that large cost values are assigned to elements more likely to introduce abnormal artifacts and thus leading to low probabilities of modification, and vice versa. In most schemes, ρ+i,j=ρ−i,j , leading to equal probabilities of increasing or decreasing ci,j . With the CMD (clustering modification direction) strategy [42], [43], the costs of increasing or decreasing are asymmetrically updated during embedding in favor to a synchronized direction in neighborhood.

C. Steganographer’s Knowledge About Steganalyzer
The steganographer may have different levels of knowledge about ϕC,S , such as the classification scheme and the training data. In this paper, we will not discuss what is the best strategy the steganographer should take according to the accessibility of these knowledge. Instead, we assume the gradients of the loss function with respect to the input, which are backpropagated from a ML based steganalyzer ϕC,S , are accessible to the steganographer. This is the foundation of the proposed steganographic scheme. In Section III, we will propose a scheme to fool such a steganalyzer with adversarial stego images. We will also investigate in the experimental part how well the adversarial stego images perform under other advanced steganalyzers (e.g., ϕ′C,S ) when the knowledge of these steganalyzers is unavailable.

D. Steganalyst’s Knowledge About Adversarial Stego Images
If a steganalyst is unaware of the adversarial operation presented to his steganalyzer, he is called adversary-unaware steganalyst. Otherwise, he is called adversary-aware steganalyst. One of the possible reactions of an adversary-aware steganalyst is to re-train the classifier with adversarial stego samples to obtain a new steganalyzer ϕC,Z , or use other advanced steganalyzers (e.g., ϕ′C,Z ) unknown to the steganographer. This may present two challenging cases for a steganographer and we will discuss these scenarios in the experiments.

SECTION III.The Proposed ADV-EMB Steganographic Scheme
In this section, we will propose a novel steganographic scheme, called ADV-EMB, to counter a target steganalyzer. First, we will outline the basic idea of the proposed scheme. Then we will discuss the two most important operations in the proposed scheme, i.e., adversarial embedding and minimizing the amount of adjustable elements, in detail. Finally, we will give a practical implementation of ADV-EMB.

A. Basic Idea
In the proposed scheme, the image elements are randomly divided into two groups, i.e., a common group containing common elements, and an adjustable group containing adjustable elements. Data embedding is performed in two phases. In the first phase, a portion of the stego message is embedded into the common group by using a conventional baseline steganographic scheme. In the second phase, the remaining part of the stego message is embedded into the adjustable group by using the proposed adversarial embedding scheme. Adjustable elements are modified in such a way that a target steganalyzer would output a wrong class label. We use a well-performed deep learning based steganalyzer, i.e., Xu’s CNN [26], as the target steganalyzer, since the gradient values of its loss function with respect to the input can be used to guide the modification of adjustable elements. Other steganalyzers possessing such a property may also be used. The details will be given in Section III-B. In order to prevent over-adaption to the target steganalyzer and enhance the security performance against other advanced steganalyzers, the number of adjustable elements is minimized, resulting in a minimization problem with constraints. The details will be given in Section III-C.

In adversarial ML, an attack with full knowledge of a ML classifier is called a white-box attack. When the model, parameters and training data of the target classifier are not known, the attack is referred to as a black-box attack [44]. In our case, we adopt a white-box assumption in designing the steganographic scheme, however, we also test the new scheme in black-box scenarios against feature-based and CNN-based steganalyzers other than the targeted one (see Section IV).

B. Adversarial Embedding
Denote y as the ground truth label of X . In steganalysis, we have y∈{0,1} , where 0 indicates a cover and 1 indicates a stego. Let L(X,y;ϕC,S) be the loss function of a steganalyzer ϕC,S . For example, for a deep neural network steganalyzer, the binary decision could be given as
ϕC,S(X)={0,1,if F(X)<0.5,if F(X)≥0.5,(8)
View Sourcewhere F(X)∈[0,1] is the network output indicating the probability that X is a stego. The corresponding loss function may be designed in a form of cross entropy as
L(X,y;ϕC,S)=−ylog(F(X))−(1−y)log(1−F(X))(9)
View SourceIn [33]–[34][35], adversarial examples are generated to fool ML models by updating input elements xi,j according to the gradient of the loss function with respect to the input (abbreviated as gradient if it is not specified otherwise), i.e., ▽xi,jL(X,y^;ϕC,S) , by using a target label y^ . However, it is impossible to directly apply these methods for securing steganography. In fact, modifying the elements of a stego image may lead to the failure of data extraction thus contradicting the aim of steganography. This motivates us to design an embedding method with two objectives of equal importance: performing adversarial operation to combat steganalyzer ϕC,S and performing data embedding to carry information. To this end, we propose a method that we will call adversarial embedding to generate adversarial stego images under the framework of steganographic distortion minimization [9].

In [33], it is observed that when a perturbation signal associated with a target label is added to the input, the updated input, called adversarial example, is usually misclassified into the target class by the ML classifier. The perturbation signal can be designed in various ways, including using the gradient of the loss function with respect to the input. Since adding a perturbation with the inverse sign of the gradient has an adversarial effect, the objective of the proposed adversarial embedding is to modify image elements in such a way that the sign of the modification tends to be in accordance with the inverse sign of the gradient. To achieve such an objective with a high probability, together with data embedding, we operate under the distortion minimization framework by making the embedding costs bear the following properties:
⎧⎩⎨⎪⎪⎪⎪ρ+i,j<ρ−i,j,ρ+i,j=ρ−i,j,ρ+i,j>ρ−i,j,if−▽xi,jL(X,y^;ϕC,S)>0,if−▽xi,jL(X,y^;ϕC,S)=0,if−▽xi,jL(X,y^;ϕC,S)<0.(10)
View Source

Such costs yield asymmetric probabilities of increasing and decreasing the element xi,j , if the gradient is not zero. In this way, data can be embedded into the image elements, and the direction of the modification has the effect of inducing the steganalyzer ϕC,S to decide for the target label y^=0 . Please note that the adversarial embedding may lead to higher modification rates due to the asymmetric embedding costs.

C. Minimum Amount of Adjustable Elements
With adversarial embedding, the adversarial stego images may effectively evade steganalysis. However, since the costs of increasing and decreasing are asymmetric, it increases the number of changed image elements. The reason is that the maximum entropy can only be obtained when the image element has an equal probability of increasing and decreasing. With the payload constraint, asymmetric costs lead to a higher change rate when compared to symmetric costs. Although a higher change rate may not necessarily lead to a worse security performance, we would still like to minimize it by reducing the frequency of adversarial embedding. This is due to three facts. First, it is sufficient to fool the ML classifier by using only a part of the elements to perform the adversarial operation, as shown in [44]. In fact, it is even unnecessary to perform adversarial embedding to those stego images which are generated by conventional steganographic schemes but are already incorrectly classified by the target steganalyzer. Second, if all elements are used for adversarial embedding, the generated adversarial stego images may be overly adapted to the target steganalyzer and may possibly become more detectable by other advanced steganalyzers. We may minimize the amount of elements for adversarial embedding to prevent introducing other detectable artifacts that can be exploited by an adversary-aware steganalyzer. Third, when the change rate is minimized, the image quality should be preserved better.

We propose to divide image elements into two groups i.e., a common group containing common elements for conventional steganographic embedding, and an adjustable group containing adjustable elements for adversarial embedding. The objective is that the amount of adjustable elements should be minimized while the target steganalyzer should output a wrong class label. Mathematically speaking, the problem is formulated as
min β,s.t. ϕC,S(Z)=0and ψ(Z)=k,(11)
View SourceRight-click on figure for MathML and additional features.where β∈[0,1] denotes the ratio of the amounts of adjustable elements to all image elements, and ψ(⋅) and k have the same definition as in Eq.(5). It is obvious that there is no explicit solution to such a problem. To solve it efficiently, the target steganalyzer is employed to numerically search for “just enough” amount of adjustable elements to satisfy the constraints in (11). The details will be described in the next subsection.

D. A Practical Implementation of ADV-EMB
In this part, we present a practical ADV-EMB steganographic scheme. Since JPEG images are widely used and pervasive on the Internet, we use them as cover. We use Xu-CNN [26] as the target steganalyzer and J-UNIWARD [12] as the baseline steganographic scheme for conventional data embedding. The target steganalyzer is a CNN model composed of a fixed DCT filtering layer and 20 learnable convolutional layers. To the best of our knowledge, it achieves the best performance in detecting JPEG image steganography. In this paper, we use JPEG cover images and stego images generated by J-UNIWARD to train the target steganalyzer. However, other image formats, conventional embedding schemes or steganalyzers, may also be applicable, as indicated in Section III-A. The detailed steps of the proposed scheme are described as follows, and Fig. 1 illustrates an example.

For a cover image C=(ci,j)H×W , use a conventional cost function (such as in J-UNIWARD) to compute the initial embedding costs, i.e., {ρ+i,j,ρ−i,j} , for the DCT coefficients. Initialize the parameter β=0 .

Divide the elements in C into two disjoint groups, i.e., a common group containing l1=[H×W×(1−β)] common elements, and an adjustable group containing l2=H×W−l1 adjustable elements. In Fig. 1, common group and adjustable group are labeled as blue and red boxes respectively. The positions of these two kinds of elements can be fixed in advance or randomized with the details to be discussed later.

Embed k1=[k×(1−β)] bits into the common group using the initial embedding costs computed in Step 1 by applying a distortion minimization coding scheme, such as STC (syndrome-trellis codes) [45]. The resulting image is denoted as Zc . In Fig. 1, the modified coefficients in common group are highlighted with blue strides.

Compute the gradients ▽zi,jL(Zc,y^;ϕC,S) of the steganalyzer using the target label y^=0 . Update the embedding costs for the adjustable elements by
q+i,j=q−i,j=⎧⎩⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪ρ+i,j/α,ρ+i,j,ρ+i,j.α,if -bigtriangledown _z_i,j L(mathbf Z_c, 0; phi _mathcal C,S)> 0,if -bigtriangledown _z_i,j L(mathbf Z_c, 0; phi _mathcal C,S)=0,if -bigtriangledown _z_i,j L(mathbf Z_c, 0; phi _mathcal C,S)< 0,⎧⎩⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪ρ−i,j/α,ρ−i,j,ρ−i,j.α,if -bigtriangledown _z_i,j L(mathbf Z_c, 0; phi _mathcal C,S)< 0,if -bigtriangledown _z_i,j L(mathbf Z_c, 0; phi _mathcal C,S)=0,if -bigtriangledown _z_i,j L(mathbf Z_c, 0; phi _mathcal C,S)>0,(12)(13)
View SourceRight-click on figure for MathML and additional features.where α is a scaling factor larger than 1 to ensure that equations(12) and (13) necessarily fulfill equation(10). α is set to 2 in this work. Embed k2=k−k1 bits into the adjustable elements by using the updated embedding costs computed from (12) and (13) and the same coding scheme used for the common group. The resultant image is Z . Figure 1 shows that the costs of the elements in the adjustable group are either doubled or halved, depending on the signs of the corresponding gradients. After data embedding, the modified coefficients in adjustable group are highlighted with red strides.

Take Z as the input of the steganalyzer ϕC,S . If ϕC,S(Z)=0 , which means the adversarial stego Z can fool the steganalyzer with a minimum value of β , use Z as the output and terminate the embedding process. Otherwise, the amount of adjustable elements may not be enough. In this case, update β by β+Δβ , and repeat Step 2 to Step 5 until β=1 . We use Δβ=0.1 in this work. If β=1 and ϕC,S(Z)=1 , which corresponds to the failure case of adversarial embedding, we just use a conventional steganographic scheme for embedding and output a conventional stego image.


Fig. 1.
Illustration of the process of the proposed ADV-EMB scheme.

Show All

Since the same coding scheme, such as STC, is used both in the adjustable group and the common group, the message receiver neither needs to be informed about the value of β , nor needs to know which image elements belong to to the adjustable group or the common group. Data is extracted in the same way as the baseline steganographic scheme.

As we know, in most existing steganographic schemes, an embedding order of image elements is generated by scrambling the indexes of image elements, where the scrambling operation is determined by a secret key shared between the sender and the receiver. The secret key can be fixed for different images, or changed as a session key. In the ADV-EMB implementation, the positions of the common elements and that of adjustable elements can be determined as follows. First, generate an embedding order in the same way as the baseline steganographic scheme. Then, the common group is formed by the first l1=[H×W×(1−β)] elements according to the embedding order. Finally, the adjustable group is formed by the remaining elements. In other words, the positions of adjustable elements can be fixed or randomized for different images, depending on whether the embedding order is fixed or randomized. We recommend randomization for enhancing security.

SECTION IV.Experiments
In order to evaluate the performance of the proposed ADV-EMB scheme, we conducted the following experiments.

We evaluated the performance of ADV-EMB in the presence of an adversary-unaware steganalyst who trained his steganalyzer with conventional stego images. This corresponds to a white-box attack in adversarial examples [33] and it is the most favorable case for the steganographer. It will be reported in Section IV-B. We also evaluated the performance when non-target feature-based or CNN-based steganalyzers were used.

We evaluated the performance of ADV-EMB in the presence of an adversary-aware steganalyst who re-trained his steganalyzer with adversarial stego images. This corresponds to a challenging case for the steganographer. It will be reported in Section IV-C.

We simulated the situation when the knowledge of the steganographer and that of the steganalyst were alternatively updated. To the best of our knowledge, this is the first work to investigate iterative adversarial conditions for steganography and steganalysis. It will be demonstrated in Section IV-D.

Experimental results in Section IV-E will show why adversarial embedding guided by gradients and minimum amount of adjustable elements are important in the proposed scheme.

The role of randomizing the positions of the adjustable elements will be discussed in Section IV-G.

We performed some experiments on another image set for further evaluation, and the results will be shown in Section IV-H.

We evaluated the performance on spatial domain images, and the results will be given in Section IV-I.

The common settings and notations in the experiments will be described in Section IV-A. Some statistical information about the stego image sets will be provided in Section IV-F.

A. Settings
1) Image Set:
The following two cover image sets were respectively used.

Basic500k, denoted by CB . It was obtained by randomly selecting 5×105 JPEG images with size larger than 256×256 from ImageNet and then cropping their left top 256×256 regions. The images were further converted to grayscale and re-compressed into JPEG format with quality factor 75. This dataset has been used in [27] to train CNN-based steganalyzers. Although the images in Basic500K suffer from double/multiple JPEG compression, their use does not jeopardize the practical security of the embedded scheme. In fact, double/multiple JPEG compressed images are common in practice. Unless specified otherwise, the experiments were carried out on this image set. To use the images efficiently under different circumstances, CB was randomly split into three disjoint subsets, C0B , C1trnB , and C1tstB , with 2.5×105 images, 1.5×105 , and 1×105 images, respectively. C0B was used to train the target steganalyzer, while C1trnB and C1tstB were used to generate adversarial stego images. Specifically, C1trnB and its stego counterparts were used for training adversary-aware steganalyzers, and C1tstB and its stego counterparts were used for testing the performance of both adversary-unaware and adversary-aware steganalyzers.

JPEG-BOSSBase, denoted by CJ . In order to verify the performance of ADV-EMB on an image set with distinct difference from CB , we generated this set without any possible double JPEG compression artifacts. We used Photoshop CS6 for demosaicking the full-resolution raw images from the BOSSBase v1.01 image set [46] and then converted them into grayscale images. Later we down-sampled the obtained images with a Bicubic kernel so that the smaller image dimension was 256. Then we central cropped the longer dimension and we got images of size 256×256 . Finally, we compressed the images into JPEG format with quality factor 75 to obtain the JPEG-BOSSBase dataset. The experiments in Section IV-H were carried out on this image set. CJ was randomly split into two disjoint subsets, CtrnJ and CtstJ , each with 5000 images. Both CtrnJ and CtstJ were used to generate adversarial stego images, and their roles are similar to C1trnB and C1tstB , respectively.

2) Steganalyzers:
Four different steganalyzers were used to evaluate the security of the steganographic schemes. The details are described as follows.

Xu-CNN steganalyzer [26], denoted as ϕ . To the best of our knowledge, it is the best performing date-driven JPEG CNN steganalyzer. The 20-layer CNN steganalyzer was proposed by Xu, and we built the CNN structure and set all training parameters as in [26], with the only difference that the batch size was set to 100 during the training stage, with 50 cover images and their corresponding stego counterparts. The CNN model trained at the 100000-th iteration was used as the steganalyzer.

Zeng-CNN steganalyzer [27], denoted as ϕ′ . This deep learning steganalyzer involves two stages, a hand-crafted stage including quantization and truncation operation, and a learnable stage composed of three subset networks. We trained this steganalyzer with the same settings as in [27].

GFR steganalyzer [20], denoted as ϕ′′ . It is based on 17000 histogram features generated with Gabor filters and an FLD ensemble classifier [21].

DCTR steganalyzer [19], denoted as ϕ′′′ . It is based on 8000 dimensional DCT residual features and an FLD ensemble classifier [21].

The steganalytic performance was evaluated by the missed detection rate as in (2), the false alarm rate as in (3), and the total error rate as in (4).

3) Steganographic Schemes:
We used two steganographic schemes to generate stego images.

J-UNIWARD [12]: It was used as a baseline steganographic scheme. The embedding costs of DCT coefficients were calculated in the wavelet domain using a Daubechies wavelet filter bank. The corresponding stego image sets are denoted as S0B , S1B , StrnJ , and StstJ .

ADV-EMB: In the proposed scheme, J-UNIWARD was used to compute the initial embedding costs and perform the conventional embedding. The steganalyzer ϕC0B,S0B based on Xu-CNN was used as the target steganalyzer for adversarial embedding. The corresponding adversarial stego image sets are denoted as Z0B , Z1B , ZtrnJ , and ZtstJ . The scaling parameter used in (12) and (13) was set to α=2 , where we have tried α∈{1.5,2,3,5,10} and found only minor difference in performance.

The optimal embedding simulator [9] was employed for both J-UNIWARD and ADV-EMB. The Matlab implementation of J-UNIWARD was used1. Our proposed ADV-EMB scheme was implemented using TensorFlow with Python interface. The experiments were run on a NVIDIA Tesla K80 GPU platform. The embedding payload was measured by bits per non-zero cover AC DCT coefficient (bpnzAC) as in [12], [26], and [27]. In Section IV-B and IV-C, we conducted experiments on 0.1, 0.2, 0.3, 0.4, and 0.5 bpnzAC. For the rest of the experiments, we used 0.4 bpnzAC since the steganalyzers perform better on higher payloads.

B. Performance Against an Adversary-Unaware Steganalyst
In this part, we study the case where the knowledge of the steganalyzer is exposed to the steganographer, but the steganalyst is unaware of the adversarial operation and still uses the current steganalyzer. In particular, we assume that the Xu-CNN steganalyzer ϕC0B,S0B , which has been trained on the image set {C0B,S0B} , is available to the steganographer. Note that the steganographer does not need to have {C0B,S0B} given that the steganalyzer ϕC0B,S0B is known. The steganographer can use ϕC0B,S0B to generate an adversarial stego set Z1B from the cover set C1B .

We would like to know how well does the steganalyzer ϕC0B,S0B perform on classifying {C1tstB,Z1tstB} when compared to classifying {C1tstB,S1tstB} . The experimental results are reported in Table I and the better performed results are shown in bold. Note that under the same payload rate, the false alarm rate Pfa is the same for {C1tstB,Z1tstB} and {C1tstB,S1tstB} , due to the fact that the steganalyzer was trained on {C0B,S0B} but tested on C1tstB , which is shared in {C1tstB,Z1tstB} and {C1tstB,S1tstB} . However, we can observe that the missed detection rate Pmd is much higher for Z1tstB than for S1tstB . These results indicate that the adversarial stego images generated by ADV-EMB can effective evade detection by the target steganalyzer.

TABLE I The Security Performance (in %) Against an Adversary-Unaware Steganalyzer
Table I- 
The Security Performance (in %) Against an Adversary-Unaware Steganalyzer
In order to investigate the case where the adversarial stego images are analyzed by steganalyzers other than the target one, we conducted experiments by using three advanced steganalyzers, i.e., ϕ′C0B,S0B , ϕ′′C0B,S0B , and ϕ′′′C0B,S0B , to perform the same classification tasks. The experimental results reported in Table I show that the performance of these detectors on the adversarial stego images are, at least to some extent, worse than those obtained on the stego images generated by J-UNIWARD. Although being designed to fool a target steganalyzer, the ADV-EMB scheme shows a certain effectiveness also against non-target steganalyzers. We speculate that this adaptability to other steganalyzers is due to the transferability of adversarial stego images. As shown by recent studies [44], [47], adversarial examples can be transferred across different machine learning models as long as such models are used to carry out the same task. Our results indicate that this phenomenon also applies to steganalysis (at least in the framework studied in this paper). As a result, to counter an unknown steganalyzer, a steganographer may use a local well-performing CNN-steganalyzer as the target steganalyzer. Such an observation largely widens the use range of the proposed ADV-EMB scheme.

C. Performance Against an Adversary-Aware Steganalyst
In this part, we study the case where the steganalyst is aware of the adversarial embedding operation. As stated in Section II-D, one of his possible reactions is to re-train the steganalyzers with adversarial stego images. The adversarial stego images Z1trnB and Z1tstB were generated as in Section IV-B, where the steganographer only relies on the steganalyzer ϕC0B,S0B to generate adversarial stego images. Then, we trained the steganalyzers based on {C1trnB,Z1trnB} and tested on {C1tstB,Z1tstB} . In this way, the image sets for data embedding (i.e., C1trnB and C1tstB ) and that for the training target steganalyzer (i.e., C0B ) were different, thus ensuring that ADV-EMB did not use any prior knowledge of the image set.

The experimental results we obtained are reported in Table II. It can be observed that compared to the target steganalyzer which is easily fooled by the adversarial stego images, a re-trained steganalyzer can better detect the adversarial embedding operations. However, compared to the baseline J-UNIWARD scheme, the proposed ADV-EMB scheme still achieves a better security performance. For example, ADV-EMB gets a 25.8% total error rate for 0.4 bpnzAC, which is comparable to J-UNIWARD with 25.3% for 0.3 bpnzAC. This means that under the same risk level of detection, ADV-EMB attains 0.1 bpnzAC more payload. As also shown in Table II, when we used the other three non-target steganalyzers ϕ′ , ϕ′′ , and ϕ′′′ for detection, higher total error rates are obtained on {C1tstB,Z1tstB} than on {C1tstB,S1tstB} , showing once again that ADV-EMB outperforms the baseline scheme.

TABLE II The Security Performance (in %) Against an Adversary-Aware Steganalyzer

D. Sequential Iterative Process Between Steganographer and Steganalyst
In this part, we study a scenario wherein the steganographer and the steganalyst adjust their steganalyzer iteratively each time by adapting their knowledge about the scheme adopted by the adversary. It is assumed the steganographer takes the first step and then the steganalyst takes the second, together defining a round in the competing process.

The experiments were carried out under the following assumptions for each round. We assume that the steganographer uses a target steganalyzer which is trained by conventional stego images and adversarial stego images from all previous rounds, as it is reasonable to use all the available knowledge. Such a steganalyzer can be regarded as adversary-unaware for the current round (and also future rounds), but as adversary-aware for previous rounds. The adversary-aware steganalyst uses the latest generated adversarial stego images to train the steganalyzer. Such a steganalyzer may be more focused on detecting adversarial stego images generated in the current round.

We used the following experimental setting.

The current-round-adversary-unaware steganalyst is unaware of the adversarial stego images generated in the current round. For the first round, conventional stego images generated with the baseline steganographic scheme are used for training. For the subsequent rounds, the steganalyzer is trained on C0B and the corresponding adversarial stego images obtained in all previous rounds.

The steganographer sets the target steganalyzer to be the same as the adversary-unaware steganalyzer in the current round and tries to attack it by generating adversarial stego images from C1B .

The current-round-adversary-aware steganalyst is aware of the adversarial operation performed in the current round. Hence the steganalyzer is trained on C1trnB and the adversarial stego counterpart in the current round.

To ease the comparison, the C1tstB and the corresponding adversarial stego counterpart are used to evaluate the performance for both the adversary-unaware steganalyzer and the adversary-aware steganalyzer. Each steganalyzer is used to detect stego images not only in the current round, but also in all previous rounds and future rounds.

Although the iterative process can be endless, we performed three iteration rounds to illustrate the interplay between the steganographer and steganalyst. The current-round-adversary-unaware steganalyst used J-UNIWARD to generate the conventional stego image set S in the first round. The steganographer generated the adversarial stego sets Z , Z˙ , and Z¨ from the first to the third round, respectively. The embedding payload was set to 0.4 bpnzAC. The performances of current-round-adversary-unaware steganalyzer are shown in the first row of each round, and those of current-round-adversary-aware steganalyzer are shown in the second row of each round. From Table III, we can draw the following conclusions for the Pe .

Expectedly, the adversarial stego images generated in the current round can fool the current-round-adversary-unaware steganalyzer with the highest Pe . Compared to conventional stego images, all kinds of adversarial stego images achieve better security under the same steganalyzer. This implies that it is better to use adversarial stego images in any round.

For the current-round-adversary-unaware steganalyzers, as iterations go on, a steganalyzer in a higher round is less effective in detecting conventional stego images. Since the steganalyzers in higher rounds are trained not only on conventional stego images but also on adversarial stego images, the results may imply that the adversarial stego images in higher rounds disturb the current-round-adversary-unaware steganalyzer in detecting conventional stego images.

For the current-round-adversary-aware steganalyzer, although it is only trained with the adversarial stego images from the current round, it is also (more or less) effective to detect conventional stego images and adversarial stego images from other rounds. However, there is no clear trend to indicate whether it performs better on adversarial stego images from previous rounds or future rounds. For example, in Round 3, we can observe that the detection error rate is 27.75% for the current round, which is higher than 26.92% for the first round and lower than 30.57% for the second round. These results seem to show that adversarial stego images introduce somewhat similar modifications to fool the steganalyzer, no matter from which round.

TABLE III The Steganalytic Performance (in %), Given as Pe ( Pfa , Pmd ), in the Iterative Process When the Steganographer and the Steganalyst Iteratively Update Their Knowledge of the Other Side

E. Investigation on Two Important Steps in ADV-EMB
Performing adversarial embedding according to the inverse signs of gradients and using minimum amount of adjustable elements are the two most important steps of the ADV-EMB scheme. In this part, we investigate the effectiveness of each step. Both adversary-unaware and adversary-aware CNN steganalyzers were used for the evaluation, and the embedding payload was set to 0.4 bpnzAC.

1) Case I (Reversing the Signs in ADV-EMB):
In the ADV-EMB scheme, the embedding costs of adjustable elements are asymmetrically adjusted according to the inverse signs of the gradients, as shown in (12) and (13). For comparison, we used the signs of the gradients, instead of the inverse signs, as in the following equations, to conduct experiments:
q+i,j=q−i,j=⎧⎩⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪ρ+i,j/α,ρ+i,j,ρ+i,j.α,if bigtriangledown _z_i,j L(mathbf Z_c, 0; phi _mathcal C,S)> 0,if bigtriangledown _z_i,j L(mathbf Z_c, 0; phi _mathcal C,S)=0,if bigtriangledown _z_i,j L(mathbf Z_c, 0; phi _mathcal C,S)< 0,⎧⎩⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪ρ−i,j/α,ρ−i,j,ρ−i,j.α,if bigtriangledown _z_i,j L(mathbf Z_c, 0; phi _mathcal C,S)< 0,if bigtriangledown _z_i,j L(mathbf Z_c, 0; phi _mathcal C,S)=0,if bigtriangledown _z_i,j L(mathbf Z_c, 0; phi _mathcal C,S)>0.
View SourceThe results are shown in Table IV. Compared with the previous results (see Table I and II), the total error rate of the adversary-unaware steganalyzer drops from 58.5% to 18.3%, and that of the adversary-aware steganalyzer from 25.8% to 19.3%. The degraded performance indicates that taking into account the signs of the gradients plays an important role in producing the adversarial effect.

TABLE IV The Security Performance (in %) With Different Setting for ADV-EMB Under the Payload of 0.4 bpnzac
Table IV- 
The Security Performance (in %) With Different Setting for ADV-EMB Under the Payload of 0.4 bpnzac
2) Case II (Disabling Minimum Amount of Adjustable Elements):
In the ADV-EMB scheme, the number of adjustable elements is minimized through iteratively finding a minimum value of β for (11). In the comparative experiment, we used a fixed value of β for each image, and thus the amount of adjustable elements was the same for all the images. The results for β=0.1 , 0.3, and 0.5 are presented in Table IV. It can be observed that as β increases, the missed detection rate of the adversary-unaware steganalyzer increases, but the total error rate of the adversary-aware steganalyzer decreases. The results indicate that when increasing the number of adjustable elements, it becomes easier to fool the target steganalyzer. However, an excess of adversarial operations may introduce unnecessary artifacts, leading to easier detection by an adversary-aware steganalyzer. Consequently, it is a better choice to use “just enough” amount of adjustable elements by balancing the performance of an adversary-unaware steganalyzer and an adversary-aware steganalyzer.

F. Supplementary Statistical Information
To further understand the proposed ADV-EMB scheme, we provide some supplementary statistical information on the adversarial stego images as follows.

1) Frequency of Adversarial Embedding Operation:
To investigate the statistics on how many adjustable elements are used in the ADV-EMB scheme, the occurrences of β in generating the 2.5×105 adversarial stego images Z1B are given in Table V. Based on the statistics, we can make the following observations.

For a low payload, such as 0.1 bpnzAC, since the steganalyzer is less effective in detecting conventional stego images, adversarial embedding is not necessary for a large portion of the stego images, which corresponds to the case of β=0 . As the payload increases, more stego images requires adversarial embedding (β≠0 ).

A lower failure rate of adversarial embedding is obtained for a higher payload (from 7.52% on 0.1 bpnzAC to 0.47% on 0.5 bpnzAC). This is due to the fact that more elements are involved in modification as the payload increase. For instance, less than 2% elements are used for modification for 0.1 bpnzAC, while more than 11% elements are used for modification for 0.5 bpnzAC, as shown in Table VI. Note that the failure rate is exactly the same as 1−Pmd of the adversary-unaware CNN steganalyzer given in Table I.

For all payloads, larger values of β occur less frequently than lower values. However, this phenomenon cannot be taken for granted since it may be due to the specific images, the baseline steganographic scheme, the target steganalyzer, and the step Δβ used to search the minimum β .

TABLE V The Frequencies of Occurrences of β (in %) in Generating Stego Image Set Z1B for Each Payload. The Sum of Each Column is 100%
Table V- 
The Frequencies of Occurrences of 
$\beta$
 (in %) in Generating Stego Image Set 
$\mathcal{Z}_{B}^{1}$
 for Each Payload. The Sum of Each Column is 100%
TABLE VI The Modification Rate Computed as the Change per Non-Zero AC DCT Coefficient (in %) for the Two Steganographic Schemes Under Different Payloads
Table VI- 
The Modification Rate Computed as the Change per Non-Zero AC DCT Coefficient (in %) for the Two Steganographic Schemes Under Different Payloads
2) Modification Rate:
In Section III-C, we have stated that adversarial embedding would lead to an increasing number of modified image elements due to the asymmetric costs assigned to the adjustable elements. We define the modification rate as the ratio of the number of changed coefficients to the total amount of non-zero AC DCT coefficients. In Table VI, we show the averaged modification rate for J-UNIWARD and ADV-EMB under different payloads on the image set C1B . As expected, we can observe that the modification rates for ADV-EMB are slightly higher than for J-UNIWARD. Besides, the gap in the modification rate between J-UNIWARD and ADV-EMB widens as the payload increases (0.04%, 0.07%, 0.11%, 0.15%, 0.2% for the five payloads, respectively). This is due to the fact that more cases of β≠0 occur for a higher payload, as indicated in Table V. Please note that a higher modification rate may result in lower image quality, which may be a minor disadvantage of the proposed scheme.

G. Discussion on the Role of Randomizing the Positions of Adjustable Elements
In our previous experiments, the positions of adjustable elements are randomized by using different embedding orders for different images. One question is whether there is a difference in security performance between randomized positions and fixed positions. To answer the question, we conducted two comparative experiments and report the results in this part.

In the first experiment, we used a fixed embedding order for different images. As indicated in Section III-D, the fixed embedding order results in the fixed positions of adjustable elements. We adopted the same setting we have used in Section IV-B and IV-C. Adversary-unaware and adversary-aware CNN-based steganalyzers were respectively used for detection. The results we got are shown in Table VII. It can be observed that ADV-EMB with the fixed positions of adjustable elements and that with the randomized positions of adjustable elements do not have obvious difference in performance against the CNN-based steganalyzers. In the second experiment, we used a fixed embedding order and a fixed number of adjustable elements (β=0.3 ) for each image. The payload was set to 0.4 bpnzAC. The results we got are given in Table VIII. It can be observed that the performance does not change much for an adversary-unaware steganalyzer, while it degrades greatly for an adversary-aware steganalyzer. This phenomenon is interesting. Although the fixed positions of adjustable elements are not directly leaked to the adversary-aware steganalyzer, the experimental evidence shows that the data-driven steganalyzer can automatically learn such information. In a similar scenario, when the same key is re-used for data embedding simulation, a CNN-based method [48] is highly effective in detecting different stego images with synchronized modification locations. The performance drops greatly when different keys are used for different images. The phenomenon does not occur for feature based steganalyzers. We speculate that modifications in the same location may present a chance of “collision attack” from the perspective of CNN-based steganalyzers. The neurons may learn strong activations from the synchronized modification positions. Since ADV-EMB employs minimum amount of adjustable elements, the collision effect is eliminated, even when a fixed embedding order is used, as the results reported in Table VII show.

TABLE VII The Security Performance (in %), Given in Pe , of ADV-EMB With a Fixed Embedding Order Against the Adversary-Unaware Steganalyzer and the Adversary-Aware Steganalyzer. The Testing Image Set is {C1tstB,Z1tstB} . Performance Comparison With the Implementation Using a Randomized Embedding Order is Shown in the Parenthesis
Table VII- 
The Security Performance (in %), Given in 
$P_{e}$
, of ADV-EMB With a Fixed Embedding Order Against the Adversary-Unaware Steganalyzer and the Adversary-Aware Steganalyzer. The Testing Image Set is 
$\{\mathcal{C}_{B}^{1tst}, \mathcal{Z}_{B}^{1tst} \}$
. Performance Comparison With the Implementation Using a Randomized Embedding Order is Shown in the Parenthesis
TABLE VIII The Security Performance (in %) of ADV-EMB With a Fixed Embedding Order and a Fixed Number of Adjustable Elements ( β=0.3 ) Against the Adversary-Unaware Steganalyzer and the Adversary-Aware Steganalyzer. The Testing Image Set is {C1tstB,Z1tstB} . Performance Comparison With the Implementation Using a Randomized Embedding Order is Shown in the Parenthesis
Table VIII- 
The Security Performance (in %) of ADV-EMB With a Fixed Embedding Order and a Fixed Number of Adjustable Elements (
$\beta=0.3$
) Against the Adversary-Unaware Steganalyzer and the Adversary-Aware Steganalyzer. The Testing Image Set is 
$\{\mathcal{C}_{B}^{1tst}, \mathcal{Z}_{B}^{1tst} \}$
. Performance Comparison With the Implementation Using a Randomized Embedding Order is Shown in the Parenthesis
H. Performance on JPEG-BOSSBase Image Set
In this part, we evaluate the performance of ADV-EMB on the image set JPEG-BOSSBase. The Xu-CNN steganalyzer ϕC0B,S0B trained on Basic500k was still used as the target steganalyzer in the ADV-EMB scheme and we generated adversarial stego images on JPEG-BOSSBase CJ . We used three adversary-aware steganalyzers to detect ADV-EMB, and used J-UNIWARD as the baseline for comparison. The embedding payload was set to 0.4 bpnzAC. From the results shown in Table IX, we can observe that ADV-EMB performs better than J-UNIWARD on JPEG-BOSSBase. The results indicate that the good performance of the proposed ADV-EMB scheme does not rely much on a specific image set.

TABLE IX The Security Performance (in %) on JPEG-BOSSBase Image Set Under the Payload of 0.4 bpnzAC
Table IX- 
The Security Performance (in %) on JPEG-BOSSBase Image Set Under the Payload of 0.4 bpnzAC
I. Experiments on Images in Spatial Domain
In this part, we investigate whether ADV-EMB can be extended to pixel domain staganography. The BOSSBase v1.01 image set [46], which contains 10000 grayscale 512 × 512 images, was used and denoted by CBS . We randomly split it into three disjoint subsets, C0BS , C1trnBS , and C1tstBS , respectively with 5000, 2500, and 2500 images. The process of generating adversarial stego images is the same as in Section IV-A, except for the baseline steganographic scheme and the target steganalyzer. We selected S-UNIWARD [12] as the baseline steganographic scheme. The corresponding stego image sets are referred to as S0BS , S1trnBS , and S1tstBS . Xu-Net [24], denoted as φ , was used as steganalyzer. This is a 6 layer CNN steganalyzer working in the spatial domain by using deep learning techniques, such as, batch normalization, 1×1 convolution, and global pooling. The Xu-Net steganalyzer trained on {C0BS,S0BS} i.e., φC0BS,S0BS was used as the target steganalyzer. The corresponding adversarial stego images are denoted as Z0BS , Z1trnBS , and Z1tstBS . The embedding payload is given in bits per pixel (bpp). A hand-crafted SRM (Spatial Rich Model) feature based steganalyzer equipped with an FLD ensemble classifier [16], denoted as φ′ , was used for performance evaluation. From Table X, we can observe that in the case of adversary-unaware steganalysis, the missed detection rate of ADV-EMB against target steganalyzer ϕC0BS,S0BS under the payload 0.4 bpp reaches 100%, and that against ϕ′C0BS,S0BS is 5%-12% higher than S-UNIWARD. From Table XI, we can observe that in the case of adversary-aware steganalyst, ADV-EMB outperforms S-UNWIARD by 2% on 0.4 bpp. The experimental results indicate that ADV-EMB can be easily extended to work in the pixel domain.

TABLE X The Security Performance (in %) on Spatial Images Against an Adversary-Unaware Steganalyzer

TABLE XI The Security Performance (in %) on Spatial Images Against an Adversary-Aware Steganalyzer
Table XI- 
The Security Performance (in %) on Spatial Images Against an Adversary-Aware Steganalyzer
SECTION V.Conclusions
In this paper, we proposed a novel approach to look at the steganographic problem; namely, we proposed to embed the stego message while simultaneously taking into account the necessity of countering an advanced CNN-based steganalyzer. Such an aim is achieved by introducing a new adversarial embedding method, which takes both data embedding and adversarial operation into account. A practical steganographic scheme, ADV-EMB, which generates adversarial stego images with minimum amount of adjustable elements, has been illustrated to counter a deep learning based target steganalyzer. The extensive experiments we have carried out permitted us to reach the following conclusions:

When the target steganalyzer is accessible by the steganographer but the steganalyst is unaware of the adversary operation, a high missed detection rate can be achieved by ADV-EMB to counter the target steganalyzer.

When the steganalyst is aware of the adversarial embedding, and uses adversarial stego images to re-train the steganalyzer, the proposed ADV-EMB leads to a higher detection error rate compared to the state-of-the-art baseline steganographic scheme, for both target and non-target steganalyzers.

When both the steganographer and the steganalyst iteratively adjust their strategies according to the updated knowledge about the other side, adversarial stego images still have an advantage over their conventional counterparts.

Our approach to adversarial embedding shows a promising way to enhance steganographic security, still there are several unsolved issues to consider. To start with, the proposed ADV-EMB scheme uses only the signs of the gradients. It worths investigating whether the amplitudes of the gradients can also be helpful. Besides, it is worth studying on whether universal perturbations [49] are feasible in obtaining adversarial stego images. Furthermore, for a complete characterization of the interplay between the steganographer and the steganalyst, it would be interesting to resort to a game-theoretic formulation of the problem [38], [50], [51].