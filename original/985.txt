Owing to the development of wireless communication technology and the increasing number of automobiles, vehicular ad hoc networks (VANETs) have become essential tools to secure traffic safety and enhance driving convenience. It is necessary to design a conditional privacy-preserving authentication (CPPA) scheme for VANETs because of their vulnerability and security requirements. Traditional CPPA schemes have two deficiencies. One is that the communication or storage overhead is not sufficiently low, but the traffic emergency message requires an ultra-low transmission delay. The other is that traditional CPPA schemes do not consider updating the system secret key (SSK), which is stored in an unhackable Tamper Proof Device (TPD), whereas side-channel attack methods and the wide usage of the SSK increase the probability of breaking the SSK. To solve the first issue, we propose a CPPA signature scheme based on elliptic curve cryptography, which can achieve message recovery and be reduced to elliptic curve discrete logarithm assumption, so that traffic emergency messages are secured with ultra-low communication overhead. To solve the second issue, we design an SSK updating algorithm, which is constructed on Shamir's secret sharing algorithm and secure pseudo random function, so that the TPDs of unrevoked vehicles can update SSK securely. Formal security proof and analysis show that our proposed scheme satisfies the security and privacy requirements of VANETs. Performance analysis demonstrates that our proposed scheme requires less storage size and has a lower transmission delay compared with related schemes.
SECTION I.Introduction
Owing to the increasing number of vehicles and the continuous progress of information technology, such as automatic driving and the fifth-generation network (5G), vehicular ad hoc networks (VANETs) have become an increasingly popular topic of study in both academia and industry. Messages in VANETs, include velocity, location, and driving route, which can be collected from devices such as global positioning system (GPS), radio frequency identification (RFID) devices, electronic sensors, and cameras. These messages can be transmitted to nearby vehicles and infrastructures to enhance driving safety and convenience [1], [2].

VANETs comprise three essential types of entities for constructing an intelligent transportation system (ITS), i.e., vehicles installed with an on-board unit (OBU), a roadside unit (RSU), and a traffic management agency (TMA) that is also the trusted authority (TA). The most typical communication types in VANETs are vehicle-to-vehicle (V2V) and vehicle-to-infrastructure (V2I) communications. For V2V communication, vehicles are required to broadcast beacons, which mainly comprise the current velocity, location, steering angle, acceleration speed, and other traffic-related information; hence, the probability of the emergence of traffic accidents can be reduced. For V2I communication, the roadside infrastructure serves as coordination by sending traffic-related suggestions or warnings to vehicles, such that the traffic can be more orderly and safe [3]–[4][5][6].

Because V2V and V2I communications rely on the public wireless network, VANETs are vulnerable to many types of attacks [7]. If no secure mechanism exists for securing communication, the messages sent by vehicles or infrastructure will be easily modified. For example, the velocity information could be modified to cause a traffic accident, and the location information could be forged to cause a traffic jam. In other words, traffic-related communications directly affect the safety of the driver and traffic; therefore, a message authentication mechanism is essential for securing V2V and V2I communications.

In addition to securing communication, privacy must also be considered in VANETs. A vehicle’s identity (ID) is contained in the message for identification. If we use the real identity of the vehicle for vehicular communication, identity privacy will be leaked to the malicious adversary. Therefore, using a pseudo identity is preferable to avoid this issue. However, using only the pseudo identity can cause another attack. If the pseudo identity of one vehicle remains the same in the long term, a passive adversary can link many messages that have the same pseudo identity, which would leak the trace privacy of the driver. The leakage of driving trace can threaten the safety of the driver. Therefore, privacy issues, especially for identity privacy, should be considered seriously in VANETs [8], [9].

To achieve security and privacy simultaneously, a conditional privacy-preserving authentication (CPPA) scheme must be designed for VANETs, in which conditional privacy-preserving denotes that no one except for the TA can reveal the real identity of a vehicle according to the received message. In the past decades, many researchers have proposed various CPPA schemes. Most of the initial schemes are based on bilinear pairing, because the short signature, aggregate signature, identity-based encryption or signature, and other useful algorithms have been well developed in pairing-based cryptography. These schemes can be classified into two categories, public key infrastructure (PKI) and identity-based schemes. In the PKI-based schemes, a digital certificate is used to guarantee the trustworthiness of the vehicle’s public key. However, the transmission and storage overhead of digital certificates will be high when the number of vehicles is large. Therefore, identity-based cryptography is typically used in recent schemes to construct protocols based on bilinear pairing, which can avoid the overhead caused by digital certificates [10]–[11][12].

The main weakness of bilinear pairing-based schemes is that the computational overhead of the pairing operation is relatively large. Specifically, in a modern computation platform, one pairing operation costs several milliseconds, which means that it would be difficult to satisfy the delay requirement of real-time traffic-related applications [13]. Hence, He et al. [14] first proposed an efficient identity-based CPPA scheme without pairing. In their proposed scheme, they constructed an elliptic-curve-based signature generation and verification algorithms. Compared with traditional pairing-based CPPA schemes for VANETs, their scheme can achieve lower computational overhead. Furthermore, their scheme relies on the Tamper Proof Device (TPD) that securely stores the system secret key (SSK) to achieve CPPA, which is the typical requirement of most CPPA schemes. The aim of the method is to achieve a tradeoff between performance and security.

He et al.’s scheme [14] has two deficiencies. One is that the authentication mechanism of their scheme can be improved to reduce the transmission overhead such that the CPPA scheme will be more suitable to be used in delay-sensitive applications, such as traffic emergency message broadcasting. The other is that the CPPA characteristic in their scheme relies on the SSK that is securely stored in the TPD. The SSK is preloaded to the TPD of every vehicle. Even if the TPD is assumed to be unhackable, some side-channel attack methods [15], [16] can render that the SSK insecure through its longer use in more vehicles.

To solve the above-mentioned deficiencies, we propose a lightweight and secure CPPA scheme for securing the traffic emergency message, which is small (the message only contains necessary traffic-related information, such as velocity, GPS position, steering angle, and brake status) but delay-sensitive. For the first deficiency, we designed a CPPA scheme that comprises mainly an elliptic curve cryptosystem (ECC)-based signature scheme designed with message recovery, in which message recovery means that the message can be conveyed within the corresponding signature and recoverable by the verifier through a verification process. Therefore, the message need not be sent along with the corresponding signature. In our proposed scheme, by designing a signature scheme with message recovery to implement CPPA function, the total length of the vehicle’s pseudo identity, message, and signature can be decreased significantly such that the transmission bandwidth and storage overhead of the receiver can be saved efficiently. To solve the second deficiency, we designed an SSK updating method, in which the updating material can be transmitted in a public insecure channel. The unrevoked vehicles can acquire the newest SSK based on the public updating material sent by TA. By executing the SSK updating algorithm periodically, the security strength of the entire system will be stronger.

The contributions of our proposed schemes are as follows:

We proposed a CPPA scheme that is based on an ECC signature scheme designed with message recovery to secure the transmission of traffic emergency messages, such that the transmission bandwidth and storage overhead for the pseudo identity of the vehicle, the traffic emergency message, and the corresponding signature can be decreased efficiently compared with traditional schemes. Hence, our proposed CPPA scheme would be more suitable for securing the traffic emergency message that has ultra-low transmission delay requirement.

We proposed a key updating scheme for updating the SSK stored in the TPD of every vehicle, in which the key updating material can be transmitted in a public insecure channel. The updating mechanism ensured that only the unrevoked vehicles can obtain the newest SSK. Hence, the CPPA scheme that relied significantly on the SSK would exhibit a better security strength.

We provided a formal proof to demonstrate the security of our proposed scheme, and the performance analysis demonstrated that our proposed scheme offered certain advantages compared with related schemes.

SECTION II.Related Work
To achieve message authentication and privacy-preserving for VANETs, many valuable schemes have been proposed. Raya et al. [17] first discussed the importance of secure communication in VANETs, introduced the main security and privacy issues in VANETs, and proposed an authentication, authorization, accounting (AAA) framework for vehicular communications. Raya and Hubaux [18] further proposed a CPPA scheme based on PKI system. In their scheme, every vehicle is required to preload many public and private key pairs, and certificates signed by the certified authority (CA). Besides, vehicles in their scheme need to send the public key and corresponding digital certificate together with the traffic emergency message. Therefore, vehicles in their scheme are required to equip with massive storage devices, and the transmission overhead will be high because of the transmission of numerous digital certificates. To address the storage issue in Raya et al.’s scheme [18], Lu et al. [10] proposed an efficient CPPA scheme, in which they used q-SDH assumption to construct an anonymous key generation algorithm. However, their scheme requires vehicles to send requests to nearby RSU for getting the anonymous key, so that the authentication delay of their scheme could be high. To solve the low-efficiency issue of certificate distribution process in traditional schemes, Khodaei and Papadimitratos [19] proposed a vehicle-centric certificate revocation list (CRL) distribution method, which can be proved to be efficient, scalable, and secure. Simplicio et al. [20] proposed a vehicular public key infrastructure (VPKI)-based scheme, where linkage authorities are removed to improve the system security strength.

Since PKI-based schemes require the transmission of digital certificates, transmission delay may fail to satisfy the requirement when the number of vehicles is large. To solve the issue, Zhang et al. [21] proposed an efficient CPPA scheme that supports batch signature verification for V2I communications. In their scheme, RSU is able to process batch verification to verify many signatures simultaneously, so that the verification efficiency can be improved efficiently. In their proposed scheme, by designing an identity-based signature that relies on TPD, the digital certificate is not required so that the transmission bandwidth can be saved significantly. Zhang et al. [22] further proposed a CPPA scheme that uses the group testing technique to find invalid signatures from a batch of signatures. However, their proposed scheme can not resist impersonation and tracing attacks. To solve the issue, Chim et al. [11] proposed a software-based CPPA scheme that uses two shared secrets and the bloom filter combined with binary search method to satisfy the CPPA requirement and achieve low verification overhead for vehicles, respectively. Horng et al. [12] found that Chim et al.’s scheme is vulnerable to impersonation attack (i.e., a malicious adversary may broadcast fake messages to other vehicles), and proposed a CPPA scheme that can resist impersonation attack. Liu et al. [23] optimized traditional message authentication schemes by introducing the proxy vehicle concept to the message authentication scenario, so that the authentication efficiency can be improved to a great extent. Zhang et al. [24] proposed a distributed aggregate CPPA scheme that uses multiple TAs instead of only one TA, and claimed that their proposed scheme requires the practical TPD instead of the ideal TPD.

To avoid the storage, communication, and computation overhead brought by the use of CRL, Jiang et al. [25] proposed an efficient anonymous batch authentication scheme to replace the CRL checking process by constructing a key updating mechanism based on the updating polynomial and one-way hash function. Wang et al. [26] proposed a two-factor lightweight CPPA scheme that uses decentralized TAs and biological password-based two-factor authentication to achieve fast and lightweight authentication. In their proposed scheme, CRL is avoided so that the communication overhead can be decreased and the DDoS attack can be resisted to a certain extent. Azees et al. [27] proposed an efficient anonymous CPPA scheme that provides a mechanism to make vehicles conditionally traceable and avoid the entrances of malicious vehicles by broadcasting the identities of revoked vehicles. Pournaghi et al. [28] proposed a CPPA scheme, where the system parameters and secret keys are stored in the TPDs of RSUs rather than that of vehicles, such that the whole system will be more efficient. Ali and Li [29] presented an efficient CPPA scheme for securing V2I communications, which has better performance advantages over related schemes.

Since the private key generator (PKG) has access to all private keys of users in identity-based schemes, the key escrow issues will appear if PKG is compromised. To solve the issue, Li and Wang [30] introduced a certificateless signature (CLS) scheme for VANETs, such that the key escrow problem can be solved efficiently. Horng et al. [31] proposed a CLS scheme based on bilinear pairing, which can not only achieve CPPA but also be provably secure against existential forgery on adaptively chosen message attack in the random oracle model. Li et al. [32] proposed a secure CLS-based CPPA scheme for Internet of Vehicles (IoV). In their proposed scheme, two sub-protocols were proposed, i.e., an anonymous CLS protocol for vehicles and an identity-based CLS protocol for RSUs, so that vehicles and TA do not need to store any digital certificate. Mei et al. [33] proposed an efficient CLS-based CPPA scheme that uses full aggregation technique to reduce the transmission and computational overhead brought by cryptographic operations. The performance analysis showed that their proposed scheme is more efficient than traditional schemes in terms of computational and communication overhead.

The main deficiency of bilinear pairing-based schemes is that the pairing operation could bring relatively large computational overhead. To solve the issue, He et al. [14] first proposed an efficient CPPA scheme without using bilinear pairing, which is constructed on ECC and unhackable TPD, and achieves significant performance advantages over traditional schemes. Wu et al. [34] proposed a location-based CPPA scheme without using bilinear pairing and TPD. However, frequent communications among involved entities in their scheme bring high computational and communication overhead. Cui et al. [35] introduced the edge computing concept into the message authentication scenario, and proposed an ECC-based CPPA scheme with low redundancy authentication rate. Kamil and Ogundoyin [36] proposed an efficient certificateless aggregate signature scheme based on ECC, which provides better performance advantage over traditional CLS schemes. Ming and Cheng [37] designed a certificateless CPPA scheme, which brings low transmission overhead and can be proven secure under the random oracle model. Although their proposed scheme provides relatively low signing and verification costs, the transmission overhead is hard to satisfy the requirement for transmitting the traffic emergency message. Zhang et al. [38] proposed a lightweight authentication scheme based on ECC and Chinese remainder theorem to secure group communication. Cui et al. [39] used the self-healing key distribution method to design an CPPA scheme based on semi-trusted authorities. Ogundoyin [40] proposed an autonomous and lightweight CPPA scheme, where a semi-trusted PKG is responsible for generating temporary secret keys for vehicles. However, the secret key generation method in their scheme would leak the master secret key of PKG. Sutrala et al. [41] proposed an ECC-based CPPA scheme for IoV, which has better performance advantages over related schemes and satisfies security requirements.

The digital signature with message recovery concept is firstly proposed by Nyberg and Rueppel [42]. In a signature scheme with message recovery, the signature can be used not only to authenticate the validity of the message but also to recover the corresponding message, so that the message is not required to be transmitted. Zhang et al. [43] proposed a short identity-based message recovery signature scheme, which opens a new research area, namely how to shorten the size of identity-based signature. Jian et al. [44] proposed a secure traffic data aggregation scheme for VANETs by using the property of message recovery. However, their proposed scheme has some deficiencies. Firstly, the vehicle in their proposed scheme does not use pseudo identity for communication, so that conditional privacy-preserving characteristic is not satisfied. Secondly, their proposed scheme has high computational and communication overhead. Thirdly, the signature transmission of their proposed scheme relies on a secure channel, which limits the practical deployment.

SECTION III.Preliminaries and System Overview
A. Elliptic Curve Cryptosystem
Let Fp be a finite field, which is determined by a prime number p . Let a set of elliptic curve points over E be defined by the equation: y2=x3+ax+bmodp , where a,b∈Fp . Let the point at infinity be O , then O and other points on E make up an additive elliptic curve group G with the order q and generator P . The elliptic curve group G has the following properties and hardness assumptions [45].

Additive operation: Let P and Q be two points of group G . If P is not equal to Q , then we can get R=P+Q where R is the intersection of E and the straight line connecting P and Q . If P=Q , then R=2P . If P=−Q , then P+Q=O .

Scalar point multiplication: Let P∈G and m∈Z∗q , the scalar multiplication of E is defined as m⋅P=P+P+⋯+P .

Elliptic curve discrete logarithm problem (ECDLP): It is computational hard for a probabilistic polynomial-time (PPT) adversary to calculate x∈Z∗q in the case of known two points P,Q=xP∈G .

Elliptic curve computational Diffie-Hellman problem (ECCDHP): Given the tuple {P,aP,bP} where a,b are two random numbers in Z∗q , it is computational hard for a PPT adversary to compute abP .

B. Pseudo Random Function
A pseudo random function (PRF) is a deterministic algorithm that takes two inputs, i.e., a key k and a binary string x∈X where X denotes the input space, and outputs a binary string y=PRF(k,x)∈Y where Y denotes the output space. A PRF is secure if its behavior is computationally indistinguishable from a random function so that any PPT adversary cannot distinguish the output of a secure PRF from that of random function [46].

C. System Model
The system model of our proposed scheme for VANETs mainly contains two roles, i.e., vehicle, and TA, as shown in Fig. 1.

Vehicle: Vehicle is considered as an untrustworthy entity and OBU is installed on every vehicle for V2V and V2I communications. Before joining VANETs, all vehicles are required to register with TA through a secure and private channel. Vehicular communication can be divided into two types, i.e., direct communication and indirect communication. For indirect communication, vehicles can communicate with other vehicles or infrastructures with the assistance of nearby RSUs. For direct communication, vehicles can communicate with other vehicles using Device-to-Device (D2D) technology. We assume that every vehicle is installed with a secure TPD through a predefined registration strategy.

TA: TA is responsible for providing registration and authentication services for vehicles and RSUs. TA is trustworthy by all entities in VANETs and controlled by official traffic management. If necessary, TA can reveal the real identity according to the message sent by a vehicle. If a vehicle is considered to be malicious, TA can revoke it. To avoid single-point failure, we assume that redundant TAs are set up.


Fig. 1.
System Model.

Show All

D. Threat Model
The adversaries considered in our proposed scheme can be classified into internal and external adversaries, in which internal adversaries refer to the entities directly involved in VANETs, i.e, vehicles and RSUs, and external adversaries refer to the entities not directly involved in VANETs. Both internal and external adversaries can launch passive and active attacks. For launching passive attacks, an adversary may act as a passive listener, keep monitoring V2V or V2I communication channel, and try to get some confidential information, e.g., the driving traces of vehicles and the plaintexts of encrypted messages. For launching active attacks, an adversary can access the public V2V or V2I communication channel to read, intercept, replay, modify, and fabricate the transmitted data packets over the channel (as defined in Dolev-Yao threat model [47]). There is a major difference between internal adversaries and external adversaries in terms of active attacks, i.e., a malicious vehicle (one kind of internal adversaries) can get a valid signature and pseudo identity for a wrong traffic emergency message since a malicious vehicle installed with TPD can produce a valid signature for any message.

E. Security Requirements
Since adversaries may threat traffic safety, a CPPA scheme for VANETs should satisfy the following security requirements [10], [14].

Conditional privacy-preserving: To protect user privacy, no one except for TA can reveal the real identity of message sender according to the received or intercepted message sent by a vehicle.

Traceability: The identity of message sender should be bound to the message, so that TA can trace the vehicle that deliberately sends the wrong traffic emergency message.

Message authentication: The integrity of the received message and the legality of message sender should be checked.

Resistance of replay attack: If an adversary intercepts a valid message and broadcasts it after a valid time interval, then the receiver should reject the message.

Unlinkability: The adversary should not be able to link multiple messages sent by a vehicle.

Resistance of modification attack: If a message has been modified during the transmission process, then it should be rejected by the receiver.

Resistance of impersonation attack: If an adversary sends a message using the pseudo identity that is copied from a legal vehicle, then the receiver should reject the message.

Resistance of man-in-the-middle attack: Although the communication channels for V2V and V2I are public and insecure, the adversary should not successfully modify or fabricate the transmitted data packets over the channels.

Key security: Only TPDs of unrevoked vehicles can acquire the newest SSK.

F. Outline of the Proposed Scheme
The proposed scheme contains several steps including Setup, TPDGen, Sign, Verify, SSKGen, and SSKExtract, which are defined as follows.

Setup(1k ): Given the security parameter k that determines the security strength of the proposed scheme, TA chooses proper parameters to generate all public parameters, system secret key, and system public key.

TPDGen(): The algorithm is executed by the TPD of vehicle Vi , which takes no input and produces a output pair contains pseudo identity PIDi , partial private key ki , public key (Ri)X , and timestamp Ti .

Sign(mi ,TPDGen()): The algorithm is executed by vehicle Vi , which first calls TPDGen() to get {PIDi,ki,(Ri)X,Ti} , and then takes it combined with traffic emergency message mi as input to produce the final output pair contains pseudo identity PIDi , public key Ui , timestamp Ti , and signature σi .

Verify(PIDi ,Ui ,Ti ,σi ): The algorithm is executed by the message receiver, which takes {PIDi ,Ui ,Ti ,σi} as input, checks the validity, and outputs 1 if the input tuple is valid and 0 otherwise.

SSKGen(ID ={ID1 ,… ,IDN },s): The algorithm is executed by TA, which takes the real identity list of unrevoked vehicles and current SSK as the input to generate the public updating material containing N points P′i(1≤i≤N) , timestamp TTA , new system public key P′pub , public key W , nonce , and signature σTA as the output.

SSKExtract(P′i(1≤i≤N) ,TTA ,P′pub ,W ,σTA , nonce ): The algorithm is executed by Vi and its TPD. Specifically, Vi takes P′i(1≤i≤N) ,Ti ,P′pub ,Wi ,nonce ,σTA as input to check the signature validity. If not valid, Vi rejects the key updating message. Otherwise, Vi sends P′i(1≤i≤N) , nonce , P′pub to its TPD. The TPD computes P′0 , takes P′0 combined with P′i(1≤i≤N) as input to compute the new SSK s′ , checks whether the equation P′pub=s′P holds. If the equation holds, the TPD of Vi accepts the new SSK s′ .

G. Security Definitions
To prove the security of the proposed scheme, several security definitions, which are related to the proposed CPPA signature scheme (including Setup, TPDGen, Sign, and Verify) and SSK updating algorithm (including SSKGen and SSKExtract), are provided as follows.

Definition 1 (Existential Unforgeability Against Chosen Message Attack Security):
The challenger C (or the signature scheme) runs the key generation algorithm Gen(1n) (n is the security parameter) to produce a signing/verification key pair (sk,vk) , and sends vk to the adversary A . The signing queries are allowed for A , i.e., A can make signing queries on adaptively chosen message mi . For the signing query on mi , C runs the signing algorithm σi=Sign(sk,mi) and sends σi to A . At last, A is required to return a forged signature σj on mj . A is considered to win the game if two conditions both satisfy, i.e., mj has not been queried in previous signing queries and σj is a valid signature on mj .

Definition 2 (Signature Security):
A PPT adversary A , which plays the game defined in Definition 1, breaks the proposed CPPA signature scheme with (τ′,qs,qh1,qh2,qh3,qh4,qh5,ϵ′ ) if and only if A is able to forge a valid signature with success probability greater than ϵ′ . Specifically, A can make at most qs signature queries on messages that are adaptively chosen by A , and qh1,qh2,qh3,qh4,qh5 queries to h1,h2,h3,h4,h5 oracles respectively, within running time τ′ . And the proposed signature is (τ′,qs,qh1,qh2,qh3,qh4,qh5,ϵ′ )-secure if and only if any adversary A cannot break the signature scheme with (τ′,qs,qh1,qh2,qh3,qh4,qh5,ϵ′ ).

Definition 3 (Key Semantic Security):
The challenger chooses two random numbers s0,s1∈Z∗q and a random bit b∈{0,1} , sets s=sb , generates S= SSKGen(ID ,s ), and returns {ID,S} and {s,S} to adversaries A1 and A2 , respectively. At last, the adversary A1 or A2 returns the guessing bit b^∈0,1 to C , respectively. We say that the adversary A1 or A2 wins the game if b^=b .

Definition 4 (SSK Security):
Given the public SSK updating information generated by TA (or challenger C ), a PPT adversary A (either A1 or A2 ), which interacts with C according to the rules defined in Definition 3, should be computationally infeasible to extract secret key from the public material if the SSK updating algorithm is secure. In other words, a secure SSK updating algorithm requires that, A can not win the game defined in Definition 3 with the probability significantly better than 1/2.

SECTION IV.Our Proposed Scheme
In this section, we describe the proposed scheme that comprises several phases, i.e., initialization phase, signature generation and verification phase, and SSK updating phase. In the initialization phase, TA prepares all necessary private and public parameters, and every vehicle is required to register with TA. In the signature generation and verification phase, the vehicle generates pseudo identity and signature for traffic emergency message, and the receiver verifies the received message. In the SSK updating phase, TA generates the key updating message, which can be used for the unrevoked vehicles to update SSK. The common annotation of the paper is as shown in Table I.

TABLE I Annotation Table

A. Setup Phase
In this phase, TA prepares all necessary public and private parameters, and provides the registration service to vehicles. Specifically, TA needs to process the following steps.

TA chooses an additive elliptic curve group. Specifically, TA chooses a random large prime number p for a finite field Fp and two elliptic curve coefficients a,b∈Fp to generate an elliptic curve E:y2=x3+ax+bmodp . Then, TA chooses a point P with big prime order q to generate the additive elliptic curve group G . Note that if the required security level or strength is λ and the bit size of traffic emergency message is n , then p and q must satisfy |p|=|q|≥max(2λ,n) where |p| and |q| denote the bit size of p,q respectively.

TA chooses the SSK s∈Zq and calculates the corresponding system public key Ppub=−sP where Ppub=(x,−y) is the inverse element of −Ppub=(x,y) . Noted that our proposed scheme requires s to be preloaded into the TPD of every vehicle, so TPD is required to be unhackable (the assumption is the basic requirement in the most of CPPA schemes for VANETs).

TA chooses hash functions h1,h2,h3,h4,h5 where h1:{0,1}∗×{0,1}∗→Z∗q , h2:G×{0,1}∗→Z∗q , h3:{0,1}n→{0,1}|q|−n , h4:{0,1}|q|−n→{0,1}n , h5:{0,1}∗×{0,1}∗×{0,1}∗×G→Z∗q .

Every vehicle Vi needs to register with TA before joining the ITS communication. Specifically, Vi interacts with TA in a private and secure channel under the following strategy. Vi chooses its identity IDi and password PWi , and sends the tuple {IDi,h1(IDi,PWi)} to TA. After receiving the tuple, TA loads the SSK s into the TPD of Vi . The registration service can be performed under a predefined strategy such as the annual vehicle inspection.

TA publishes the public parameters {E,G,hi(i=1,2,3,4,5),P,Ppub} to every entity of VANETs.

B. Pseudo Identity Generation, Signature Generation and Verification Phase
In this phase, the vehicle needs to generate a pseudo identity and signature for the traffic emergency message, and send the pseudo identity together with signature to nearby vehicles. The receiver authenticates the signature and trusts the traffic emergency message recovered from signature if the authentication succeeds.

Pseudo Identity and Signature Generation Process. This process has the following steps.

Vehicle Vi inputs its IDi and PWi into TPD to check the identity legality by checking whether h1(IDi,PWi) equals to the stored value. If not equal, TPD will terminate the process.

The TPD of Vi first chooses a random number ri∈Z∗q , gets Ri=riP , and calculates Vi ’s pseudo identity PIDi=h2(ri⋅Ppub,Ti)⊕IDi . Then, the TPD of Vi calculates ki=ri+s⋅h1(PIDi,Ti) and (Ri)X where (Ri)X denotes the X-coordinate of the point Ri , and sends {PIDi,ki,(Ri)X,Ti} to Vi where Ti denotes the current timestamp.

Upon receiving {PIDi,ki,(Ri)X,Ti} from its TPD and preparing the traffic emergency message mi∈{0,1}n , Vi calculates σ1i=(Ri)X⊕(h3(mi)||(h4(h3(mi))⊕mi)) , chooses a random number ui∈Z∗q , gets the corresponding public key Ui=−uiP , and calculates σ2i=ki+h5(PIDi,Ti,σ1i,Ui)⋅ui to get the signature σi=(σ1i,σ2i) . Finally, Vi broadcasts {PIDi,Ui,Ti,σi} to nearby vehicles.

Signature Verification Process. Upon receiving {PIDi,Ui,Ti,σi} from Vi , Vj performs the following steps to recover the message mi and verifies the legality.

Vj checks the timestamp Ti by determining whether the equation |Ti−Tcur|<ΔT holds, where Tcur denotes the current timestamp, and ΔT denotes the sum of the estimated packet encoding time, transmission delay (the upper bound of the transmission delay can be estimated since the traffic emergency message is transmitted by one-hop broadcasting), and packet decoding time. If it does not hold, Vj rejects the received message. Otherwise, Vj performs the next step.

Vj recovers Ri by calculating Ri=σ2i⋅P+h1(PIDi,Ti)⋅Ppub+h5(PIDi,Ti,σ1i,Ui)⋅Ui=riP+h1(PIDi,Ti)⋅sP+h1(PIDi,Ti)⋅(−sP)+h5(PIDi,Ti,σ1i,Ui)⋅uiP+h5(PIDi,Ti,σ1i,Ui)⋅(−uiP)=riP . Then, Vj calculates temp=σ1i⊕(Ri)X , and recovers mi by calculating m_{i}=Right(temp,n)\oplus h_{4}(Left(temp,|q|-n)) where Left(msg,x) and Right(msg,x) denote the most significant x bits of msg and the least significant x bits of msg , respectively. Finally, V_{j} checks whether h_{3}(m_{i})=Left(temp,|q|-n) holds. If it holds, the signature gets verified and the message m_{i} is considered to be valid. Otherwise, V_{j} rejects the message.

Remark 1:
In the pseudo identity and signature generation process, the whole process is divided into two parts to reduce the computation burden of TPD. And it is noteworthy that pseudo identity PID_{i} in our scheme is just a number in \mathbb Z_{q}^{*} , while that in traditional schemes always contains an element in an elliptic curve group \mathbb {G} along with a number in \mathbb Z_{q}^{*} to achieve conditional privacy-preserving. As shown in Section V, only a number in \mathbb Z_{q}^{*} that acts as the pseudo identity is enough to achieve conditional privacy-preserving.

C. SSK Updating Algorithm
Although the SSK stored in the TPD of every registered vehicle assists the realization of CPPA characteristic, the mechanism brings several issues. Firstly, the malicious adversary may use some side-channel attack methods to break the SSK. So the longer the SSK is used, the more insecure the whole signature system will be. Secondly, if some vehicles are revoked by TA for some reason, they should not be able to use the SSK to generate valid signatures that can be verified by other vehicles. For these reasons, we think it is necessary to design an updating algorithm for SSK. Based on Shamir’s secret sharing algorithm [48], we design an SSK updating algorithm that can be divided into two steps. In the first step, TA chooses a new SSK, generates some public information for the new SSK, and broadcasts the public information to vehicles through a public channel. In the second step, the TPD of every unrevoked vehicle can reveal the public information to acquire the new SSK. The SSK updating algorithm makes vehicles only need to obtain SSK through a private secure channel one time (in the registration phase) and the later updated SSK can be obtained through a public insecure channel. The main advantage of this algorithm is that it is non interactive and only needs one broadcast for all unrevoked vehicles.

SSK Updating Algorithm for TA.

Assume that the unrevoked vehicles are denoted by \{V_{i}(i\in [1,N])\} . To update the SSK, TA performs the following steps.

TA chooses a random s'\in \mathbb Z_{q}^{*} that satisfies s'\neq s as the new SSK and a random nonce\in \mathbb Z_{q}^{*} . For every vehicle V_{i} , TA calculates x_{i}=PRF(h_{1}(s,ID_{i}),nonce) and y_{i}=PRF(h_{1}(s,ID_{i}),nonce+1) to produce the point P_{i}=(x_{i},y_{i}) , where PRF(k,\cdot) denotes pseudo random function. Then TA generates an N -degree interpolated polynomial y=f(x)=s'+a_{1}x+a_{2}x^{2}+\ldots +a_{N}x^{N}\;mod\;q that passes through N points P_{i}(1\leq i\leq N) and one special point P_{0}=(0,s') .

TA uses the polynomial y=f(x) to produce N additional random points P_{i}'(1\leq i\leq N) that are different from P_{i}(0\leq i\leq N) .

TA computes the new system public key P_{pub}'=-s'P , generates a random w\in \mathbb Z_{q}^{*} and corresponding public key W=wP , and signs the N additional points P_{i}'(1\leq i\leq N) by calculating \sigma _{TA}=w+s\cdot h(P_{pub}',T_{TA},nonce,P_{1}',P_{2}',\ldots,P_{N}') where T_{TA} is the current timestamp. Finally, TA broadcasts the public updating message \{P_{i}'(1\leq i\leq N),T_{i},P_{pub}',W,nonce,\sigma _{TA}\} to all vehicles through the public channel.

SSK Updating Algorithm for Unrevoked Vehicles.

Upon receiving the SSK updating message, every unrevoked vehicle performs the following steps to update SSK.

Vehicle V_{i} verifies the message by checking whether the equation \sigma _{TA}\cdot P=W+h(P_{pub}',T_{TA},nonce,P_{1}',P_{2}',\ldots,P_{N}')\cdot (-P_{pub}') holds. If it holds, V_{i} sends P_{i}'(1\leq i\leq N) and P_{pub}' to its TPD.

After getting input from V_{i} , the TPD calculates P_{0}'=(PRF(h_{1}(s,ID_{i}),nonce),PRF(h_{1}(s,ID_{i}),nonce+1)) . Then, based on the N+1 points (i.e., P_{0}' together with the received P_{i}'(1\leq i\leq N) ), the TPD uses Lagrange interpolation method to calculate s' , i.e., s'=\sum _{i=0}^{N}\left({y_{i}'\cdot \prod _{j=0\;\&\;j\neq i}^{N} (-x_{j}'/(x_{i}'-x_{j}'))}\right) \;mod\;q . To avoid V_{i} modifying the key updating message, TPD should check whether the equation P_{pub}'=s'P holds. If it holds, TPD will use s' to replace s . Otherwise, TPD will reject the key updating message.

Remark 2:
According to the definition of the secure pseudo random function, the output of a secure pseudo random function is computational indistinguishable from a random number in the same space. For the adversary or vehicle that has been revoked, the current SSK s or valid ID_{i} of the key h_{1}(s,ID_{i}) is unknown, so the values PRF(h_{1}(s,ID_{i}),nonce) and PRF(h_{1}(s,ID_{i}),nonce+1) look like two random numbers. Without knowing the values PRF(h_{1}(s,ID_{i}),nonce) and PRF(h_{1}(s,ID_{i}),nonce+1) , any adversary or vehicle has a negligible probability to acquire the new SSK from the public updating information sent by TA.

Remark 3:
The SSK updating algorithm is executed when one of the two cases is satisfied. The first case is for periodic updating. Since the security level of the proposed CPPA scheme will decrease through SSK’s long-time use in many vehicles, TA should execute the SSK updating algorithm with a constant interval. Note that the executing interval of the SSK updating algorithm depends upon how the system administrator views the tradeoff between system performance and security. The second case is for revoking malicious vehicles. In the proposed CPPA scheme, an internal adversary may launch various attacks, e.g., a vehicle installed with TPD may deliberately produce a valid \{PID_{i},U_{i},T_{i},\sigma _{i}\} that contains a wrong traffic emergency message to interrupt traffic safety, or send meaningless packets to launch Denial-of-Service (DoS) attacks. To monitor these attacks, TA can extract the real identities from the messages sent by malicious vehicles (as analyzed in Section V), revoke these identities, and execute the SSK updating algorithm when the number of malicious vehicles reaches the threshold value.

SECTION V.Security Analysis
In this section, we prove that our proposed CPPA scheme and SSK updating algorithm satisfy Definition 2 and Definition 4, respectively.

Theorem 1:
If ECDLP is (\tau,\epsilon )-hard in the additive elliptic curve group \mathbb G , the proposed CPPA signature scheme is (\tau ',\epsilon ' )-existential unforgeable against adaptively chosen message attacks under the random oracle model, such that \epsilon \geq \epsilon '\left({1-\frac {q_{s}}{q^{2}}}\right)\left({\epsilon '\left({1-\frac {q_{s}}{q^{2}}}\right)/(q_{h_{1}}+q_{h_{2}}+q_{h_{3}}+q_{h_{4}}+q_{h_{5}}+q_{s})-\frac {1}{q}}\right) where q_{h_{i}}(i\in [{1,5}]) and q_{s} denote the max query numbers of hash oracle and sign oracle respectively, and \tau \approx 2\tau '+t_{h}+(q_{s}+1)(3t_{sm}+2t_{pa}) where t_{h} , t_{sm} , t_{pa} denote the time for hash oracle, scalar multiplication operation in \mathbb {G} , and point addition operation in group \mathbb {G} , respectively.

Proof:
If there is an adversary \mathcal {A} that can break our proposed CPPA scheme with probability \epsilon ' , then we can construct a simulator \mathcal {C} that can solve ECDLP with probability \epsilon . Specifically, upon receiving public parameters related to the group \mathbb {G} and an ECDLP instance \{P,Q=sP|P\in \mathbb {G},Q\in \mathbb {G},s\in \mathbb Z_{q}^{*}\} , \mathcal {C} responses the following queries requested by \mathcal {A} .

Setup-query: Upon receiving the setup query from \mathcal {A} , \mathcal {C} sets P_{pub}=Q and sends the public parameters \{E,\mathbb {G},h_{i}(i=1,2,3,4,5),P,P_{pub}\} to \mathcal {A} .

h_{1} -query: For the query, \mathcal {A} presets a map Map_{h_{1}} . Upon receiving the query for < PID_{i},T_{i}> , \mathcal {C} checks whether Map_{h_{1}} has the key < PID_{i},T_{i}> . If so, \mathcal {C} finds the corresponding value and returns it to \mathcal {A} . Otherwise, \mathcal {C} chooses a random number r_{h_{1}}\in \mathbb Z_{q}^{*} , sets the value Map_{h_{1}}(< PID_{i},T_{i}>)=r_{h_{1}} , and returns r_{h_{1}} to \mathcal {C} .

h_{2} -query: For the query, \mathcal {A} presets a map Map_{h_{2}} . Upon receiving the query for < X_{i},T_{i}> where X_{i} denotes an elliptic curve point, \mathcal {C} checks whether Map_{h_{2}} has the key < X_{i},T_{i}> . If so, \mathcal {C} finds the corresponding value and returns it to \mathcal {A} . Otherwise, \mathcal {C} chooses a random number r_{h_{2}}\in \mathbb Z_{q}^{*} , sets the value Map_{h_{2}}(< X_{i},T_{i}>)=r_{h_{2}} , and returns r_{h_{2}} to \mathcal {C} .

h_{3} -query: For the query, \mathcal {A} presets a map Map_{h_{3}} . Upon receiving the query for < m_{i}> where m_{i}\in \{0,1\}^{n} , \mathcal {C} checks whether Map_{h_{3}} has the key < m_{i}> . If so, \mathcal {C} finds the corresponding value and returns it to \mathcal {A} . Otherwise, \mathcal {C} chooses a random bit-string r_{h_{3}}\in \{0,1\}^{|q|-n} , sets the value Map_{h_{3}}(< m_{i}>)=r_{h_{3}} , and returns r_{h_{3}} to \mathcal {C} .

h_{4} -query: For the query, \mathcal {A} presets a map Map_{h_{4}} . Upon receiving the query for < m_{i}'> where m_{i}'\in \{0,1\}^{|q|-n} , \mathcal {C} checks whether Map_{h_{4}} has the key < m_{i}'> . If so, \mathcal {C} finds the corresponding value and returns it to \mathcal {A} . Otherwise, \mathcal {C} chooses a random bit-string r_{h_{4}}\in \{0,1\}^{n} , sets the value Map_{h_{4}}(< m_{i}'>)=r_{h_{4}} , and returns r_{h_{4}} to \mathcal {C} .

h_{5} -query: For the query, \mathcal {A} presets a map Map_{h_{5}} . Upon receiving the query for < PID_{i},T_{i},\sigma _{i}^{1},U_{i}> , \mathcal {C} checks whether Map_{h_{5}} has the key < PID_{i},T_{i},\sigma _{i}^{1},U_{i}> . If so, \mathcal {C} finds the corresponding value and returns it to \mathcal {A} . Otherwise, \mathcal {C} chooses a random number r_{h_{5}}\in \mathbb Z_{q}^{*} , sets the value Map_{h_{5}}(< PID_{i},T_{i},\sigma _{i}^{1},U_{i}>)=r_{h_{5}} , and returns r_{h_{5}} to \mathcal {C} .

Sign-query: For the query, \mathcal {A} presets a map Map_{s} . Upon receiving the signing query for < PID_{i},m_{i},T_{i}> , \mathcal {C} processes the following steps. Firstly, \mathcal {C} chooses random \sigma _{i}^{2}\in \mathbb Z_{q}^{*} and u_{i}\in \mathbb Z_{q}^{*} , and calculates U_{i}=-u_{i}P . Secondly, \mathcal {C} chooses random numbers r_{h_{1}},r_{h_{5}}\in \mathbb Z_{q}^{*} , and calculates R_{i}=\sigma _{i}^{2}\cdot P+r_{h_{1}}\cdot P_{pub}+r_{h_{5}}\cdot U_{i} . Thirdly, \mathcal {C} chooses random numbers r_{h_{3}}\in \{0,1\}^{|q|-n},r_{h_{4}}\in \{0,1\}^{n} , and calculates \sigma _{i}^{1}=(R_{i})_{X}\oplus (r_{h_{3}}||(r_{h_{4}}\oplus m_{i})) . Fourthly, \mathcal {C} sets Map_{h_{1}}(< PID_{i},T_{i}>)=r_{h_{1}} , Map_{h_{3}}(< m_{i}>)=r_{h_{3}} , Map_{h_{4}}(< r_{h_{3}}>)=r_{h_{4}} , and Map_{h_{5}}(< PID_{i},T_{i},\sigma _{i}^{1},U_{i}>)=r_{h_{5}} . Finally, \mathcal {C} checks whether Map_{s} has the key < R_{i},U_{i}> . If so, \mathcal {C} aborts the simulation process. Otherwise, \mathcal {C} sets Map_{s}(< R_{i},U_{i}>)=1 and sends \{PID_{i},U_{i},T_{i},\sigma _{i}\} to \mathcal {A} . Through the above process, a valid \sigma _{i} for \{PID_{i},U_{i},T_{i},\sigma _{i}\} can be generated. It is easy to see that the signature generation method in the simulation scheme is indistinguishable from that in the real scheme, so that \{PID_{i},U_{i},T_{i},\sigma _{i}\} can be verified successfully by \mathcal {A} .

After sending the above queries to \mathcal {C} and receiving the corresponding values, \mathcal {A} sends the final forged message \{PID_{i},U_{i},T_{i},\sigma _{i}\} to \mathcal {C} . \mathcal {C} checks whether the tuple is valid by using the verification method introduced in Section IV. If the the forged message is not valid, \mathcal {C} aborts the simulation. If the forged message is valid and \mathcal {C} does not abort the simulation process, then we can say that \mathcal {A} successfully forged a valid message \{PID_{i},U_{i},T_{i},\sigma _{i}\} , which is denoted as the event E . To analyze the probability, we first analyze the event E_{1} that the forged message is valid and E_{2} that \mathcal {C} does not abort the simulation process. It is easy to see that Pr[E_{1}]\geq \epsilon ' because of the definition of \epsilon ' . As for E_{2} , \mathcal {C} will abort the simulation process with Pr[\neg E_{2}]\leq \frac {q_{s}}{q^{2}} . Hence we can see that Pr[E]=Pr[E_{1}\bigwedge E_{2}]\geq \epsilon '\left({1-\frac {q_{s}}{q^{2}}}\right) .

At last, \mathcal {C} can obtain two valid \sigma _{i}^{2} and \sigma _{i}^{2'} by running Forking algorithm of Bellare [49] with different outputs of h_{1} -query but the same inputs on < PID_{i},m_{i},T_{i}> . As we know, R_{i}=\sigma _{i}^{2}\cdot P+h_{1}(PID_{i},T_{i})\cdot P_{pub}+h_{5}(PID_{i},T_{i},\sigma _{i}^{1},U_{i})\cdot U_{i} and R_{i}=\sigma _{i}^{2'}\cdot P+h_{1}'(PID_{i},T_{i})\cdot P_{pub}+h_{5}(PID_{i},T_{i},\sigma _{i}^{1},U_{i})\cdot U_{i} . By subtracting two equations, we can get (\sigma _{i}^{2'}-\sigma _{i}^{2})P=(h_{1}(PID_{i},T_{i})-h_{1}'(PID_{i},T_{i}))s\cdot P , which implies \sigma _{i}^{2'}-\sigma _{i}^{2}=(h_{1}(PID_{i},T_{i})-h_{1}'(PID_{i},T_{i}))s\;mod\;q . Hence \mathcal {C} can successfully break the ECDLP by returning s=(h_{1}(PID_{i},T_{i})-h_{1}'(PID_{i},T_{i}))^{-1}(\sigma _{i}^{2'}-\sigma _{i}^{2}) \; mod\; q . According the General Forking Lemma of Bellare [49], i.e., frk\geq acc\cdot \left({\frac {acc}{q}-\frac {1}{h}}\right) , the success probability of \mathcal {C} is \epsilon \geq \epsilon '\left({1-\frac {q_{s}}{q^{2}}}\right)\left({\epsilon '\left({1-\frac {q_{s}}{q^{2}}}\right)/(q_{h_{1}}+q_{h_{2}}+q_{h_{3}}+q_{h_{4}}+q_{h_{5}}+q_{s})-\frac {1}{q}}\right) . The running time \tau of \mathcal {C} is twice that of \mathcal {A} plus the time used to compute the ECDLP solution s=(h_{1}(PID_{i},T_{i})-h_{1}'(PID_{i},T_{i}))^{-1}(\sigma _{i}^{2'}-\sigma _{i}^{2})\; mod \; q , the time for hash-query oracle and the time for sign-query oracle. After counting all necessary time, we can get \tau \approx 2\tau '+5t_{h}+(q_{s}+1)(3t_{sm}+2t_{pa}) .

Theorem 2:
If the TPD is unhackable and PRF function is secure, the new SSK can only be acquired by unrevoked vehicles.

Proof:
We assume that the number of current unrevoked vehicles is N . To update the new SSK, TA needs to generate N different points (x_{i},y_{i})=(PRF(h_{1}(s,ID_{i}),nonce),PRF(h_{1}(s,ID_{i}),nonce+1)) for generating a N -degree polynomial \begin{aligned} f(x)=s'+a_{1}x+a_{2}x^{2}+\\ \ldots +a_{N}x^{N} \end{aligned} . If the PRF function is secure, every point is computationally indistinguishable from the point that is composed of two random numbers in \mathbb Z_{q}^{*} . For every unrevoked vehicle V_{i} , the TPD of V_{i} can compute the point (x_{i},y_{i})=(PRF(h_{1}(s,ID_{i}),nonce),PRF(h_{1}(s,ID_{i}),nonce+1)) . Along with the N points broadcasted by TA, V_{i} can recover the new SSK according to the Lagrange interpolation method. For the revoked vehicles, they can be divided into two types, i.e., the vehicle whose TPD does not have the last used SSK, and the vehicle whose TPD has the last SSK but its ID_{i} is not used to compute the point (x_{i},y_{i})=(PRF(h_{1}(s,ID_{i}),nonce),PRF(h_{1}(s,ID_{i}),nonce+1)) by TA. Neither of two types of vehicles can compute one point that satisfies y=f(x) but is different from all N points in the polynomial time, because s is unknown or ID_{i} is unlegal. So the two kinds of vehicles and external adversary can break the new SSK with the negligible probability 1/q (the guessing probability).

Next, we show that our proposed protocol satisfies the following security requirements.

Conditional privacy-preserving and traceability: Every message sent by V_{i} is identified by PID_{i}=h_{2}(r_{i}\cdot P_{pub},T_{i})\oplus ID_{i} . For other vehicles, PID_{i} is an one-time pad since ID_{i} and r_{i} are both unknown, so that the real identity ID_{i} of V_{i} is private for other vehicles. However, TA can reveal the real identity of V_{i} according to the message \{PID_{i},U_{i},T_{i},\sigma _{i}\} sent by V_{i} . Specifically, TA executes the following three steps. Firstly, TA extracts R_{i} by executing R_{i}=\sigma _{i}^{2}\cdot P+h_{1}(PID_{i},T_{i})\cdot P_{pub}+h_{5}(PID_{i},T_{i},\sigma _{i}^{1},U_{i})\cdot U_{i} . Secondly, TA checks the validity of R_{i} by checking the validity of the signature as shown in the signature verification process. Finally, if the verification result is valid, TA extracts ID_{i} by computing ID_{i}=PID_{i}\oplus h_{2}(s\cdot R_{i},T_{i})=h_{2}(s\cdot R_{i})\oplus h_{2}(r_{i}\cdot P_{pub},T_{i})\oplus ID_{i}=h_{2}(sr_{i}\cdot P,T_{i})\oplus h_{2}(r_{i}s\cdot P,T_{i})\oplus ID_{i}=ID_{i} . Besides, the message sent by a vehicle is traceable, i.e., message is connected with real identity implicitly, because vehicle V_{i} ’s message m_{i} is hidden in the signature \sigma _{i} and \sigma _{i} is connected with pseudo identity (the input of h_{5} contains PID_{i} ) that is a encrypted version of real identity ID_{i} . Therefore, if a vehicle sends the valid \{PID_{i},U_{i},T_{i},\sigma _{i}\} for a wrong traffic emergency message, it can be traced by TA.

Message authentication: Upon receiving the message \{PID_{i},U_{i},T_{i},\sigma _{i}\} from V_{i} , the receiver extracts traffic emergency message m_{i} from \sigma _{i} and verifies the legality of m_{i} . In Theorem 1, we have proved that the proposed CPPA signature scheme is existentially unforgeable against adaptively chosen message attacks under the random oracle model on the condition that ECDLP is computationally hard to be solved, so any PPT adversary is computationally hard to forge a valid \{PID_{i},U_{i},T_{i},\sigma _{i}\} . Therefore, message authentication can be achieved in our proposed scheme.

Resistance of replay attack: Every message \{PID_{i},U_{i},T_{i},\sigma _{i}\} sent by V_{i} is attached with a timestamp T_{i} . The receiver checks the freshness of the received messsage by checking whether the equation |T_{i}-T_{cur}|\leq \Delta T holds where T_{cur} denotes the current timestamp and \Delta T denotes the max valid time interval, and rejects the message if the condition is not satisfied. If an adversary intercepts a valid \{PID_{i},U_{i},T_{i},\sigma _{i}\} and broadcasts \{PID_{i},U_{i},T_{i}',\sigma _{i}\} with a new valid timestamp T_{i}' , then the message will fail to pass the signature verification process because of the signature verification mechanism. So the replay attack can be resisted in the proposed scheme.

Un-linkability: In the message generation process, every vehicle needs to generate a random pseudo identity PID_{i}=h_{2}(r_{i}\cdot P_{pub},T_{i})\oplus ID_{i} and a signature \sigma _{i}=(\sigma _{i}^{1},\sigma _{i}^{2}) where \sigma _{i}^{1}=(R_{i})^{X}\oplus (h_{3}(m_{i})||(h_{4}(h_{3}(m_{i}))\oplus m_{i})) and \sigma _{i}^{2}=k_{i}+h_{5}(PID_{i},T_{i},\sigma _{i}^{1},U_{i})\cdot u_{i} . For multiple messages generated by vehicle V_{i} , the adversary can not use them to trace V_{i} by analyzing multiple PID_{i} or \sigma _{i} because r_{i} and k_{i} are random and one-time. So the adversary is hard to link multiple messages of the same vehicle.

Resistance of modification attack: The secured traffic safety message sent by a vehicle is \{PID_{i},U_{i},T_{i},\sigma _{i}\} (message m_{i} is hidden in signature \sigma _{i} ), where \{PID_{i},U_{i},T_{i},m_{i}\} is secured by signature \sigma _{i} . Therefore, the modification of PID_{i} , U_{i} , T_{i} , or m_{i} will fail to pass the verification check.

Resistance of impersonation attack: If the adversary accesses the communication channel and broadcasts a new message \{PID_{i},U_{i}',T_{i}',\sigma _{i}'\} where PID_{i} is copied from the intercepted message \{PID_{i},U_{i},T_{i},\sigma _{i}\} , the message will fail to pass the check because of the signature verification mechanism.

Resistance of man-in-the-middle attack: For traffic-related messages sent by vehicles, every receiver is required to authenticate the received messages. According to Theorem 1, the adversary can not intercept a valid message, and then modify or forge the message successfully. For the key updating message generated by TA, the updating information is secured by the ECC-based Schnorr signature, so the adversary can not modify or forge the key updating message successfully. Therefore, our proposed scheme can resist man-in-the-middle attack.

Key security: In Theorem 2, we have proved that only unrevoked vehicles can update the newest SSK successfully after receiving the key updating message. Every SSK is generated by TA using the random way, such that the new SSK will not correlate with the older SSKs. Therefore, our proposed SSK updating scheme satisfies forward and backward security.

In the above security analysis, security requirements aim at passive and active attacks launched by potential external and internal attackers defined in Section II-D. Herein we show which feature (or design) of the proposed scheme can help to prevent specific attacks. The real identity of a vehicle is encrypted using the one-time-pad encryption (combined with Diffie-Hellman key exchange), so that tracing attacks can be resisted. The message receiver needs to check freshness of the message via timestamp, so that replay attacks can be detected. The one-time random numbers are used in the signature and pseudo-identity generation processes, so that message-linking attacks can be resisted. The SSK updating algorithm broadcasts only n shares for updating SSK (while at least n+1 shares are required to compute SSK), so that revoked vehicles or attackers are computationally infeasible to compromise SSK. The signature scheme is existential unforgeable against chosen message attacks on the condition that ECDLP is computationally hard to be solved, so that modification, impersonation, and man-in-the-middle attacks can be resisted.

SECTION VI.Performance Analysis for the Proposed CPPA Signature Scheme
In this section, we give the performance analysis of our proposed CPPA signature scheme. We compare our proposed scheme with several related schemes [14], [44], [37], [41], where He et al.’s scheme [14] is the original ECC-based CPPA scheme in VANETs, Shen et al.’s scheme [44] also uses the message recovery concept to decrease data packet size, Ming et al.’s scheme [37], and Sutrala et al.’s scheme [41] are two improved ECC-based CPPA signature scheme in VANETs.

For analyzing the computational and communication overhead of cryptography operation, we have the following settings for cryptographic operations related to bilinear pairing and elliptic curve, respectively. To achieve 80-bit security level, we use a symmetric bilinear pairing e:\mathbb {G}_{1}\times \mathbb {G}_{1}\rightarrow \mathbb {G}_{T} where \mathbb {G}_{1} is an additive group generated by a point \overline {P} with order \overline {q} over the super singular elliptic curve y^{2}=x^{3}+x \,\,mod\,\,\overline {p} with embedding degree 2 (\overline {q} and \overline {p} are 160-bit and 512-bit prime numbers, respectively). At the same time, we use an additive group \mathbb {G} that is generated by a point P with order q over the non-singular elliptic curve y^{2}=x^{3}+ax+b\,\,mod\,\,p where p and q are two primes, and a,b\in Z_{p}^{*} . It is noteworthy that the size of traffic emergency message is limited to 160 bits when using the above settings. If the requirement of the size of traffic emergency message is large than 160 bits, an elliptic curve with larger order can be chosen. For example, curve P-256 and P-384 can be chosen to support 256-bit message and 384-bit message respectively. We measure all involved cryptography operations of the proposed scheme and comparison schemes using a C/C++ cryptography library called MIRACL [50]. Under Ubuntu 14.04 environment with Intel i7-6700 CPU and 8GB DDR4 RAM, we have the measurement results as shown in Table II.

TABLE II The Execution Time of Several Cryptographic Operations

A. Computational Overhead Analysis
In this subsection, we analyze the computational overhead of these schemes in terms of three processes, i.e., pseudo identity generation, message signing that includes signature generation and public key generation, and message verification.

Since Shen et al.’s scheme [44] did not consider the usage of pseudo identity, the computational overhead of the pseudo identity generation process of their scheme is 0ms. For the message signing process, a vehicle needs to perform one pairing operation, one scalar multiplication operation related to bilinear pairing, and four hash operations. So the computational overhead of the signature generation process is T_{bp}+T_{sm-bp}+3T_{h}=3.753ms . For the message verification process, a vehicle needs to perform two pairing operations and three hash operations. So the computational overhead of the message verification process is 2T_{bp}+3T_{h}=6.248ms .

For the pseudo identity generation process of He et al.’s scheme [14], a vehicle needs to perform two scalar multiplication operations related to ECC and one hash operation. So the computational overhead of the pseudo identity generation process is 2T_{sm-ecc}+T_{h}=0.704ms . For the message signing process, a vehicle needs to perform one scalar multiplication operation related to ECC and two hash operations. So the computational overhead of the message signing process is T_{sm-ecc}+2T_{h}=0.355ms . For the message verification process, a vehicle needs to perform three scalar multiplication operations related to ECC, two point addition operations related to ECC, and two hash operations. So the computational overhead of the message verification process is 3T_{sm-ecc}+2T_{pa-ecc}+2T_{h}=1.0622ms .

The pseudo identity generation process of Ming et al.’s scheme [37] is the same as that of He et al.’s scheme [14], so the computational overhead of the pseudo identity generation process is 2T_{sm-ecc}+T_{h}=0.704ms . For the message signing process, a vehicle needs to perform two scalar multiplication operations related to ECC and two hash operations. So the computational overhead of the message signing process is 2T_{sm-ecc}+2T_{h}=0.706ms . For the message verification process, a vehicle needs to perform three scalar multiplication operations related to ECC, three point addition operations related to ECC, and three hash operations. So the computational overhead of the message verification process is 3T_{sm-ecc}+3T_{pa-ecc}+3T_{h}=1.0668ms .

For the pseudo identity generation process of Sutrala et al.’s scheme [41], a vehicle needs to perform four scalar multiplication operations related to ECC and two hash operations. So the computational overhead of the pseudo identity generation process of their scheme is 4T_{sm-ecc}+2T_{h}=1.408ms . Note that the pseudo identities of vehicles in Sutrala et al.’s scheme [41] are generated by RSU and we only count the computational overhead at vehicle side. For the message signing process, a vehicle needs to perform one scalar multiplication operation related to ECC and one hash operation. So the computational overhead of the message signing process is T_{sm-ecc}+T_{h}=0.353ms . For the message verification process, a vehicle needs to perform three scalar multiplication operations related to ECC, two point addition operations related to ECC, and two hash operations. So the computational overhead of the message verification process is 3T_{sm-ecc}+2T_{pa-ecc}+2T_{h}=1.0622ms .

For the pseudo identity generation process of our proposed scheme [14], a vehicle needs to perform one scalar multiplication operation related to ECC and one hash operation. So the computational overhead of the pseudo identity generation process is T_{sm-ecc}+T_{h}=0.353ms . For the message signing process, a vehicle needs to perform two scalar multiplication operations related to ECC and four hash operations. So the computational overhead of the message signing process is 2T_{sm-ecc}+4T_{h}=0.71ms . For the message verification process, a vehicle needs to perform three scalar multiplication operations related to ECC, two point addition operations related to ECC, and two hash operations. So the computational overhead of the message verification process is 3T_{sm-ecc}+2T_{pa-ecc}+5T_{h}=1.0682ms .

The comparison of these schemes in terms of computational overhead is shown in Figure 2. From the figure, we can see that our proposed scheme has the lowest computational overhead in terms of pseudo identity generation among all schemes. The computational overhead of signature verification in our proposed scheme is higher than that of He et al.’s scheme [14], Ming et al.’s scheme [37], and Sutrala et al.’s scheme [41], but lower than that of Shen et al.’s scheme [44]. For signature verification process, our proposed scheme together with the four related schemes [14], [44], [37], [39], [41] have almost the same computational overhead.

Fig. 2. - The comparisons of computational overhead in terms of pseudo identity generation, signature generation, and signature verification, respectively.
Fig. 2.
The comparisons of computational overhead in terms of pseudo identity generation, signature generation, and signature verification, respectively.

Show All

B. Communication or Storage Overhead Analysis
In this subsection, we analyze the communication overhead of these schemes based on the above parameter settings. Since our proposed scheme and Shen et al.’s scheme [44] both support message recovery, we measure the communication or storage overhead of identity, traffic-related message, timestamp, signature, and necessary public keys. For the convenience of comparison, we assume that the traffic-related message is encoded to be a 160-bit string and the size of timestamp is 32 bits (as we explained above, an elliptic curve with larger order can be chosen if we need the message with larger size).

In Shen et al.’s scheme [44], a vehicles needs to broadcast \{ID_{i},T_{i},\sigma _{i}=(e(g,g)^{r_{1}},r_{2},\eta)\} where ID_{i}\in \mathbb Z_{q}^{*},e(g,g)^{r_{1}}\in \mathbb {G_{T}},r_{2}\in \mathbb Z_{q}^{*},\eta \in \mathbb {G}_{1} (Shen et al.’s scheme [44] uses the real identity instead of pseudo identity, so conditional privacy-preserving is not satisfied). So the communication overhead of Shen et al.’s scheme [44] is (160+32+2048+160+1024)/8=428 bytes . In He et al.’s scheme [14], a vehicle needs to broadcast \{PID_{i}=(PID_{i}^{1},PID_{i}^{2}),m_{i},T_{i},\sigma _{i},R_{i}\} where PID_{i}^{1},R_{i}\in \mathbb {G} , PID_{i}^{2},\sigma _{i}\in \mathbb Z_{q}^{*} . So the communication overhead of He et al.’s scheme [14] is (320+160+160+32+160+320)/8=144 bytes . In Ming et al.’s scheme [37], a vehicle needs to broadcast \{PID_{i}=(PID_{i}^{1},PID_{i}^{2}),m_{i},T_{i},P_{i},D_{i},R_{i},\sigma _{i}\} where PID_{i}^{1},P_{i},D_{i},R_{i}\in \mathbb {G} , PID_{i}^{2},\sigma _{i}\in \mathbb Z_{q}^{*} . So the communication overhead of Ming et al.’s scheme [37] is (320+160+160+32+320+320+320+160)/8=224 bytes . In Sutrala et al’s scheme [41], a vehicle needs to broadcast \{PID_{i}=(PID_{i}^{1},PID_{i}^{2},T_{i}),m_{i},\delta _{i}=(f_{i},g_{i}),B_{i},K_{i},R_{i},T_{1}\} where PID_{i}^{1},B_{i},K_{i},R_{i}\in \mathbb {G} , PID_{i}^{2},f_{i},g_{i}\in \mathbb Z_{q}^{*} . So the communication overhead of Sutrala et al.’s scheme [41] is (320+160+32+160+160+160+320+320+320)/8=244 bytes . In our proposed scheme, a vehicle needs to broadcast \{PID_{i},T_{i},\sigma _{i}=(\sigma _{i}^{1},\sigma _{i}^{2}),U_{i}\} where PID_{i},\sigma _{i}^{1},\sigma _{i}^{2}\in \mathbb Z_{q}^{*},U_{i}\in \mathbb {G} . So the communication overhead of our proposed scheme is (160+32+160+160+320)/8=104 bytes . It is noteworthy that the content broadcasted by a vehicle in both Shen et al.’s scheme [44] and our proposed scheme do not contain m_{i} because the two schemes both support message recovery. The communication overhead comparisons of these schemes are shown in Fig. 3.


Fig. 3.
The comparisons of communication overhead.

Show All

We can see that our proposed scheme has the lowest communication and storage overhead. Specifically, the communication or storage overhead of our proposed CPPA scheme is 24% of that of Shen et al.’s scheme [44], 72% of that of He et al.’s scheme [14], 46% of that of Ming et al.’s scheme [37], 43% of that of Sutrala et al.’s scheme [41]. This phenomenon is caused by two reasons. One reason is that we use elliptic curve instead of bilinear pairing. The other reason is that our proposed CPPA scheme makes the transmission cost of pseudo identity and signature as low as possible without sacrificing security strength. It is noteworthy that the pseudo identity of the vehicle in our proposed CPPA scheme is only a number in \mathbb Z_{q}^{*} , while that in He et al.’s scheme [14] contains not only a number in \mathbb Z_{q}^{*} but also a point in \mathbb {G} .

C. Network Simulation Analysis
In this subsection, we use the simulation tool to analyze the network performance of the proposed scheme together with related schemes. For measuring the network performance of our proposed protocol, we use three tools, i.e., Omnet++ [51], Sumo [52], and Veins 4.6 [53]. OMNeT++ is an extensible, modular, component-based C++ simulation library and framework, primarily for building network simulators that supports the simulation for wired network and wireless ad-hoc network. Sumo is an open-source, highly portable, microscopic and continuous road traffic simulation package designed to handle large road networks. Veins acts as a middleware between Omnet++ and Sumo [54]. And the general parameters of simulation are shown in Table III.

TABLE III Simulation Parameters

First, we compare the proposed CPPA scheme together with related schemes [14], [44], [37], [41] in terms of authentication delay. The authentication delay refers to the sum of message transmission delay and message verification delay, and is calculated by Equation (1) where N denotes the number of simulated vehicles, n_{i} denotes the number of received messages for V_{i} , T_{rec}^{j} denotes the receiving time for message m_{j} , and T_{send}^{j} denotes the sending time for message m_{j} . We set up a simulation scenario where several moving vehicles periodically send traffic emergency messages. The comparison of authentication delay is shown in Fig. 4. From the figure, we can see that the moving speeds of vehicles slightly affects the authentication delay, and our proposed scheme has the lowest authentication delay among all schemes. Note that the authentication delay of Shen et al.’ scheme [44] is not shown in Fig. 4 because the value reaches 10.632ms when the average speeds of vehicles are 5m/s, whereas that of the other four schemes are all lower than 3.5ms.\begin{equation*} AvgAuthDelay=\frac {1}{N}\sum _{i=1}^{N}\left({\frac {1}{n_{i}}\sum _{j=1}^{n_{i}}(T_{rec}^{j}-T_{send}^{j})}\right)\tag{1}\end{equation*}
View Source


Fig. 4.
The comparison of authentication delay.

Show All

Next, we compare the proposed CPPA scheme together with related schemes [14], [44], [37], [41] in terms of packet loss ratio. The packet loss ratio occurs because of the MAC layer contention mechanism in IEEE 802.11p protocol, and is calculated by Equation (2) where N denotes the number of simulated vehicles, N_{lost}^{i} denotes the number of lost packets for V_{i} , and N_{received}^{i} denotes the number of received traffic emergency messages for V_{i} . As described in WAVE standard [55], each vehicle is recommended to broadcast safety messages with an interval less than 100ms, so we set up a simulation scenario where several moving vehicles periodically send traffic emergency messages with two types of interval, i.e., 100ms and 50ms. The comparison of packet loss ratio is shown in Fig. 5.\begin{equation*} AvgPLR=\frac {1}{N}\sum _{i=1}^{N}\left({\frac {N_{lost}^{i}}{N_{received}^{i}+N_{lost}^{i}}}\right)\tag{2}\end{equation*}
View SourceRight-click on figure for MathML and additional features.

Fig. 5. - The comparison of packet loss ratio.
Fig. 5.
The comparison of packet loss ratio.

Show All

From the above analysis, we can get two conclusions about our proposed CPPA scheme. One is that our proposed CPPA scheme has very low communication and storage overhead, so that the transmission of the traffic emergency message would occupy a little bandwidth, and the receiver would require a small amount of storage space to buffer the traffic emergency message. The other is that our proposed CPPA scheme has low computational overhead so that vehicles would cost little computational overhead for securing traffic emergency messages.

SECTION VII.Performance Analysis for the SSK Updating Algorithm
In this section, we give the performance evaluation of the proposed SSK updating algorithm. First, we analyze the computational complexity of TA and vehicle, respectively. Assuming that the current number of unrevoked vehicles is N . As described in Section IV-C, TA needs to choose N additional random points that pass through the polynomial y=f(x)=s'+a_{1}x+a_{2}x^{2}+\ldots +a_{N}x^{N}\;mod\;q . Specifically, to generate a random point that satisfies the requirement, TA first chooses a random x\in \mathbb Z_{q}^{*} that is different from any value in \{x_{i}=PRF(h_{1}(s,ID_{i}))|1\leq i\leq N\} , and then calculates corresponding y using the Lagrange interpolation method, i.e., y=\sum _{i=0}^{N}\left({y_{i}\cdot \prod _{j=0\;\&\;j\neq i}^{N} ((x-x_{j})/(x_{i}'-x_{j}'))}\right) , which brings O(N^{2}) computational complexity. Since the main computational expensive operations for TA are choosing N additional random points, the computational complexity for TA in the proposed SSK updating algorithm is O(N^{3}) . As for the vehicle side, the main computational expensive operations for vehicles are recovering SSK using the Lagrange interpolation method, so the computational complexity for the vehicle in the proposed SSK updating algorithm is O(N^{2}) .

Next, we give an experimental analysis of the SSK updating algorithm. Here we only consider the computational overhead at vehicle side, because the computational resources for vehicles are limited (TA is always assumed to have sufficient computational resources). To measure the computational overhead, we use MIRACL library to implement all steps in Section IV-C. For the cryptographic operations related to ECC, we use the parameter setting as described in Section VI. For the PRF function, we use the most common method to implement PRF, i.e., using the block cipher algorithm AES-192 with CBC mode (an additional modular operation is used to make the output of PRF function belong in \mathbb Z_{q}^{*} ). Note that we implement all steps intuitively without using any optimization method such as multi-thread technology, and our measurement for running time aims at the entire program. To measure the network transmission delay, we use Veins as the simulation framework (using the parameter settings in Section V). Specifically, we set up the environment where an RSU broadcasts the SSK updating message generated by TA to nearby vehicles. By these settings, we measure the SSK extraction delay that is calculated by \frac {1}{n} \sum _{i=1}^{n}(T_{receive}^{i}-T_{send}^{i}+T_{extract}^{i}) , where n , T_{receive}^{i} , T_{send}^{i} , T_{extract}^{i} denote the number of vehicles (that are in the transmission range covered by the RSU), the data packet receiving time of vehicle V_{i} , the data packet sending time of RSU, and the SSK extracting time. The simulation result is shown in Fig. 6. Since the SSK updating algorithm is only performed once in a while, the computational burden for vehicles are acceptable if the number of unrevoked vehicles is not too large.

Fig. 6. - Average SSK extraction delay for vehicles.
Fig. 6.
Average SSK extraction delay for vehicles.

Show All

If the number of vehicles that share the same SSK is too large (up to hundreds of thousands), then two issues will appear. One is that the probability of the compromise of SSK will increase from the probability perspective (because of potential side-channel attacks). The other is that the computational and communication overhead brought by the SSK updating algorithm may affect system performance. A potential optimization method for solving the two issues is using multiple SSKs instead of only one SSK, i.e., vehicles can be divided into several groups (only members in the same group has the same SSK) according to some common attributes (e.g., place of registration or time of registration), so that the SSK updating material is only for a limited number of vehicles. To fit the optimization method, vehicles need to specify which system public key is used in the signature generation process. For the details of the optimization method, we will research it in future works.

SECTION VIII.Conclusion
Herein, we proposed an identity-based conditional privacy-preserving signature scheme with message recovery, along with an SSK updating algorithm. The proposed CPPA scheme supported message recovery and was constructed on elliptic curve cryptography, which significantly reduced the total length of the pseudo identity, traffic emergency message, and corresponding signature. Hence, the CPPA scheme would be more beneficial for securing communications related to traffic emergency messages that are delay-sensitive. The designed SSK updating algorithm enables only unrevoked vehicles to acquire the newest SSK through a public insecure channel such that the SSK, which is the base of the CPPA scheme, has a higher security strength. The designed CPPA scheme along with the SSK updating algorithm can efficiently secure traffic emergency message communication. Finally, the security analysis showed that our proposed scheme satisfied the security and privacy requirements of VANETs, whereas the performance analysis demonstrated that our proposed scheme offered certain advantages compared with related schemes.